(()=>{"use strict";function e(e,t){const a=t*t;return 0===e?"top-left":e===t-1?"top-right":e===a-t?"bottom-left":e===a-1?"bottom-right":e>0&&e<t-1?"top":e<a-1&&e>a-t?"bottom":e%t==0?"left":e%t==t-1?"right":"center"}function t(e,t){let a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:8;const s=[];function i(e){return Math.ceil((e+1)/a)}for(let r=1;r<=t;r++){const t=e-a*r,h=e+a*r,n=e-1*r,l=e+1*r,o=e-(a-1)*r,c=e-(a+1)*r,m=e+(a+1)*r,d=e+(a-1)*r,p=i(e);t>=0&&s.push(t),h<=a**2-1&&s.push(h),p===i(n)&&s.push(n),p===i(l)&&s.push(l),o>0&&p-r===i(o)&&s.push(o),c>=0&&p-r===i(c)&&s.push(c),m<=a**2-1&&p+r===i(m)&&s.push(m),d<a**2-1&&p+r===i(d)&&s.push(d)}return s}function a(e,a,s){return t(e,s).includes(a)}function s(e){return new Promise((t=>{setTimeout((()=>{t(!0)}),e)}))}class i{constructor(){this.boardSize=8,this.container=null,this.boardEl=null,this.cells=[],this.cellClickListeners=[],this.cellEnterListeners=[],this.cellLeaveListeners=[],this.newGameListeners=[],this.saveGameListeners=[],this.loadGameListeners=[]}bindToDOM(e){if(!(e instanceof HTMLElement))throw new Error("container is not HTMLElement");this.container=e}drawUi(t){this.checkBinding(),this.container.innerHTML='\n      <div class="controls">\n        <button data-id="action-restart" class="btn">New Game</button>\n        <button data-id="action-save" class="btn">Save Game</button>\n        <button data-id="action-load" class="btn">Load Game</button>\n      </div>\n      <div class="game-info">\n        <span data-id="current-level">Current level: 1</span>\n        <span data-id="current-score">Current Score: 0</span>\n        <span data-id="best-score">Best Score: 0</span>\n      </div>\n      <div class="board-container">\n        <div data-id="board" class="board"></div>\n      </div>\n    ',this.newGameEl=this.container.querySelector("[data-id=action-restart]"),this.saveGameEl=this.container.querySelector("[data-id=action-save]"),this.loadGameEl=this.container.querySelector("[data-id=action-load]"),this.currentLevel=this.container.querySelector("[data-id=current-level]"),this.currentScore=this.container.querySelector("[data-id=current-score]"),this.bestScore=this.container.querySelector("[data-id=best-score]"),this.newGameEl.addEventListener("click",(e=>this.onNewGameClick(e))),this.saveGameEl.addEventListener("click",(e=>this.onSaveGameClick(e))),this.loadGameEl.addEventListener("click",(e=>this.onLoadGameClick(e))),this.boardEl=this.container.querySelector("[data-id=board]"),this.boardEl.classList.add(t);for(let t=0;t<this.boardSize**2;t+=1){const a=document.createElement("div");a.classList.add("cell","map-tile",`map-tile-${e(t,this.boardSize)}`),a.addEventListener("mouseenter",(e=>this.onCellEnter(e))),a.addEventListener("mouseleave",(e=>this.onCellLeave(e))),a.addEventListener("click",(e=>this.onCellClick(e))),this.boardEl.appendChild(a)}this.cells=Array.from(this.boardEl.children)}redrawPositions(e){for(const e of this.cells)e.innerHTML="";for(const a of e){const e=this.boardEl.children[a.position],s=document.createElement("div");s.classList.add("character",a.character.type);const i=document.createElement("div");i.classList.add("health-level");const r=document.createElement("div");r.classList.add("health-level-indicator","health-level-indicator-"+((t=a.character.health)<15?"critical":t<50?"normal":"high")),r.style.width=`${a.character.health}%`,i.appendChild(r),s.appendChild(i),e.appendChild(s)}var t}addCellEnterListener(e){this.cellEnterListeners.push(e)}addCellLeaveListener(e){this.cellLeaveListeners.push(e)}addCellClickListener(e){this.cellClickListeners.push(e)}addNewGameListener(e){this.newGameListeners.push(e)}addSaveGameListener(e){this.saveGameListeners.push(e)}addLoadGameListener(e){this.loadGameListeners.push(e)}onCellEnter(e){e.preventDefault();const t=this.cells.indexOf(e.currentTarget);this.cellEnterListeners.forEach((e=>e.call(null,t)))}onCellLeave(e){e.preventDefault();const t=this.cells.indexOf(e.currentTarget);this.cellLeaveListeners.forEach((e=>e.call(null,t)))}onCellClick(e){const t=this.cells.indexOf(e.currentTarget);this.cellClickListeners.forEach((e=>e.call(null,t)))}onNewGameClick(e){e.preventDefault(),this.newGameListeners.forEach((e=>e.call(null)))}onSaveGameClick(e){e.preventDefault(),this.saveGameListeners.forEach((e=>e.call(null)))}onLoadGameClick(e){e.preventDefault(),this.loadGameListeners.forEach((e=>e.call(null)))}static showError(e){alert(e)}static showMessage(e){alert(e)}selectCell(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"yellow";this.deselectCell(e),this.cells[e].classList.add("selected",`selected-${t}`)}deselectCell(e){const t=this.cells[e];t.classList.remove(...Array.from(t.classList).filter((e=>e.startsWith("selected"))))}showCellTooltip(e,t){this.cells[t].title=e}hideCellTooltip(e){this.cells[e].title=""}showDamage(e,t){return new Promise((a=>{const s=this.cells[e],i=document.createElement("span");i.textContent=t,i.classList.add("damage"),s.appendChild(i),i.addEventListener("animationend",(()=>{s.removeChild(i),a()}))}))}setCursor(e){this.boardEl.style.cursor=e}checkBinding(){if(null===this.container)throw new Error("GamePlay not bind to DOM")}setCurrentLevel(e){this.currentLevel.innerHTML=`Current Level: ${e}`}setCurrentScore(e){this.currentScore.innerHTML=`Current Score: ${e}`}setBestScore(e){this.bestScore.innerHTML=`Best Score: ${e}`}}const r={prairie:"prairie",desert:"desert",arctic:"arctic",mountain:"mountain"},h="pointer",n="crosshair",l="not-allowed";class o{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"generic";if(this.level=e,this.attack=0,this.defence=0,this.health=50,this.type=t,"Character"===new.target.name)throw new Error("It's not allowed to create new instances of Characters using 'new Character'. Please use classes that extend class Character instead (Bowman, Daemon, etc.)")}levelUp(){this.health>0&&(this.level+=1,this.attack=Math.max(this.attack,Math.round(this.attack*(.8+this.health/100))),this.defence=Math.max(this.defence,Math.round(this.defence*(.8+this.health/100))),this.health<20?this.health+=80:this.health=100)}}class c{constructor(e,t){if(!(e instanceof o))throw new Error("character must be instance of Character or its children");if("number"!=typeof t)throw new Error("position must be a number");this.character=e,this.position=t}levelUp(){this.health>0&&(this.level+=1,this.attack=Math.max(this.attack,Math.round(this.attack*(.8+this.health/100))),this.defence=Math.max(this.defence,Math.round(this.defence*(.8+this.health/100))),this.health<20?this.health+=80:this.health=100)}}function*m(e,t){const a=Math.floor(Math.random()*e.length),s=Math.floor(1+Math.random()*t);yield new e[a](s)}function d(e,t,a){const s=[];for(let i=0;i<a;i++)s.push(m(e,t).next().value);return s}function p(e,t){let a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:8;const s=[...Array(a**2).keys()];let i=null;"human"===t?i=s.filter((e=>e%a==0||e%a==1)):"comp"===t&&(i=s.filter((e=>e%a==6||e%a==7)));const r=[];for(let t=0;t<e.length;t++){const a=Math.floor(Math.random()*i.length),s=i[a];i.splice(a,1),r.push(new c(e[t],s))}return r}class u extends o{constructor(e){super(e,"bowman"),this.attack=25,this.defence=25,this.attackDistance=2,this.moveDistance=2,this.team="human"}}class g extends o{constructor(e){super(e,"daemon"),this.attack=10,this.defence=40,this.attackDistance=4,this.moveDistance=1,this.team="comp"}}class C extends o{constructor(e){super(e,"magician"),this.attack=10,this.defence=40,this.attackDistance=4,this.moveDistance=1,this.team="human"}}class v extends o{constructor(e){super(e,"swordsman"),this.attack=40,this.defence=10,this.attackDistance=1,this.moveDistance=4,this.team="human"}}class f extends o{constructor(e){super(e,"undead"),this.attack=40,this.defence=10,this.attackDistance=1,this.moveDistance=4,this.team="comp"}}class S extends o{constructor(e){super(e,"vampire"),this.attack=25,this.defence=25,this.attackDistance=2,this.moveDistance=2,this.team="comp"}}class y{constructor(){this.teamComp=[g,f,S],this.teamHumanInit=[u,v],this.teamHuman=[u,C,v]}}class w{constructor(){this.playersTurn=!0,this.level=1,this.points=0,this.highestPoints=0,this.positioned=[]}static from(e){return"object"==typeof e?{object:e}:null}}const L=new i;L.bindToDOM(document.querySelector("#game-container"));const T=new class{constructor(e){this.storage=e}save(e){this.storage.setItem("state",JSON.stringify(e))}load(){try{return JSON.parse(this.storage.getItem("state"))}catch(e){throw new Error("Invalid state")}}}(localStorage),P=new class{constructor(e,t){this.gamePlay=e,this.stateService=t,this.gameState=new w,this.selectedCharacter=!1,this.indexOfSelectedCharacter=null,this.previouslySelected=null}init(){this.prepareBoard(),this.drawCharacters()}prepareBoard(){this.gamePlay.drawUi(Object.values(r)[this.gameState.level-1]),this.removeListeners(),this.addListeners(),this.showStats()}drawCharacters(){this.teamHuman=d((new y).teamHumanInit,1,2),this.teamComp=d((new y).teamComp,1,2),this.posTeamHuman=p(this.teamHuman,"human"),this.posTeamComp=p(this.teamComp,"comp"),this.gameState.positioned=[...this.posTeamHuman,...this.posTeamComp],this.gamePlay.redrawPositions(this.gameState.positioned)}onCellEnter(e){const t=this.findCharacterHere(e);if(t){const{level:a,attack:s,defence:i,health:r}=t.character;this.gamePlay.showCellTooltip(`🎖${a} ⚔${s} 🛡${i} ❤${r}`,e)}if(this.indexOfSelectedCharacter&&this.selectedCharacter){const s=this.findNumberOfStepsToMove(),i=this.findNumberOfStepsToAttack();if(s||i){const r=a(this.indexOfSelectedCharacter,e,s),o=a(this.indexOfSelectedCharacter,e,i);this.selectedCharacter&&(r&&!this.findCharacterHere(e)&&(this.gamePlay.selectCell(e,"green"),this.gamePlay.setCursor(h)),r||this.gamePlay.setCursor(l),"comp"===(null==t?void 0:t.character.team)&&o?(this.gamePlay.selectCell(e,"red"),this.gamePlay.setCursor(n)):"human"===(null==t?void 0:t.character.team)&&this.gamePlay.selectCell(e,""))}}}onCellLeave(e){this.gamePlay.hideCellTooltip(e),e!==this.indexOfSelectedCharacter&&(this.gamePlay.deselectCell(e),this.gamePlay.setCursor(h))}onCellClick(e){if(this.gameState.playersTurn){if(this.posTeamHuman.length>0&&this.gameState.level<=4&&0!==this.posTeamComp.length){const t=this.findCharacterHere(e);if(t){const{team:a}=t.character;"comp"!==a||this.selectedCharacter?(this.previouslySelected=this.selectedCharacter,this.selectedCharacter=t,this.gamePlay.deselectCell(this.indexOfSelectedCharacter||e),this.gamePlay.selectCell(e),this.indexOfSelectedCharacter=e,this.gamePlay.setCursor(h)):(i.showError("It is not your character. Choose yours"),this.gamePlay.deselectCell(this.indexOfSelectedCharacter||e))}else this.selectedCharacter||i.showError("There is no character here. Choose any cell with a character");if(this.previouslySelected&&t){const s=this.previouslySelected.character.attackDistance,r=a(this.previouslySelected.position,e,s),{team:h}=t.character;if("human"===h)this.gamePlay.deselectCell(this.indexOfSelectedCharacter),this.gamePlay.selectCell(e);else if(r){const a=t,s=Math.max(this.selectedCharacter.character.attack-a.character.defence,.1*this.selectedCharacter.character.attack);this.gamePlay.showDamage(e,s).then((()=>{a.character.health-=s;const e=this.posTeamComp.indexOf(a);a.character.health<=0&&(this.posTeamComp.splice(e,1),this.gameState.positioned=[...this.posTeamHuman,...this.posTeamComp],0===this.posTeamComp.length&&(this.gameState.playersTurn=!0,this.levelUp())),this.removeSelected(),this.gamePlay.redrawPositions(this.gameState.positioned),this.computersMove()})),this.selectedCharacter=null,this.indexOfSelectedCharacter=null,this.gameState.playersTurn=!1}else i.showError("It is too far to attack this character"),this.selectedCharacter=null,this.previouslySelected=null,this.removeSelected(),this.computersMove()}if(!t&&this.selectedCharacter){const t=this.findNumberOfStepsToMove();a(this.indexOfSelectedCharacter,e,t)?(this.posTeamHuman=[...this.posTeamHuman].filter((e=>e.position!==this.indexOfSelectedCharacter)),this.selectedCharacter.position=e,this.posTeamHuman.push(this.selectedCharacter),this.gameState.positioned=[...this.posTeamHuman,...this.posTeamComp],this.selectedCharacter=null,this.indexOfSelectedCharacter=null,this.gamePlay.redrawPositions(this.gameState.positioned),this.removeSelected(),this.gameState.playersTurn=!1):i.showError("It is not allowed to move there"),this.computersMove()}}}else i.showError("It is not your turn yet")}async computersMove(){if(this.gameState.playersTurn)this.gameState.playersTurn=!0;else{await s(300);const e=Math.floor(Math.random()*this.posTeamComp.length),a=this.posTeamComp[e],r=a.position,h=a.character.moveDistance,n=a.character.attackDistance,l=this.posTeamHuman.map((e=>e.position)),o=this.posTeamComp.map((e=>e.position)),c=t(r,h).filter((e=>-1===o.indexOf(e))).filter((e=>-1===l.indexOf(e))),m=t(r,n).filter((e=>l.indexOf(e)>-1));let d=null;if(1===m.length?d=m[0]:m.length>1&&(d=m[Math.floor(Math.random()*m.length)]),d){const e=this.findCharacterHere(d),t=Math.max(a.character.attack-e.character.defence,.1*a.character.attack);this.gamePlay.selectCell(a.position),await s(300),this.gamePlay.selectCell(d,"red");const r=this.gamePlay.showDamage(d,t);this.gamePlay.deselectCell(a.position),r.then((()=>{e.character.health-=t;const a=this.posTeamHuman.indexOf(e);e.character.health<=0&&(this.posTeamHuman.splice(a,1),this.gameState.positioned=[...this.posTeamHuman,...this.posTeamComp],0===this.posTeamHuman.length&&i.showMessage("You lost. Better luck next time")),this.gamePlay.redrawPositions(this.gameState.positioned),this.gamePlay.deselectCell(d)}))}else this.posTeamComp=[...this.posTeamComp].filter((e=>e.position!==r)),this.gamePlay.selectCell(a.position),await s(300),this.gamePlay.deselectCell(a.position),a.position=c[Math.floor(Math.random()*c.length)],this.gamePlay.selectCell(a.position,"green"),await s(300),this.gamePlay.deselectCell(a.position),this.posTeamComp.push(a),this.gameState.positioned=[...this.posTeamHuman,...this.posTeamComp],this.gamePlay.redrawPositions(this.gameState.positioned);this.gameState.playersTurn=!0}}levelUp(){this.gameState.level<=4&&(this.gameState.points+=this.posTeamHuman.map((e=>e.character.health)).reduce(((e,t)=>e+t)),this.gameState.highestPoints<this.gameState.points&&(this.gameState.highestPoints=this.gameState.points),this.showStats(),this.gameState.level<4?(this.gameState.level+=1,this.prepareBoard(),this.gameState.positioned.forEach((e=>e.character.levelUp())),this.teamHuman=this.posTeamHuman.map((e=>e.character)),this.teamHuman.push(m((new y).teamHuman,this.gameState.level-1).next().value),this.posTeamHuman=p(this.teamHuman,"human"),this.teamComp=d((new y).teamComp,this.gameState.level,this.posTeamHuman.length),this.posTeamComp=p(this.teamComp,"comp"),this.gameState.positioned=[...this.posTeamHuman,...this.posTeamComp],this.gamePlay.redrawPositions(this.gameState.positioned)):alert("Congrats! This was the last level"))}onNewGameClick(){this.deselect(),this.gameState.playersTurn=!0,this.gameState.level=1,this.gameState.points=0,this.init()}onSaveGameClick(){this.stateService.save(this.gameState),i.showMessage("Saved")}onLoadGame(){try{const e=this.stateService.load(),t={swordsman:v,bowman:u,magician:C,daemon:g,undead:f,vampire:S};this.deselect(),this.gameState.level=e.level,this.gameState.points=e.points,this.gameState.highestPoints=e.highestPoints,this.gameState.playersTurn=e.playersTurn,this.prepareBoard(),this.gameState.positioned=e.positioned.map((e=>{const{attack:a,attackDistance:s,defence:i,health:r,level:h,moveDistance:n,team:l,type:o}=e.character,m=new t[o](h);return m.attack=a,m.attackDistance=s,m.defence=i,m.health=r,m.moveDistance=n,m.team=l,new c(m,e.position)})),this.posTeamHuman=this.gameState.positioned.filter((e=>"human"===e.character.team)),this.posTeamComp=this.gameState.positioned.filter((e=>"comp"===e.character.team)),i.showMessage("Loaded")}catch(e){return void i.showError("Something went wrong")}this.gamePlay.redrawPositions(this.gameState.positioned)}addListeners(){this.gamePlay.addCellEnterListener(this.onCellEnter.bind(this)),this.gamePlay.addCellLeaveListener(this.onCellLeave.bind(this)),this.gamePlay.addCellClickListener(this.onCellClick.bind(this)),this.gamePlay.addNewGameListener(this.onNewGameClick.bind(this)),this.gamePlay.addSaveGameListener(this.onSaveGameClick.bind(this)),this.gamePlay.addLoadGameListener(this.onLoadGame.bind(this))}removeListeners(){this.gamePlay.cellClickListeners=[],this.gamePlay.cellEnterListeners=[],this.gamePlay.cellLeaveListeners=[],this.gamePlay.newGameListeners=[],this.gamePlay.saveGameListeners=[],this.gamePlay.loadGameListeners=[]}deselect(){this.removeListeners(),this.selectedCharacter=!1,this.indexOfSelectedCharacter=null,this.previouslySelected=null}showStats(){this.gamePlay.setCurrentLevel(this.gameState.level),this.gamePlay.setCurrentScore(this.gameState.points),this.gamePlay.setBestScore(this.gameState.highestPoints)}removeSelected(){this.gamePlay.cells.forEach((e=>e.classList.remove("selected-yellow","selected-green","selected-red")))}findCharacterHere(e){return this.gameState.positioned.find((t=>t.position===e))}findNumberOfStepsToMove(){return this.selectedCharacter.character.moveDistance}findNumberOfStepsToAttack(){return this.selectedCharacter.character.attackDistance}}(L,T);P.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,