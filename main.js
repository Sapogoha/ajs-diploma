(()=>{var t={9662:(t,e,r)=>{var n=r(7854),o=r(614),i=r(6330),a=n.TypeError;t.exports=function(t){if(o(t))return t;throw a(i(t)+" is not a function")}},9483:(t,e,r)=>{var n=r(7854),o=r(4411),i=r(6330),a=n.TypeError;t.exports=function(t){if(o(t))return t;throw a(i(t)+" is not a constructor")}},6077:(t,e,r)=>{var n=r(7854),o=r(614),i=n.String,a=n.TypeError;t.exports=function(t){if("object"==typeof t||o(t))return t;throw a("Can't set "+i(t)+" as a prototype")}},1223:(t,e,r)=>{var n=r(5112),o=r(30),i=r(3070),a=n("unscopables"),c=Array.prototype;null==c[a]&&i.f(c,a,{configurable:!0,value:o(null)}),t.exports=function(t){c[a][t]=!0}},5787:(t,e,r)=>{var n=r(7854),o=r(7976),i=n.TypeError;t.exports=function(t,e){if(o(e,t))return t;throw i("Incorrect invocation")}},9670:(t,e,r)=>{var n=r(7854),o=r(111),i=n.String,a=n.TypeError;t.exports=function(t){if(o(t))return t;throw a(i(t)+" is not an object")}},8533:(t,e,r)=>{"use strict";var n=r(2092).forEach,o=r(9341)("forEach");t.exports=o?[].forEach:function(t){return n(this,t,arguments.length>1?arguments[1]:void 0)}},8457:(t,e,r)=>{"use strict";var n=r(7854),o=r(9974),i=r(6916),a=r(7908),c=r(3411),s=r(7659),u=r(4411),l=r(6244),f=r(6135),h=r(8554),p=r(1246),v=n.Array;t.exports=function(t){var e=a(t),r=u(this),n=arguments.length,y=n>1?arguments[1]:void 0,d=void 0!==y;d&&(y=o(y,n>2?arguments[2]:void 0));var m,g,b,w,S,x,O=p(e),C=0;if(!O||this==v&&s(O))for(m=l(e),g=r?new this(m):v(m);m>C;C++)x=d?y(e[C],C):e[C],f(g,C,x);else for(S=(w=h(e,O)).next,g=r?new this:[];!(b=i(S,w)).done;C++)x=d?c(w,y,[b.value,C],!0):b.value,f(g,C,x);return g.length=C,g}},1318:(t,e,r)=>{var n=r(5656),o=r(1400),i=r(6244),a=function(t){return function(e,r,a){var c,s=n(e),u=i(s),l=o(a,u);if(t&&r!=r){for(;u>l;)if((c=s[l++])!=c)return!0}else for(;u>l;l++)if((t||l in s)&&s[l]===r)return t||l||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},2092:(t,e,r)=>{var n=r(9974),o=r(1702),i=r(8361),a=r(7908),c=r(6244),s=r(5417),u=o([].push),l=function(t){var e=1==t,r=2==t,o=3==t,l=4==t,f=6==t,h=7==t,p=5==t||f;return function(v,y,d,m){for(var g,b,w=a(v),S=i(w),x=n(y,d),O=c(S),C=0,E=m||s,P=e?E(v,O):r||h?E(v,0):void 0;O>C;C++)if((p||C in S)&&(b=x(g=S[C],C,w),t))if(e)P[C]=b;else if(b)switch(t){case 3:return!0;case 5:return g;case 6:return C;case 2:u(P,g)}else switch(t){case 4:return!1;case 7:u(P,g)}return f?-1:o||l?l:P}};t.exports={forEach:l(0),map:l(1),filter:l(2),some:l(3),every:l(4),find:l(5),findIndex:l(6),filterReject:l(7)}},1194:(t,e,r)=>{var n=r(7293),o=r(5112),i=r(7392),a=o("species");t.exports=function(t){return i>=51||!n((function(){var e=[];return(e.constructor={})[a]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},9341:(t,e,r)=>{"use strict";var n=r(7293);t.exports=function(t,e){var r=[][t];return!!r&&n((function(){r.call(null,e||function(){return 1},1)}))}},1589:(t,e,r)=>{var n=r(7854),o=r(1400),i=r(6244),a=r(6135),c=n.Array,s=Math.max;t.exports=function(t,e,r){for(var n=i(t),u=o(e,n),l=o(void 0===r?n:r,n),f=c(s(l-u,0)),h=0;u<l;u++,h++)a(f,h,t[u]);return f.length=h,f}},206:(t,e,r)=>{var n=r(1702);t.exports=n([].slice)},7475:(t,e,r)=>{var n=r(7854),o=r(3157),i=r(4411),a=r(111),c=r(5112)("species"),s=n.Array;t.exports=function(t){var e;return o(t)&&(e=t.constructor,(i(e)&&(e===s||o(e.prototype))||a(e)&&null===(e=e[c]))&&(e=void 0)),void 0===e?s:e}},5417:(t,e,r)=>{var n=r(7475);t.exports=function(t,e){return new(n(t))(0===e?0:e)}},3411:(t,e,r)=>{var n=r(9670),o=r(9212);t.exports=function(t,e,r,i){try{return i?e(n(r)[0],r[1]):e(r)}catch(e){o(t,"throw",e)}}},7072:(t,e,r)=>{var n=r(5112)("iterator"),o=!1;try{var i=0,a={next:function(){return{done:!!i++}},return:function(){o=!0}};a[n]=function(){return this},Array.from(a,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!o)return!1;var r=!1;try{var i={};i[n]=function(){return{next:function(){return{done:r=!0}}}},t(i)}catch(t){}return r}},4326:(t,e,r)=>{var n=r(1702),o=n({}.toString),i=n("".slice);t.exports=function(t){return i(o(t),8,-1)}},648:(t,e,r)=>{var n=r(7854),o=r(1694),i=r(614),a=r(4326),c=r(5112)("toStringTag"),s=n.Object,u="Arguments"==a(function(){return arguments}());t.exports=o?a:function(t){var e,r,n;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=s(t),c))?r:u?a(e):"Object"==(n=a(e))&&i(e.callee)?"Arguments":n}},9920:(t,e,r)=>{var n=r(2597),o=r(3887),i=r(1236),a=r(3070);t.exports=function(t,e,r){for(var c=o(e),s=a.f,u=i.f,l=0;l<c.length;l++){var f=c[l];n(t,f)||r&&n(r,f)||s(t,f,u(e,f))}}},4964:(t,e,r)=>{var n=r(5112)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(r){try{return e[n]=!1,"/./"[t](e)}catch(t){}}return!1}},8544:(t,e,r)=>{var n=r(7293);t.exports=!n((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},4994:(t,e,r)=>{"use strict";var n=r(3383).IteratorPrototype,o=r(30),i=r(9114),a=r(8003),c=r(7497),s=function(){return this};t.exports=function(t,e,r,u){var l=e+" Iterator";return t.prototype=o(n,{next:i(+!u,r)}),a(t,l,!1,!0),c[l]=s,t}},8880:(t,e,r)=>{var n=r(9781),o=r(3070),i=r(9114);t.exports=n?function(t,e,r){return o.f(t,e,i(1,r))}:function(t,e,r){return t[e]=r,t}},9114:t=>{t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},6135:(t,e,r)=>{"use strict";var n=r(4948),o=r(3070),i=r(9114);t.exports=function(t,e,r){var a=n(e);a in t?o.f(t,a,i(0,r)):t[a]=r}},654:(t,e,r)=>{"use strict";var n=r(2109),o=r(6916),i=r(1913),a=r(6530),c=r(614),s=r(4994),u=r(9518),l=r(7674),f=r(8003),h=r(8880),p=r(1320),v=r(5112),y=r(7497),d=r(3383),m=a.PROPER,g=a.CONFIGURABLE,b=d.IteratorPrototype,w=d.BUGGY_SAFARI_ITERATORS,S=v("iterator"),x="keys",O="values",C="entries",E=function(){return this};t.exports=function(t,e,r,a,v,d,P){s(r,e,a);var j,T,k,L=function(t){if(t===v&&I)return I;if(!w&&t in R)return R[t];switch(t){case x:case O:case C:return function(){return new r(this,t)}}return function(){return new r(this)}},_=e+" Iterator",A=!1,R=t.prototype,M=R[S]||R["@@iterator"]||v&&R[v],I=!w&&M||L(v),G="Array"==e&&R.entries||M;if(G&&(j=u(G.call(new t)))!==Object.prototype&&j.next&&(i||u(j)===b||(l?l(j,b):c(j[S])||p(j,S,E)),f(j,_,!0,!0),i&&(y[_]=E)),m&&v==O&&M&&M.name!==O&&(!i&&g?h(R,"name",O):(A=!0,I=function(){return o(M,this)})),v)if(T={values:L(O),keys:d?I:L(x),entries:L(C)},P)for(k in T)(w||A||!(k in R))&&p(R,k,T[k]);else n({target:e,proto:!0,forced:w||A},T);return i&&!P||R[S]===I||p(R,S,I,{name:v}),y[e]=I,T}},7235:(t,e,r)=>{var n=r(857),o=r(2597),i=r(6061),a=r(3070).f;t.exports=function(t){var e=n.Symbol||(n.Symbol={});o(e,t)||a(e,t,{value:i.f(t)})}},9781:(t,e,r)=>{var n=r(7293);t.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},317:(t,e,r)=>{var n=r(7854),o=r(111),i=n.document,a=o(i)&&o(i.createElement);t.exports=function(t){return a?i.createElement(t):{}}},8324:t=>{t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},8509:(t,e,r)=>{var n=r(317)("span").classList,o=n&&n.constructor&&n.constructor.prototype;t.exports=o===Object.prototype?void 0:o},7871:t=>{t.exports="object"==typeof window},1528:(t,e,r)=>{var n=r(8113),o=r(7854);t.exports=/ipad|iphone|ipod/i.test(n)&&void 0!==o.Pebble},6833:(t,e,r)=>{var n=r(8113);t.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(n)},5268:(t,e,r)=>{var n=r(4326),o=r(7854);t.exports="process"==n(o.process)},1036:(t,e,r)=>{var n=r(8113);t.exports=/web0s(?!.*chrome)/i.test(n)},8113:(t,e,r)=>{var n=r(5005);t.exports=n("navigator","userAgent")||""},7392:(t,e,r)=>{var n,o,i=r(7854),a=r(8113),c=i.process,s=i.Deno,u=c&&c.versions||s&&s.version,l=u&&u.v8;l&&(o=(n=l.split("."))[0]>0&&n[0]<4?1:+(n[0]+n[1])),!o&&a&&(!(n=a.match(/Edge\/(\d+)/))||n[1]>=74)&&(n=a.match(/Chrome\/(\d+)/))&&(o=+n[1]),t.exports=o},748:t=>{t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},2109:(t,e,r)=>{var n=r(7854),o=r(1236).f,i=r(8880),a=r(1320),c=r(3505),s=r(9920),u=r(4705);t.exports=function(t,e){var r,l,f,h,p,v=t.target,y=t.global,d=t.stat;if(r=y?n:d?n[v]||c(v,{}):(n[v]||{}).prototype)for(l in e){if(h=e[l],f=t.noTargetGet?(p=o(r,l))&&p.value:r[l],!u(y?l:v+(d?".":"#")+l,t.forced)&&void 0!==f){if(typeof h==typeof f)continue;s(h,f)}(t.sham||f&&f.sham)&&i(h,"sham",!0),a(r,l,h,t)}}},7293:t=>{t.exports=function(t){try{return!!t()}catch(t){return!0}}},2104:(t,e,r)=>{var n=r(4374),o=Function.prototype,i=o.apply,a=o.call;t.exports="object"==typeof Reflect&&Reflect.apply||(n?a.bind(i):function(){return a.apply(i,arguments)})},9974:(t,e,r)=>{var n=r(1702),o=r(9662),i=r(4374),a=n(n.bind);t.exports=function(t,e){return o(t),void 0===e?t:i?a(t,e):function(){return t.apply(e,arguments)}}},4374:(t,e,r)=>{var n=r(7293);t.exports=!n((function(){var t=function(){}.bind();return"function"!=typeof t||t.hasOwnProperty("prototype")}))},7065:(t,e,r)=>{"use strict";var n=r(7854),o=r(1702),i=r(9662),a=r(111),c=r(2597),s=r(206),u=r(4374),l=n.Function,f=o([].concat),h=o([].join),p={},v=function(t,e,r){if(!c(p,e)){for(var n=[],o=0;o<e;o++)n[o]="a["+o+"]";p[e]=l("C,a","return new C("+h(n,",")+")")}return p[e](t,r)};t.exports=u?l.bind:function(t){var e=i(this),r=e.prototype,n=s(arguments,1),o=function(){var r=f(n,s(arguments));return this instanceof o?v(e,r.length,r):e.apply(t,r)};return a(r)&&(o.prototype=r),o}},6916:(t,e,r)=>{var n=r(4374),o=Function.prototype.call;t.exports=n?o.bind(o):function(){return o.apply(o,arguments)}},6530:(t,e,r)=>{var n=r(9781),o=r(2597),i=Function.prototype,a=n&&Object.getOwnPropertyDescriptor,c=o(i,"name"),s=c&&"something"===function(){}.name,u=c&&(!n||n&&a(i,"name").configurable);t.exports={EXISTS:c,PROPER:s,CONFIGURABLE:u}},1702:(t,e,r)=>{var n=r(4374),o=Function.prototype,i=o.bind,a=o.call,c=n&&i.bind(a,a);t.exports=n?function(t){return t&&c(t)}:function(t){return t&&function(){return a.apply(t,arguments)}}},5005:(t,e,r)=>{var n=r(7854),o=r(614),i=function(t){return o(t)?t:void 0};t.exports=function(t,e){return arguments.length<2?i(n[t]):n[t]&&n[t][e]}},1246:(t,e,r)=>{var n=r(648),o=r(8173),i=r(7497),a=r(5112)("iterator");t.exports=function(t){if(null!=t)return o(t,a)||o(t,"@@iterator")||i[n(t)]}},8554:(t,e,r)=>{var n=r(7854),o=r(6916),i=r(9662),a=r(9670),c=r(6330),s=r(1246),u=n.TypeError;t.exports=function(t,e){var r=arguments.length<2?s(t):e;if(i(r))return a(o(r,t));throw u(c(t)+" is not iterable")}},8173:(t,e,r)=>{var n=r(9662);t.exports=function(t,e){var r=t[e];return null==r?void 0:n(r)}},7854:(t,e,r)=>{var n=function(t){return t&&t.Math==Math&&t};t.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof r.g&&r.g)||function(){return this}()||Function("return this")()},2597:(t,e,r)=>{var n=r(1702),o=r(7908),i=n({}.hasOwnProperty);t.exports=Object.hasOwn||function(t,e){return i(o(t),e)}},3501:t=>{t.exports={}},842:(t,e,r)=>{var n=r(7854);t.exports=function(t,e){var r=n.console;r&&r.error&&(1==arguments.length?r.error(t):r.error(t,e))}},490:(t,e,r)=>{var n=r(5005);t.exports=n("document","documentElement")},4664:(t,e,r)=>{var n=r(9781),o=r(7293),i=r(317);t.exports=!n&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},8361:(t,e,r)=>{var n=r(7854),o=r(1702),i=r(7293),a=r(4326),c=n.Object,s=o("".split);t.exports=i((function(){return!c("z").propertyIsEnumerable(0)}))?function(t){return"String"==a(t)?s(t,""):c(t)}:c},2788:(t,e,r)=>{var n=r(1702),o=r(614),i=r(5465),a=n(Function.toString);o(i.inspectSource)||(i.inspectSource=function(t){return a(t)}),t.exports=i.inspectSource},9909:(t,e,r)=>{var n,o,i,a=r(8536),c=r(7854),s=r(1702),u=r(111),l=r(8880),f=r(2597),h=r(5465),p=r(6200),v=r(3501),y="Object already initialized",d=c.TypeError,m=c.WeakMap;if(a||h.state){var g=h.state||(h.state=new m),b=s(g.get),w=s(g.has),S=s(g.set);n=function(t,e){if(w(g,t))throw new d(y);return e.facade=t,S(g,t,e),e},o=function(t){return b(g,t)||{}},i=function(t){return w(g,t)}}else{var x=p("state");v[x]=!0,n=function(t,e){if(f(t,x))throw new d(y);return e.facade=t,l(t,x,e),e},o=function(t){return f(t,x)?t[x]:{}},i=function(t){return f(t,x)}}t.exports={set:n,get:o,has:i,enforce:function(t){return i(t)?o(t):n(t,{})},getterFor:function(t){return function(e){var r;if(!u(e)||(r=o(e)).type!==t)throw d("Incompatible receiver, "+t+" required");return r}}}},7659:(t,e,r)=>{var n=r(5112),o=r(7497),i=n("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||a[i]===t)}},3157:(t,e,r)=>{var n=r(4326);t.exports=Array.isArray||function(t){return"Array"==n(t)}},614:t=>{t.exports=function(t){return"function"==typeof t}},4411:(t,e,r)=>{var n=r(1702),o=r(7293),i=r(614),a=r(648),c=r(5005),s=r(2788),u=function(){},l=[],f=c("Reflect","construct"),h=/^\s*(?:class|function)\b/,p=n(h.exec),v=!h.exec(u),y=function(t){if(!i(t))return!1;try{return f(u,l,t),!0}catch(t){return!1}},d=function(t){if(!i(t))return!1;switch(a(t)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return v||!!p(h,s(t))}catch(t){return!0}};d.sham=!0,t.exports=!f||o((function(){var t;return y(y.call)||!y(Object)||!y((function(){t=!0}))||t}))?d:y},4705:(t,e,r)=>{var n=r(7293),o=r(614),i=/#|\.prototype\./,a=function(t,e){var r=s[c(t)];return r==l||r!=u&&(o(e)?n(e):!!e)},c=a.normalize=function(t){return String(t).replace(i,".").toLowerCase()},s=a.data={},u=a.NATIVE="N",l=a.POLYFILL="P";t.exports=a},111:(t,e,r)=>{var n=r(614);t.exports=function(t){return"object"==typeof t?null!==t:n(t)}},1913:t=>{t.exports=!1},7850:(t,e,r)=>{var n=r(111),o=r(4326),i=r(5112)("match");t.exports=function(t){var e;return n(t)&&(void 0!==(e=t[i])?!!e:"RegExp"==o(t))}},2190:(t,e,r)=>{var n=r(7854),o=r(5005),i=r(614),a=r(7976),c=r(3307),s=n.Object;t.exports=c?function(t){return"symbol"==typeof t}:function(t){var e=o("Symbol");return i(e)&&a(e.prototype,s(t))}},408:(t,e,r)=>{var n=r(7854),o=r(9974),i=r(6916),a=r(9670),c=r(6330),s=r(7659),u=r(6244),l=r(7976),f=r(8554),h=r(1246),p=r(9212),v=n.TypeError,y=function(t,e){this.stopped=t,this.result=e},d=y.prototype;t.exports=function(t,e,r){var n,m,g,b,w,S,x,O=r&&r.that,C=!(!r||!r.AS_ENTRIES),E=!(!r||!r.IS_ITERATOR),P=!(!r||!r.INTERRUPTED),j=o(e,O),T=function(t){return n&&p(n,"normal",t),new y(!0,t)},k=function(t){return C?(a(t),P?j(t[0],t[1],T):j(t[0],t[1])):P?j(t,T):j(t)};if(E)n=t;else{if(!(m=h(t)))throw v(c(t)+" is not iterable");if(s(m)){for(g=0,b=u(t);b>g;g++)if((w=k(t[g]))&&l(d,w))return w;return new y(!1)}n=f(t,m)}for(S=n.next;!(x=i(S,n)).done;){try{w=k(x.value)}catch(t){p(n,"throw",t)}if("object"==typeof w&&w&&l(d,w))return w}return new y(!1)}},9212:(t,e,r)=>{var n=r(6916),o=r(9670),i=r(8173);t.exports=function(t,e,r){var a,c;o(t);try{if(!(a=i(t,"return"))){if("throw"===e)throw r;return r}a=n(a,t)}catch(t){c=!0,a=t}if("throw"===e)throw r;if(c)throw a;return o(a),r}},3383:(t,e,r)=>{"use strict";var n,o,i,a=r(7293),c=r(614),s=r(30),u=r(9518),l=r(1320),f=r(5112),h=r(1913),p=f("iterator"),v=!1;[].keys&&("next"in(i=[].keys())?(o=u(u(i)))!==Object.prototype&&(n=o):v=!0),null==n||a((function(){var t={};return n[p].call(t)!==t}))?n={}:h&&(n=s(n)),c(n[p])||l(n,p,(function(){return this})),t.exports={IteratorPrototype:n,BUGGY_SAFARI_ITERATORS:v}},7497:t=>{t.exports={}},6244:(t,e,r)=>{var n=r(7466);t.exports=function(t){return n(t.length)}},5948:(t,e,r)=>{var n,o,i,a,c,s,u,l,f=r(7854),h=r(9974),p=r(1236).f,v=r(261).set,y=r(6833),d=r(1528),m=r(1036),g=r(5268),b=f.MutationObserver||f.WebKitMutationObserver,w=f.document,S=f.process,x=f.Promise,O=p(f,"queueMicrotask"),C=O&&O.value;C||(n=function(){var t,e;for(g&&(t=S.domain)&&t.exit();o;){e=o.fn,o=o.next;try{e()}catch(t){throw o?a():i=void 0,t}}i=void 0,t&&t.enter()},y||g||m||!b||!w?!d&&x&&x.resolve?((u=x.resolve(void 0)).constructor=x,l=h(u.then,u),a=function(){l(n)}):g?a=function(){S.nextTick(n)}:(v=h(v,f),a=function(){v(n)}):(c=!0,s=w.createTextNode(""),new b(n).observe(s,{characterData:!0}),a=function(){s.data=c=!c})),t.exports=C||function(t){var e={fn:t,next:void 0};i&&(i.next=e),o||(o=e,a()),i=e}},3366:(t,e,r)=>{var n=r(7854);t.exports=n.Promise},133:(t,e,r)=>{var n=r(7392),o=r(7293);t.exports=!!Object.getOwnPropertySymbols&&!o((function(){var t=Symbol();return!String(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&n&&n<41}))},8536:(t,e,r)=>{var n=r(7854),o=r(614),i=r(2788),a=n.WeakMap;t.exports=o(a)&&/native code/.test(i(a))},8523:(t,e,r)=>{"use strict";var n=r(9662),o=function(t){var e,r;this.promise=new t((function(t,n){if(void 0!==e||void 0!==r)throw TypeError("Bad Promise constructor");e=t,r=n})),this.resolve=n(e),this.reject=n(r)};t.exports.f=function(t){return new o(t)}},3929:(t,e,r)=>{var n=r(7854),o=r(7850),i=n.TypeError;t.exports=function(t){if(o(t))throw i("The method doesn't accept regular expressions");return t}},30:(t,e,r)=>{var n,o=r(9670),i=r(6048),a=r(748),c=r(3501),s=r(490),u=r(317),l=r(6200)("IE_PROTO"),f=function(){},h=function(t){return"<script>"+t+"<\/script>"},p=function(t){t.write(h("")),t.close();var e=t.parentWindow.Object;return t=null,e},v=function(){try{n=new ActiveXObject("htmlfile")}catch(t){}var t,e;v="undefined"!=typeof document?document.domain&&n?p(n):((e=u("iframe")).style.display="none",s.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(h("document.F=Object")),t.close(),t.F):p(n);for(var r=a.length;r--;)delete v.prototype[a[r]];return v()};c[l]=!0,t.exports=Object.create||function(t,e){var r;return null!==t?(f.prototype=o(t),r=new f,f.prototype=null,r[l]=t):r=v(),void 0===e?r:i.f(r,e)}},6048:(t,e,r)=>{var n=r(9781),o=r(3353),i=r(3070),a=r(9670),c=r(5656),s=r(1956);e.f=n&&!o?Object.defineProperties:function(t,e){a(t);for(var r,n=c(e),o=s(e),u=o.length,l=0;u>l;)i.f(t,r=o[l++],n[r]);return t}},3070:(t,e,r)=>{var n=r(7854),o=r(9781),i=r(4664),a=r(3353),c=r(9670),s=r(4948),u=n.TypeError,l=Object.defineProperty,f=Object.getOwnPropertyDescriptor;e.f=o?a?function(t,e,r){if(c(t),e=s(e),c(r),"function"==typeof t&&"prototype"===e&&"value"in r&&"writable"in r&&!r.writable){var n=f(t,e);n&&n.writable&&(t[e]=r.value,r={configurable:"configurable"in r?r.configurable:n.configurable,enumerable:"enumerable"in r?r.enumerable:n.enumerable,writable:!1})}return l(t,e,r)}:l:function(t,e,r){if(c(t),e=s(e),c(r),i)try{return l(t,e,r)}catch(t){}if("get"in r||"set"in r)throw u("Accessors not supported");return"value"in r&&(t[e]=r.value),t}},1236:(t,e,r)=>{var n=r(9781),o=r(6916),i=r(5296),a=r(9114),c=r(5656),s=r(4948),u=r(2597),l=r(4664),f=Object.getOwnPropertyDescriptor;e.f=n?f:function(t,e){if(t=c(t),e=s(e),l)try{return f(t,e)}catch(t){}if(u(t,e))return a(!o(i.f,t,e),t[e])}},1156:(t,e,r)=>{var n=r(4326),o=r(5656),i=r(8006).f,a=r(1589),c="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return c&&"Window"==n(t)?function(t){try{return i(t)}catch(t){return a(c)}}(t):i(o(t))}},8006:(t,e,r)=>{var n=r(6324),o=r(748).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,o)}},5181:(t,e)=>{e.f=Object.getOwnPropertySymbols},9518:(t,e,r)=>{var n=r(7854),o=r(2597),i=r(614),a=r(7908),c=r(6200),s=r(8544),u=c("IE_PROTO"),l=n.Object,f=l.prototype;t.exports=s?l.getPrototypeOf:function(t){var e=a(t);if(o(e,u))return e[u];var r=e.constructor;return i(r)&&e instanceof r?r.prototype:e instanceof l?f:null}},7976:(t,e,r)=>{var n=r(1702);t.exports=n({}.isPrototypeOf)},6324:(t,e,r)=>{var n=r(1702),o=r(2597),i=r(5656),a=r(1318).indexOf,c=r(3501),s=n([].push);t.exports=function(t,e){var r,n=i(t),u=0,l=[];for(r in n)!o(c,r)&&o(n,r)&&s(l,r);for(;e.length>u;)o(n,r=e[u++])&&(~a(l,r)||s(l,r));return l}},1956:(t,e,r)=>{var n=r(6324),o=r(748);t.exports=Object.keys||function(t){return n(t,o)}},5296:(t,e)=>{"use strict";var r={}.propertyIsEnumerable,n=Object.getOwnPropertyDescriptor,o=n&&!r.call({1:2},1);e.f=o?function(t){var e=n(this,t);return!!e&&e.enumerable}:r},7674:(t,e,r)=>{var n=r(1702),o=r(9670),i=r(6077);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,r={};try{(t=n(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(r,[]),e=r instanceof Array}catch(t){}return function(r,n){return o(r),i(n),e?t(r,n):r.__proto__=n,r}}():void 0)},4699:(t,e,r)=>{var n=r(9781),o=r(1702),i=r(1956),a=r(5656),c=o(r(5296).f),s=o([].push),u=function(t){return function(e){for(var r,o=a(e),u=i(o),l=u.length,f=0,h=[];l>f;)r=u[f++],n&&!c(o,r)||s(h,t?[r,o[r]]:o[r]);return h}};t.exports={entries:u(!0),values:u(!1)}},288:(t,e,r)=>{"use strict";var n=r(1694),o=r(648);t.exports=n?{}.toString:function(){return"[object "+o(this)+"]"}},2140:(t,e,r)=>{var n=r(7854),o=r(6916),i=r(614),a=r(111),c=n.TypeError;t.exports=function(t,e){var r,n;if("string"===e&&i(r=t.toString)&&!a(n=o(r,t)))return n;if(i(r=t.valueOf)&&!a(n=o(r,t)))return n;if("string"!==e&&i(r=t.toString)&&!a(n=o(r,t)))return n;throw c("Can't convert object to primitive value")}},3887:(t,e,r)=>{var n=r(5005),o=r(1702),i=r(8006),a=r(5181),c=r(9670),s=o([].concat);t.exports=n("Reflect","ownKeys")||function(t){var e=i.f(c(t)),r=a.f;return r?s(e,r(t)):e}},857:(t,e,r)=>{var n=r(7854);t.exports=n},2534:t=>{t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},9478:(t,e,r)=>{var n=r(9670),o=r(111),i=r(8523);t.exports=function(t,e){if(n(t),o(e)&&e.constructor===t)return e;var r=i.f(t);return(0,r.resolve)(e),r.promise}},8572:t=>{var e=function(){this.head=null,this.tail=null};e.prototype={add:function(t){var e={item:t,next:null};this.head?this.tail.next=e:this.head=e,this.tail=e},get:function(){var t=this.head;if(t)return this.head=t.next,this.tail===t&&(this.tail=null),t.item}},t.exports=e},2248:(t,e,r)=>{var n=r(1320);t.exports=function(t,e,r){for(var o in e)n(t,o,e[o],r);return t}},1320:(t,e,r)=>{var n=r(7854),o=r(614),i=r(2597),a=r(8880),c=r(3505),s=r(2788),u=r(9909),l=r(6530).CONFIGURABLE,f=u.get,h=u.enforce,p=String(String).split("String");(t.exports=function(t,e,r,s){var u,f=!!s&&!!s.unsafe,v=!!s&&!!s.enumerable,y=!!s&&!!s.noTargetGet,d=s&&void 0!==s.name?s.name:e;o(r)&&("Symbol("===String(d).slice(0,7)&&(d="["+String(d).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!i(r,"name")||l&&r.name!==d)&&a(r,"name",d),(u=h(r)).source||(u.source=p.join("string"==typeof d?d:""))),t!==n?(f?!y&&t[e]&&(v=!0):delete t[e],v?t[e]=r:a(t,e,r)):v?t[e]=r:c(e,r)})(Function.prototype,"toString",(function(){return o(this)&&f(this).source||s(this)}))},2261:(t,e,r)=>{"use strict";var n,o,i=r(6916),a=r(1702),c=r(1340),s=r(7066),u=r(2999),l=r(2309),f=r(30),h=r(9909).get,p=r(9441),v=r(7168),y=l("native-string-replace",String.prototype.replace),d=RegExp.prototype.exec,m=d,g=a("".charAt),b=a("".indexOf),w=a("".replace),S=a("".slice),x=(o=/b*/g,i(d,n=/a/,"a"),i(d,o,"a"),0!==n.lastIndex||0!==o.lastIndex),O=u.BROKEN_CARET,C=void 0!==/()??/.exec("")[1];(x||C||O||p||v)&&(m=function(t){var e,r,n,o,a,u,l,p=this,v=h(p),E=c(t),P=v.raw;if(P)return P.lastIndex=p.lastIndex,e=i(m,P,E),p.lastIndex=P.lastIndex,e;var j=v.groups,T=O&&p.sticky,k=i(s,p),L=p.source,_=0,A=E;if(T&&(k=w(k,"y",""),-1===b(k,"g")&&(k+="g"),A=S(E,p.lastIndex),p.lastIndex>0&&(!p.multiline||p.multiline&&"\n"!==g(E,p.lastIndex-1))&&(L="(?: "+L+")",A=" "+A,_++),r=new RegExp("^(?:"+L+")",k)),C&&(r=new RegExp("^"+L+"$(?!\\s)",k)),x&&(n=p.lastIndex),o=i(d,T?r:p,A),T?o?(o.input=S(o.input,_),o[0]=S(o[0],_),o.index=p.lastIndex,p.lastIndex+=o[0].length):p.lastIndex=0:x&&o&&(p.lastIndex=p.global?o.index+o[0].length:n),C&&o&&o.length>1&&i(y,o[0],r,(function(){for(a=1;a<arguments.length-2;a++)void 0===arguments[a]&&(o[a]=void 0)})),o&&j)for(o.groups=u=f(null),a=0;a<j.length;a++)u[(l=j[a])[0]]=o[l[1]];return o}),t.exports=m},7066:(t,e,r)=>{"use strict";var n=r(9670);t.exports=function(){var t=n(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},2999:(t,e,r)=>{var n=r(7293),o=r(7854).RegExp,i=n((function(){var t=o("a","y");return t.lastIndex=2,null!=t.exec("abcd")})),a=i||n((function(){return!o("a","y").sticky})),c=i||n((function(){var t=o("^r","gy");return t.lastIndex=2,null!=t.exec("str")}));t.exports={BROKEN_CARET:c,MISSED_STICKY:a,UNSUPPORTED_Y:i}},9441:(t,e,r)=>{var n=r(7293),o=r(7854).RegExp;t.exports=n((function(){var t=o(".","s");return!(t.dotAll&&t.exec("\n")&&"s"===t.flags)}))},7168:(t,e,r)=>{var n=r(7293),o=r(7854).RegExp;t.exports=n((function(){var t=o("(?<a>b)","g");return"b"!==t.exec("b").groups.a||"bc"!=="b".replace(t,"$<a>c")}))},4488:(t,e,r)=>{var n=r(7854).TypeError;t.exports=function(t){if(null==t)throw n("Can't call method on "+t);return t}},3505:(t,e,r)=>{var n=r(7854),o=Object.defineProperty;t.exports=function(t,e){try{o(n,t,{value:e,configurable:!0,writable:!0})}catch(r){n[t]=e}return e}},6340:(t,e,r)=>{"use strict";var n=r(5005),o=r(3070),i=r(5112),a=r(9781),c=i("species");t.exports=function(t){var e=n(t),r=o.f;a&&e&&!e[c]&&r(e,c,{configurable:!0,get:function(){return this}})}},8003:(t,e,r)=>{var n=r(3070).f,o=r(2597),i=r(5112)("toStringTag");t.exports=function(t,e,r){t&&!r&&(t=t.prototype),t&&!o(t,i)&&n(t,i,{configurable:!0,value:e})}},6200:(t,e,r)=>{var n=r(2309),o=r(9711),i=n("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},5465:(t,e,r)=>{var n=r(7854),o=r(3505),i="__core-js_shared__",a=n[i]||o(i,{});t.exports=a},2309:(t,e,r)=>{var n=r(1913),o=r(5465);(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.21.1",mode:n?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.21.1/LICENSE",source:"https://github.com/zloirock/core-js"})},6707:(t,e,r)=>{var n=r(9670),o=r(9483),i=r(5112)("species");t.exports=function(t,e){var r,a=n(t).constructor;return void 0===a||null==(r=n(a)[i])?e:o(r)}},8710:(t,e,r)=>{var n=r(1702),o=r(9303),i=r(1340),a=r(4488),c=n("".charAt),s=n("".charCodeAt),u=n("".slice),l=function(t){return function(e,r){var n,l,f=i(a(e)),h=o(r),p=f.length;return h<0||h>=p?t?"":void 0:(n=s(f,h))<55296||n>56319||h+1===p||(l=s(f,h+1))<56320||l>57343?t?c(f,h):n:t?u(f,h,h+2):l-56320+(n-55296<<10)+65536}};t.exports={codeAt:l(!1),charAt:l(!0)}},261:(t,e,r)=>{var n,o,i,a,c=r(7854),s=r(2104),u=r(9974),l=r(614),f=r(2597),h=r(7293),p=r(490),v=r(206),y=r(317),d=r(8053),m=r(6833),g=r(5268),b=c.setImmediate,w=c.clearImmediate,S=c.process,x=c.Dispatch,O=c.Function,C=c.MessageChannel,E=c.String,P=0,j={};try{n=c.location}catch(t){}var T=function(t){if(f(j,t)){var e=j[t];delete j[t],e()}},k=function(t){return function(){T(t)}},L=function(t){T(t.data)},_=function(t){c.postMessage(E(t),n.protocol+"//"+n.host)};b&&w||(b=function(t){d(arguments.length,1);var e=l(t)?t:O(t),r=v(arguments,1);return j[++P]=function(){s(e,void 0,r)},o(P),P},w=function(t){delete j[t]},g?o=function(t){S.nextTick(k(t))}:x&&x.now?o=function(t){x.now(k(t))}:C&&!m?(a=(i=new C).port2,i.port1.onmessage=L,o=u(a.postMessage,a)):c.addEventListener&&l(c.postMessage)&&!c.importScripts&&n&&"file:"!==n.protocol&&!h(_)?(o=_,c.addEventListener("message",L,!1)):o="onreadystatechange"in y("script")?function(t){p.appendChild(y("script")).onreadystatechange=function(){p.removeChild(this),T(t)}}:function(t){setTimeout(k(t),0)}),t.exports={set:b,clear:w}},1400:(t,e,r)=>{var n=r(9303),o=Math.max,i=Math.min;t.exports=function(t,e){var r=n(t);return r<0?o(r+e,0):i(r,e)}},5656:(t,e,r)=>{var n=r(8361),o=r(4488);t.exports=function(t){return n(o(t))}},9303:t=>{var e=Math.ceil,r=Math.floor;t.exports=function(t){var n=+t;return n!=n||0===n?0:(n>0?r:e)(n)}},7466:(t,e,r)=>{var n=r(9303),o=Math.min;t.exports=function(t){return t>0?o(n(t),9007199254740991):0}},7908:(t,e,r)=>{var n=r(7854),o=r(4488),i=n.Object;t.exports=function(t){return i(o(t))}},7593:(t,e,r)=>{var n=r(7854),o=r(6916),i=r(111),a=r(2190),c=r(8173),s=r(2140),u=r(5112),l=n.TypeError,f=u("toPrimitive");t.exports=function(t,e){if(!i(t)||a(t))return t;var r,n=c(t,f);if(n){if(void 0===e&&(e="default"),r=o(n,t,e),!i(r)||a(r))return r;throw l("Can't convert object to primitive value")}return void 0===e&&(e="number"),s(t,e)}},4948:(t,e,r)=>{var n=r(7593),o=r(2190);t.exports=function(t){var e=n(t,"string");return o(e)?e:e+""}},1694:(t,e,r)=>{var n={};n[r(5112)("toStringTag")]="z",t.exports="[object z]"===String(n)},1340:(t,e,r)=>{var n=r(7854),o=r(648),i=n.String;t.exports=function(t){if("Symbol"===o(t))throw TypeError("Cannot convert a Symbol value to a string");return i(t)}},6330:(t,e,r)=>{var n=r(7854).String;t.exports=function(t){try{return n(t)}catch(t){return"Object"}}},9711:(t,e,r)=>{var n=r(1702),o=0,i=Math.random(),a=n(1..toString);t.exports=function(t){return"Symbol("+(void 0===t?"":t)+")_"+a(++o+i,36)}},3307:(t,e,r)=>{var n=r(133);t.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},3353:(t,e,r)=>{var n=r(9781),o=r(7293);t.exports=n&&o((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},8053:(t,e,r)=>{var n=r(7854).TypeError;t.exports=function(t,e){if(t<e)throw n("Not enough arguments");return t}},6061:(t,e,r)=>{var n=r(5112);e.f=n},5112:(t,e,r)=>{var n=r(7854),o=r(2309),i=r(2597),a=r(9711),c=r(133),s=r(3307),u=o("wks"),l=n.Symbol,f=l&&l.for,h=s?l:l&&l.withoutSetter||a;t.exports=function(t){if(!i(u,t)||!c&&"string"!=typeof u[t]){var e="Symbol."+t;c&&i(l,t)?u[t]=l[t]:u[t]=s&&f?f(e):h(e)}return u[t]}},2222:(t,e,r)=>{"use strict";var n=r(2109),o=r(7854),i=r(7293),a=r(3157),c=r(111),s=r(7908),u=r(6244),l=r(6135),f=r(5417),h=r(1194),p=r(5112),v=r(7392),y=p("isConcatSpreadable"),d=9007199254740991,m="Maximum allowed index exceeded",g=o.TypeError,b=v>=51||!i((function(){var t=[];return t[y]=!1,t.concat()[0]!==t})),w=h("concat"),S=function(t){if(!c(t))return!1;var e=t[y];return void 0!==e?!!e:a(t)};n({target:"Array",proto:!0,forced:!b||!w},{concat:function(t){var e,r,n,o,i,a=s(this),c=f(a,0),h=0;for(e=-1,n=arguments.length;e<n;e++)if(S(i=-1===e?a:arguments[e])){if(h+(o=u(i))>d)throw g(m);for(r=0;r<o;r++,h++)r in i&&l(c,h,i[r])}else{if(h>=d)throw g(m);l(c,h++,i)}return c.length=h,c}})},7327:(t,e,r)=>{"use strict";var n=r(2109),o=r(2092).filter;n({target:"Array",proto:!0,forced:!r(1194)("filter")},{filter:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},9826:(t,e,r)=>{"use strict";var n=r(2109),o=r(2092).find,i=r(1223),a="find",c=!0;a in[]&&Array(1).find((function(){c=!1})),n({target:"Array",proto:!0,forced:c},{find:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),i(a)},1038:(t,e,r)=>{var n=r(2109),o=r(8457);n({target:"Array",stat:!0,forced:!r(7072)((function(t){Array.from(t)}))},{from:o})},6699:(t,e,r)=>{"use strict";var n=r(2109),o=r(1318).includes,i=r(1223);n({target:"Array",proto:!0},{includes:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),i("includes")},6992:(t,e,r)=>{"use strict";var n=r(5656),o=r(1223),i=r(7497),a=r(9909),c=r(3070).f,s=r(654),u=r(1913),l=r(9781),f="Array Iterator",h=a.set,p=a.getterFor(f);t.exports=s(Array,"Array",(function(t,e){h(this,{type:f,target:n(t),index:0,kind:e})}),(function(){var t=p(this),e=t.target,r=t.kind,n=t.index++;return!e||n>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==r?{value:n,done:!1}:"values"==r?{value:e[n],done:!1}:{value:[n,e[n]],done:!1}}),"values");var v=i.Arguments=i.Array;if(o("keys"),o("values"),o("entries"),!u&&l&&"values"!==v.name)try{c(v,"name",{value:"values"})}catch(t){}},1249:(t,e,r)=>{"use strict";var n=r(2109),o=r(2092).map;n({target:"Array",proto:!0,forced:!r(1194)("map")},{map:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},7042:(t,e,r)=>{"use strict";var n=r(2109),o=r(7854),i=r(3157),a=r(4411),c=r(111),s=r(1400),u=r(6244),l=r(5656),f=r(6135),h=r(5112),p=r(1194),v=r(206),y=p("slice"),d=h("species"),m=o.Array,g=Math.max;n({target:"Array",proto:!0,forced:!y},{slice:function(t,e){var r,n,o,h=l(this),p=u(h),y=s(t,p),b=s(void 0===e?p:e,p);if(i(h)&&(r=h.constructor,(a(r)&&(r===m||i(r.prototype))||c(r)&&null===(r=r[d]))&&(r=void 0),r===m||void 0===r))return v(h,y,b);for(n=new(void 0===r?m:r)(g(b-y,0)),o=0;y<b;y++,o++)y in h&&f(n,o,h[y]);return n.length=o,n}})},561:(t,e,r)=>{"use strict";var n=r(2109),o=r(7854),i=r(1400),a=r(9303),c=r(6244),s=r(7908),u=r(5417),l=r(6135),f=r(1194)("splice"),h=o.TypeError,p=Math.max,v=Math.min,y=9007199254740991,d="Maximum allowed length exceeded";n({target:"Array",proto:!0,forced:!f},{splice:function(t,e){var r,n,o,f,m,g,b=s(this),w=c(b),S=i(t,w),x=arguments.length;if(0===x?r=n=0:1===x?(r=0,n=w-S):(r=x-2,n=v(p(a(e),0),w-S)),w+r-n>y)throw h(d);for(o=u(b,n),f=0;f<n;f++)(m=S+f)in b&&l(o,f,b[m]);if(o.length=n,r<n){for(f=S;f<w-n;f++)g=f+r,(m=f+n)in b?b[g]=b[m]:delete b[g];for(f=w;f>w-n+r;f--)delete b[f-1]}else if(r>n)for(f=w-n;f>S;f--)g=f+r-1,(m=f+n-1)in b?b[g]=b[m]:delete b[g];for(f=0;f<r;f++)b[f+S]=arguments[f+2];return b.length=w-n+r,o}})},8309:(t,e,r)=>{var n=r(9781),o=r(6530).EXISTS,i=r(1702),a=r(3070).f,c=Function.prototype,s=i(c.toString),u=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,l=i(u.exec);n&&!o&&a(c,"name",{configurable:!0,get:function(){try{return l(u,s(this))[1]}catch(t){return""}}})},489:(t,e,r)=>{var n=r(2109),o=r(7293),i=r(7908),a=r(9518),c=r(8544);n({target:"Object",stat:!0,forced:o((function(){a(1)})),sham:!c},{getPrototypeOf:function(t){return a(i(t))}})},1539:(t,e,r)=>{var n=r(1694),o=r(1320),i=r(288);n||o(Object.prototype,"toString",i,{unsafe:!0})},2479:(t,e,r)=>{var n=r(2109),o=r(4699).values;n({target:"Object",stat:!0},{values:function(t){return o(t)}})},8674:(t,e,r)=>{"use strict";var n,o,i,a,c=r(2109),s=r(1913),u=r(7854),l=r(5005),f=r(6916),h=r(3366),p=r(1320),v=r(2248),y=r(7674),d=r(8003),m=r(6340),g=r(9662),b=r(614),w=r(111),S=r(5787),x=r(2788),O=r(408),C=r(7072),E=r(6707),P=r(261).set,j=r(5948),T=r(9478),k=r(842),L=r(8523),_=r(2534),A=r(8572),R=r(9909),M=r(4705),I=r(5112),G=r(7871),D=r(5268),N=r(7392),H=I("species"),F="Promise",B=R.getterFor(F),U=R.set,W=R.getterFor(F),q=h&&h.prototype,z=h,V=q,Y=u.TypeError,$=u.document,K=u.process,J=L.f,X=J,Q=!!($&&$.createEvent&&u.dispatchEvent),Z=b(u.PromiseRejectionEvent),tt="unhandledrejection",et=!1,rt=M(F,(function(){var t=x(z),e=t!==String(z);if(!e&&66===N)return!0;if(s&&!V.finally)return!0;if(N>=51&&/native code/.test(t))return!1;var r=new z((function(t){t(1)})),n=function(t){t((function(){}),(function(){}))};return(r.constructor={})[H]=n,!(et=r.then((function(){}))instanceof n)||!e&&G&&!Z})),nt=rt||!C((function(t){z.all(t).catch((function(){}))})),ot=function(t){var e;return!(!w(t)||!b(e=t.then))&&e},it=function(t,e){var r,n,o,i=e.value,a=1==e.state,c=a?t.ok:t.fail,s=t.resolve,u=t.reject,l=t.domain;try{c?(a||(2===e.rejection&&lt(e),e.rejection=1),!0===c?r=i:(l&&l.enter(),r=c(i),l&&(l.exit(),o=!0)),r===t.promise?u(Y("Promise-chain cycle")):(n=ot(r))?f(n,r,s,u):s(r)):u(i)}catch(t){l&&!o&&l.exit(),u(t)}},at=function(t,e){t.notified||(t.notified=!0,j((function(){for(var r,n=t.reactions;r=n.get();)it(r,t);t.notified=!1,e&&!t.rejection&&st(t)})))},ct=function(t,e,r){var n,o;Q?((n=$.createEvent("Event")).promise=e,n.reason=r,n.initEvent(t,!1,!0),u.dispatchEvent(n)):n={promise:e,reason:r},!Z&&(o=u["on"+t])?o(n):t===tt&&k("Unhandled promise rejection",r)},st=function(t){f(P,u,(function(){var e,r=t.facade,n=t.value;if(ut(t)&&(e=_((function(){D?K.emit("unhandledRejection",n,r):ct(tt,r,n)})),t.rejection=D||ut(t)?2:1,e.error))throw e.value}))},ut=function(t){return 1!==t.rejection&&!t.parent},lt=function(t){f(P,u,(function(){var e=t.facade;D?K.emit("rejectionHandled",e):ct("rejectionhandled",e,t.value)}))},ft=function(t,e,r){return function(n){t(e,n,r)}},ht=function(t,e,r){t.done||(t.done=!0,r&&(t=r),t.value=e,t.state=2,at(t,!0))},pt=function(t,e,r){if(!t.done){t.done=!0,r&&(t=r);try{if(t.facade===e)throw Y("Promise can't be resolved itself");var n=ot(e);n?j((function(){var r={done:!1};try{f(n,e,ft(pt,r,t),ft(ht,r,t))}catch(e){ht(r,e,t)}})):(t.value=e,t.state=1,at(t,!1))}catch(e){ht({done:!1},e,t)}}};if(rt&&(V=(z=function(t){S(this,V),g(t),f(n,this);var e=B(this);try{t(ft(pt,e),ft(ht,e))}catch(t){ht(e,t)}}).prototype,(n=function(t){U(this,{type:F,done:!1,notified:!1,parent:!1,reactions:new A,rejection:!1,state:0,value:void 0})}).prototype=v(V,{then:function(t,e){var r=W(this),n=J(E(this,z));return r.parent=!0,n.ok=!b(t)||t,n.fail=b(e)&&e,n.domain=D?K.domain:void 0,0==r.state?r.reactions.add(n):j((function(){it(n,r)})),n.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new n,e=B(t);this.promise=t,this.resolve=ft(pt,e),this.reject=ft(ht,e)},L.f=J=function(t){return t===z||t===i?new o(t):X(t)},!s&&b(h)&&q!==Object.prototype)){a=q.then,et||(p(q,"then",(function(t,e){var r=this;return new z((function(t,e){f(a,r,t,e)})).then(t,e)}),{unsafe:!0}),p(q,"catch",V.catch,{unsafe:!0}));try{delete q.constructor}catch(t){}y&&y(q,V)}c({global:!0,wrap:!0,forced:rt},{Promise:z}),d(z,F,!1,!0),m(F),i=l(F),c({target:F,stat:!0,forced:rt},{reject:function(t){var e=J(this);return f(e.reject,void 0,t),e.promise}}),c({target:F,stat:!0,forced:s||rt},{resolve:function(t){return T(s&&this===i?z:this,t)}}),c({target:F,stat:!0,forced:nt},{all:function(t){var e=this,r=J(e),n=r.resolve,o=r.reject,i=_((function(){var r=g(e.resolve),i=[],a=0,c=1;O(t,(function(t){var s=a++,u=!1;c++,f(r,e,t).then((function(t){u||(u=!0,i[s]=t,--c||n(i))}),o)})),--c||n(i)}));return i.error&&o(i.value),r.promise},race:function(t){var e=this,r=J(e),n=r.reject,o=_((function(){var o=g(e.resolve);O(t,(function(t){f(o,e,t).then(r.resolve,n)}))}));return o.error&&n(o.value),r.promise}})},2419:(t,e,r)=>{var n=r(2109),o=r(5005),i=r(2104),a=r(7065),c=r(9483),s=r(9670),u=r(111),l=r(30),f=r(7293),h=o("Reflect","construct"),p=Object.prototype,v=[].push,y=f((function(){function t(){}return!(h((function(){}),[],t)instanceof t)})),d=!f((function(){h((function(){}))})),m=y||d;n({target:"Reflect",stat:!0,forced:m,sham:m},{construct:function(t,e){c(t),s(e);var r=arguments.length<3?t:c(arguments[2]);if(d&&!y)return h(t,e,r);if(t==r){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var n=[null];return i(v,n,e),new(i(a,t,n))}var o=r.prototype,f=l(u(o)?o:p),m=i(t,f,e);return u(m)?m:f}})},4916:(t,e,r)=>{"use strict";var n=r(2109),o=r(2261);n({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},2023:(t,e,r)=>{"use strict";var n=r(2109),o=r(1702),i=r(3929),a=r(4488),c=r(1340),s=r(4964),u=o("".indexOf);n({target:"String",proto:!0,forced:!s("includes")},{includes:function(t){return!!~u(c(a(this)),c(i(t)),arguments.length>1?arguments[1]:void 0)}})},8783:(t,e,r)=>{"use strict";var n=r(8710).charAt,o=r(1340),i=r(9909),a=r(654),c="String Iterator",s=i.set,u=i.getterFor(c);a(String,"String",(function(t){s(this,{type:c,string:o(t),index:0})}),(function(){var t,e=u(this),r=e.string,o=e.index;return o>=r.length?{value:void 0,done:!0}:(t=n(r,o),e.index+=t.length,{value:t,done:!1})}))},6755:(t,e,r)=>{"use strict";var n,o=r(2109),i=r(1702),a=r(1236).f,c=r(7466),s=r(1340),u=r(3929),l=r(4488),f=r(4964),h=r(1913),p=i("".startsWith),v=i("".slice),y=Math.min,d=f("startsWith");o({target:"String",proto:!0,forced:!(!h&&!d&&(n=a(String.prototype,"startsWith"),n&&!n.writable)||d)},{startsWith:function(t){var e=s(l(this));u(t);var r=c(y(arguments.length>1?arguments[1]:void 0,e.length)),n=s(t);return p?p(e,n,r):v(e,r,r+n.length)===n}})},1817:(t,e,r)=>{"use strict";var n=r(2109),o=r(9781),i=r(7854),a=r(1702),c=r(2597),s=r(614),u=r(7976),l=r(1340),f=r(3070).f,h=r(9920),p=i.Symbol,v=p&&p.prototype;if(o&&s(p)&&(!("description"in v)||void 0!==p().description)){var y={},d=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:l(arguments[0]),e=u(v,this)?new p(t):void 0===t?p():p(t);return""===t&&(y[e]=!0),e};h(d,p),d.prototype=v,v.constructor=d;var m="Symbol(test)"==String(p("test")),g=a(v.toString),b=a(v.valueOf),w=/^Symbol\((.*)\)[^)]+$/,S=a("".replace),x=a("".slice);f(v,"description",{configurable:!0,get:function(){var t=b(this),e=g(t);if(c(y,t))return"";var r=m?x(e,7,-1):S(e,w,"$1");return""===r?void 0:r}}),n({global:!0,forced:!0},{Symbol:d})}},2165:(t,e,r)=>{r(7235)("iterator")},2526:(t,e,r)=>{"use strict";var n=r(2109),o=r(7854),i=r(5005),a=r(2104),c=r(6916),s=r(1702),u=r(1913),l=r(9781),f=r(133),h=r(7293),p=r(2597),v=r(3157),y=r(614),d=r(111),m=r(7976),g=r(2190),b=r(9670),w=r(7908),S=r(5656),x=r(4948),O=r(1340),C=r(9114),E=r(30),P=r(1956),j=r(8006),T=r(1156),k=r(5181),L=r(1236),_=r(3070),A=r(6048),R=r(5296),M=r(206),I=r(1320),G=r(2309),D=r(6200),N=r(3501),H=r(9711),F=r(5112),B=r(6061),U=r(7235),W=r(8003),q=r(9909),z=r(2092).forEach,V=D("hidden"),Y="Symbol",$=F("toPrimitive"),K=q.set,J=q.getterFor(Y),X=Object.prototype,Q=o.Symbol,Z=Q&&Q.prototype,tt=o.TypeError,et=o.QObject,rt=i("JSON","stringify"),nt=L.f,ot=_.f,it=T.f,at=R.f,ct=s([].push),st=G("symbols"),ut=G("op-symbols"),lt=G("string-to-symbol-registry"),ft=G("symbol-to-string-registry"),ht=G("wks"),pt=!et||!et.prototype||!et.prototype.findChild,vt=l&&h((function(){return 7!=E(ot({},"a",{get:function(){return ot(this,"a",{value:7}).a}})).a}))?function(t,e,r){var n=nt(X,e);n&&delete X[e],ot(t,e,r),n&&t!==X&&ot(X,e,n)}:ot,yt=function(t,e){var r=st[t]=E(Z);return K(r,{type:Y,tag:t,description:e}),l||(r.description=e),r},dt=function(t,e,r){t===X&&dt(ut,e,r),b(t);var n=x(e);return b(r),p(st,n)?(r.enumerable?(p(t,V)&&t[V][n]&&(t[V][n]=!1),r=E(r,{enumerable:C(0,!1)})):(p(t,V)||ot(t,V,C(1,{})),t[V][n]=!0),vt(t,n,r)):ot(t,n,r)},mt=function(t,e){b(t);var r=S(e),n=P(r).concat(St(r));return z(n,(function(e){l&&!c(gt,r,e)||dt(t,e,r[e])})),t},gt=function(t){var e=x(t),r=c(at,this,e);return!(this===X&&p(st,e)&&!p(ut,e))&&(!(r||!p(this,e)||!p(st,e)||p(this,V)&&this[V][e])||r)},bt=function(t,e){var r=S(t),n=x(e);if(r!==X||!p(st,n)||p(ut,n)){var o=nt(r,n);return!o||!p(st,n)||p(r,V)&&r[V][n]||(o.enumerable=!0),o}},wt=function(t){var e=it(S(t)),r=[];return z(e,(function(t){p(st,t)||p(N,t)||ct(r,t)})),r},St=function(t){var e=t===X,r=it(e?ut:S(t)),n=[];return z(r,(function(t){!p(st,t)||e&&!p(X,t)||ct(n,st[t])})),n};if(f||(I(Z=(Q=function(){if(m(Z,this))throw tt("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?O(arguments[0]):void 0,e=H(t),r=function(t){this===X&&c(r,ut,t),p(this,V)&&p(this[V],e)&&(this[V][e]=!1),vt(this,e,C(1,t))};return l&&pt&&vt(X,e,{configurable:!0,set:r}),yt(e,t)}).prototype,"toString",(function(){return J(this).tag})),I(Q,"withoutSetter",(function(t){return yt(H(t),t)})),R.f=gt,_.f=dt,A.f=mt,L.f=bt,j.f=T.f=wt,k.f=St,B.f=function(t){return yt(F(t),t)},l&&(ot(Z,"description",{configurable:!0,get:function(){return J(this).description}}),u||I(X,"propertyIsEnumerable",gt,{unsafe:!0}))),n({global:!0,wrap:!0,forced:!f,sham:!f},{Symbol:Q}),z(P(ht),(function(t){U(t)})),n({target:Y,stat:!0,forced:!f},{for:function(t){var e=O(t);if(p(lt,e))return lt[e];var r=Q(e);return lt[e]=r,ft[r]=e,r},keyFor:function(t){if(!g(t))throw tt(t+" is not a symbol");if(p(ft,t))return ft[t]},useSetter:function(){pt=!0},useSimple:function(){pt=!1}}),n({target:"Object",stat:!0,forced:!f,sham:!l},{create:function(t,e){return void 0===e?E(t):mt(E(t),e)},defineProperty:dt,defineProperties:mt,getOwnPropertyDescriptor:bt}),n({target:"Object",stat:!0,forced:!f},{getOwnPropertyNames:wt,getOwnPropertySymbols:St}),n({target:"Object",stat:!0,forced:h((function(){k.f(1)}))},{getOwnPropertySymbols:function(t){return k.f(w(t))}}),rt&&n({target:"JSON",stat:!0,forced:!f||h((function(){var t=Q();return"[null]"!=rt([t])||"{}"!=rt({a:t})||"{}"!=rt(Object(t))}))},{stringify:function(t,e,r){var n=M(arguments),o=e;if((d(e)||void 0!==t)&&!g(t))return v(e)||(e=function(t,e){if(y(o)&&(e=c(o,this,t,e)),!g(e))return e}),n[1]=e,a(rt,null,n)}}),!Z[$]){var xt=Z.valueOf;I(Z,$,(function(t){return c(xt,this)}))}W(Q,Y),N[V]=!0},4747:(t,e,r)=>{var n=r(7854),o=r(8324),i=r(8509),a=r(8533),c=r(8880),s=function(t){if(t&&t.forEach!==a)try{c(t,"forEach",a)}catch(e){t.forEach=a}};for(var u in o)o[u]&&s(n[u]&&n[u].prototype);s(i)},3948:(t,e,r)=>{var n=r(7854),o=r(8324),i=r(8509),a=r(6992),c=r(8880),s=r(5112),u=s("iterator"),l=s("toStringTag"),f=a.values,h=function(t,e){if(t){if(t[u]!==f)try{c(t,u,f)}catch(e){t[u]=f}if(t[l]||c(t,l,e),o[e])for(var r in a)if(t[r]!==a[r])try{c(t,r,a[r])}catch(e){t[r]=a[r]}}};for(var p in o)h(n[p]&&n[p].prototype,p);h(i,"DOMTokenList")},5666:t=>{var e=function(t){"use strict";var e,r=Object.prototype,n=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{s({},"")}catch(t){s=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var o=e&&e.prototype instanceof d?e:d,i=Object.create(o.prototype),a=new T(n||[]);return i._invoke=function(t,e,r){var n=f;return function(o,i){if(n===p)throw new Error("Generator is already running");if(n===v){if("throw"===o)throw i;return L()}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var c=E(a,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===f)throw n=v,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var s=l(t,e,r);if("normal"===s.type){if(n=r.done?v:h,s.arg===y)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(n=v,r.method="throw",r.arg=s.arg)}}}(t,r,a),i}function l(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var f="suspendedStart",h="suspendedYield",p="executing",v="completed",y={};function d(){}function m(){}function g(){}var b={};s(b,i,(function(){return this}));var w=Object.getPrototypeOf,S=w&&w(w(k([])));S&&S!==r&&n.call(S,i)&&(b=S);var x=g.prototype=d.prototype=Object.create(b);function O(t){["next","throw","return"].forEach((function(e){s(t,e,(function(t){return this._invoke(e,t)}))}))}function C(t,e){function r(o,i,a,c){var s=l(t[o],t,i);if("throw"!==s.type){var u=s.arg,f=u.value;return f&&"object"==typeof f&&n.call(f,"__await")?e.resolve(f.__await).then((function(t){r("next",t,a,c)}),(function(t){r("throw",t,a,c)})):e.resolve(f).then((function(t){u.value=t,a(u)}),(function(t){return r("throw",t,a,c)}))}c(s.arg)}var o;this._invoke=function(t,n){function i(){return new e((function(e,o){r(t,n,e,o)}))}return o=o?o.then(i,i):i()}}function E(t,r){var n=t.iterator[r.method];if(n===e){if(r.delegate=null,"throw"===r.method){if(t.iterator.return&&(r.method="return",r.arg=e,E(t,r),"throw"===r.method))return y;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return y}var o=l(n,t.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,y;var i=o.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,y):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function P(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function j(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function T(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(P,this),this.reset(!0)}function k(t){if(t){var r=t[i];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return a.next=a}}return{next:L}}function L(){return{value:e,done:!0}}return m.prototype=g,s(x,"constructor",g),s(g,"constructor",m),m.displayName=s(g,c,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===m||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,g):(t.__proto__=g,s(t,c,"GeneratorFunction")),t.prototype=Object.create(x),t},t.awrap=function(t){return{__await:t}},O(C.prototype),s(C.prototype,a,(function(){return this})),t.AsyncIterator=C,t.async=function(e,r,n,o,i){void 0===i&&(i=Promise);var a=new C(u(e,r,n,o),i);return t.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},O(x),s(x,c,"Generator"),s(x,i,(function(){return this})),s(x,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=k,T.prototype={constructor:T,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return c.type="throw",c.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],c=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var s=n.call(a,"catchLoc"),u=n.call(a,"finallyLoc");if(s&&u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(s){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,y):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),j(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;j(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:k(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),y}},t}(t.exports);try{regeneratorRuntime=e}catch(t){"object"==typeof globalThis?globalThis.regeneratorRuntime=e:Function("r","regeneratorRuntime = r")(e)}}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var i=e[n]={exports:{}};return t[n](i,i.exports,r),i.exports}r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{"use strict";function t(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:8,n=[];function o(t){return Math.ceil((t+1)/r)}for(var i=1;i<=e;i++){var a=t-r*i,c=t+r*i,s=t-1*i,u=t+1*i,l=t-(r-1)*i,f=t-(r+1)*i,h=t+(r+1)*i,p=t+(r-1)*i,v=o(t);a>=0&&n.push(a),c<=Math.pow(r,2)-1&&n.push(c),v===o(s)&&n.push(s),v===o(u)&&n.push(u),l>0&&v-i===o(l)&&n.push(l),f>=0&&v-i===o(f)&&n.push(f),h<=Math.pow(r,2)-1&&v+i===o(h)&&n.push(h),p<Math.pow(r,2)-1&&v+i===o(p)&&n.push(p)}return n}function e(e,r,n){return t(e,n).includes(r)}function n(t){return new Promise((function(e){setTimeout((function(){e(!0)}),t)}))}r(1038),r(8783),r(1539),r(4747),r(7327),r(6755),r(8674),r(7042),r(8309),r(4916),r(2526),r(1817),r(2165),r(6992),r(3948),r(6699),r(2023);const o="green",i="red",a="yellow";function c(t){return function(t){if(Array.isArray(t))return l(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||u(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=u(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,o=function(){};return{s:o,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return a=t.done,t},e:function(t){c=!0,i=t},f:function(){try{a||null==r.return||r.return()}finally{if(c)throw i}}}}function u(t,e){if(t){if("string"==typeof t)return l(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?l(t,e):void 0}}function l(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function f(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var h=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.boardSize=8,this.container=null,this.boardEl=null,this.cells=[],this.cellClickListeners=[],this.cellEnterListeners=[],this.cellLeaveListeners=[],this.newGameListeners=[],this.saveGameListeners=[],this.loadGameListeners=[]}var e,r,n;return e=t,r=[{key:"bindToDOM",value:function(t){if(!(t instanceof HTMLElement))throw new Error("container is not HTMLElement");this.container=t}},{key:"drawUi",value:function(t){var e,r,n,o=this;this.checkBinding(),this.container.innerHTML='\n      <div class="controls">\n        <button data-id="action-restart" class="btn">New Game</button>\n        <button data-id="action-save" class="btn">Save Game</button>\n        <button data-id="action-load" class="btn">Load Game</button>\n      </div>\n      <div class="game-info">\n        <span data-id="current-level">Current level: 1</span>\n        <span data-id="current-score">Current Score: 0</span>\n        <span data-id="best-score">Best Score: 0</span>\n      </div>\n      <div class="board-container">\n        <div data-id="board" class="board"></div>\n      </div>\n    ',this.newGameEl=this.container.querySelector("[data-id=action-restart]"),this.saveGameEl=this.container.querySelector("[data-id=action-save]"),this.loadGameEl=this.container.querySelector("[data-id=action-load]"),this.currentLevel=this.container.querySelector("[data-id=current-level]"),this.currentScore=this.container.querySelector("[data-id=current-score]"),this.bestScore=this.container.querySelector("[data-id=best-score]"),this.newGameEl.addEventListener("click",(function(t){return o.onNewGameClick(t)})),this.saveGameEl.addEventListener("click",(function(t){return o.onSaveGameClick(t)})),this.loadGameEl.addEventListener("click",(function(t){return o.onLoadGameClick(t)})),this.boardEl=this.container.querySelector("[data-id=board]"),this.boardEl.classList.add(t);for(var i=0;i<Math.pow(this.boardSize,2);i+=1){var a=document.createElement("div");a.classList.add("cell","map-tile","map-tile-".concat((e=i,void 0,n=(r=this.boardSize)*r,0===e?"top-left":e===r-1?"top-right":e===n-r?"bottom-left":e===n-1?"bottom-right":e>0&&e<r-1?"top":e<n-1&&e>n-r?"bottom":e%r==0?"left":e%r==r-1?"right":"center"))),a.addEventListener("mouseenter",(function(t){return o.onCellEnter(t)})),a.addEventListener("mouseleave",(function(t){return o.onCellLeave(t)})),a.addEventListener("click",(function(t){return o.onCellClick(t)})),this.boardEl.appendChild(a)}this.cells=Array.from(this.boardEl.children)}},{key:"redrawPositions",value:function(t){var e,r=s(this.cells);try{for(r.s();!(e=r.n()).done;)e.value.innerHTML=""}catch(t){r.e(t)}finally{r.f()}var n,o,i=s(t);try{for(i.s();!(n=i.n()).done;){var a=n.value,c=this.boardEl.children[a.position],u=document.createElement("div");u.classList.add("character",a.character.type);var l=document.createElement("div");l.classList.add("health-level");var f=document.createElement("div");f.classList.add("health-level-indicator","health-level-indicator-".concat((o=a.character.health)<15?"critical":o<50?"normal":"high")),f.style.width="".concat(a.character.health,"%"),l.appendChild(f),u.appendChild(l),c.appendChild(u)}}catch(t){i.e(t)}finally{i.f()}}},{key:"addCellEnterListener",value:function(t){this.cellEnterListeners.push(t)}},{key:"addCellLeaveListener",value:function(t){this.cellLeaveListeners.push(t)}},{key:"addCellClickListener",value:function(t){this.cellClickListeners.push(t)}},{key:"addNewGameListener",value:function(t){this.newGameListeners.push(t)}},{key:"addSaveGameListener",value:function(t){this.saveGameListeners.push(t)}},{key:"addLoadGameListener",value:function(t){this.loadGameListeners.push(t)}},{key:"onCellEnter",value:function(t){t.preventDefault();var e=this.cells.indexOf(t.currentTarget);this.cellEnterListeners.forEach((function(t){return t.call(null,e)}))}},{key:"onCellLeave",value:function(t){t.preventDefault();var e=this.cells.indexOf(t.currentTarget);this.cellLeaveListeners.forEach((function(t){return t.call(null,e)}))}},{key:"onCellClick",value:function(t){var e=this.cells.indexOf(t.currentTarget);this.cellClickListeners.forEach((function(t){return t.call(null,e)}))}},{key:"onNewGameClick",value:function(t){t.preventDefault(),this.newGameListeners.forEach((function(t){return t.call(null)}))}},{key:"onSaveGameClick",value:function(t){t.preventDefault(),this.saveGameListeners.forEach((function(t){return t.call(null)}))}},{key:"onLoadGameClick",value:function(t){t.preventDefault(),this.loadGameListeners.forEach((function(t){return t.call(null)}))}},{key:"selectCell",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:a;this.deselectCell(t),this.cells[t].classList.add("selected","selected-".concat(e))}},{key:"deselectCell",value:function(t){var e,r,n=this.cells[t];(e=n.classList).remove.apply(e,c(Array.from(n.classList).filter((function(t){return t.startsWith("selected")})))),(r=n.classList).remove.apply(r,c(Array.from(n.classList).filter((function(t){return t.startsWith("selected")}))))}},{key:"showCellTooltip",value:function(t,e){this.cells[e].title=t}},{key:"hideCellTooltip",value:function(t){this.cells[t].title=""}},{key:"showDamage",value:function(t,e){var r=this;return new Promise((function(n){var o=r.cells[t],i=document.createElement("span");i.textContent=e,i.classList.add("damage"),o.appendChild(i),i.addEventListener("animationend",(function(){o.removeChild(i),n()}))}))}},{key:"setCursor",value:function(t){this.boardEl.style.cursor=t}},{key:"checkBinding",value:function(){if(null===this.container)throw new Error("GamePlay not bind to DOM")}},{key:"setCurrentLevel",value:function(t){this.currentLevel.textContent="Current Level: ".concat(t)}},{key:"setCurrentScore",value:function(t){this.currentScore.textContent="Current Score: ".concat(t)}},{key:"setBestScore",value:function(t){this.bestScore.textContent="Best Score: ".concat(t)}}],n=[{key:"showError",value:function(t){alert(t)}},{key:"showMessage",value:function(t){alert(t)}}],r&&f(e.prototype,r),n&&f(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();r(5666),r(2479),r(2222),r(561),r(1249),r(9826);const p={prairie:"prairie",desert:"desert",arctic:"arctic",mountain:"mountain"},v="human",y="computer",d="auto",m="pointer",g="crosshair",b="not-allowed",w="It is not your character. Choose yours",S="There is no character here. Choose any cell with a character",x="It is too far to attack this character",O="It is not allowed to move there",C="It is not your turn yet",E="You lost. Better luck next time",P="Something went wrong",j="You cannot level up a dead character",T="character must be instance of Character or its children",k="position must be a number",L="Invalid state",_="Congrats! This was the last level",A="Saved",R="Loaded";function M(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function I(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var G=function(){function t(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"generic";if(M(this,t),this.level=e,this.attack=0,this.defence=0,this.health=50,this.type=r,"Character"===(this instanceof t?this.constructor:void 0).name)throw new Error("It's not allowed to create new instances of Characters using 'new Character'. Please use classes that extend class Character instead (Bowman, Daemon, etc.)")}var e,r;return e=t,(r=[{key:"levelUp",value:function(){if(!(this.health>0))throw new Error(j);this.level+=1,this.attack=Math.max(this.attack,Math.round(this.attack*(.8+this.health/100))),this.defence=Math.max(this.defence,Math.round(this.defence*(.8+this.health/100))),this.health<20?this.health+=80:this.health=100}}])&&I(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function D(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function N(t,e,r){return e&&D(t.prototype,e),r&&D(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}var H=N((function t(e,r){if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),!(e instanceof G))throw new Error(T);if("number"!=typeof r)throw new Error(k);this.character=e,this.position=r}));function F(t){return function(t){if(Array.isArray(t))return B(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return B(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?B(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function B(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var U=regeneratorRuntime.mark(W);function W(t,e){var r,n;return regeneratorRuntime.wrap((function(o){for(;;)switch(o.prev=o.next){case 0:return r=Math.floor(Math.random()*t.length),n=Math.floor(1+Math.random()*e),o.next=4,new t[r](n);case 4:case"end":return o.stop()}}),U)}function q(t,e,r){for(var n=[],o=0;o<r;o++)n.push(W(t,e).next().value);return n}function z(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:8,n=F(Array(Math.pow(r,2)).keys()),o=null;e===v?o=n.filter((function(t){return t%r==0||t%r==1})):e===y&&(o=n.filter((function(t){return t%r==6||t%r==7})));for(var i=[],a=0;a<t.length;a++){var c=Math.floor(Math.random()*o.length),s=o[c];o.splice(c,1),i.push(new H(t[a],s))}return i}function V(t){return V="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},V(t)}function Y(t,e){return Y=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},Y(t,e)}function $(t,e){if(e&&("object"===V(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function K(t){return K=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},K(t)}r(489),r(2419);var J=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Y(t,e)}(i,t);var e,r,n,o=(r=i,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=K(r);if(n){var o=K(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return $(this,t)});function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(e=o.call(this,t,(this instanceof i?this.constructor:void 0).name)).attack=25,e.defence=25,e.attackDistance=2,e.moveDistance=2,e.team=v,e}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(G);function X(t){return X="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},X(t)}function Q(t,e){return Q=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},Q(t,e)}function Z(t,e){if(e&&("object"===X(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function tt(t){return tt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},tt(t)}var et=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Q(t,e)}(i,t);var e,r,n,o=(r=i,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=tt(r);if(n){var o=tt(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return Z(this,t)});function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(e=o.call(this,t,(this instanceof i?this.constructor:void 0).name)).attack=10,e.defence=40,e.attackDistance=4,e.moveDistance=1,e.team=y,e}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(G);function rt(t){return rt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},rt(t)}function nt(t,e){return nt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},nt(t,e)}function ot(t,e){if(e&&("object"===rt(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function it(t){return it=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},it(t)}var at=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&nt(t,e)}(i,t);var e,r,n,o=(r=i,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=it(r);if(n){var o=it(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return ot(this,t)});function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(e=o.call(this,t,(this instanceof i?this.constructor:void 0).name)).attack=10,e.defence=40,e.attackDistance=4,e.moveDistance=1,e.team=v,e}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(G);function ct(t){return ct="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ct(t)}function st(t,e){return st=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},st(t,e)}function ut(t,e){if(e&&("object"===ct(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function lt(t){return lt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},lt(t)}var ft=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&st(t,e)}(i,t);var e,r,n,o=(r=i,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=lt(r);if(n){var o=lt(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return ut(this,t)});function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(e=o.call(this,t,(this instanceof i?this.constructor:void 0).name)).attack=40,e.defence=10,e.attackDistance=1,e.moveDistance=4,e.team=v,e}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(G);function ht(t){return ht="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ht(t)}function pt(t,e){return pt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},pt(t,e)}function vt(t,e){if(e&&("object"===ht(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function yt(t){return yt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},yt(t)}var dt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&pt(t,e)}(i,t);var e,r,n,o=(r=i,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=yt(r);if(n){var o=yt(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return vt(this,t)});function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(e=o.call(this,t,(this instanceof i?this.constructor:void 0).name)).attack=40,e.defence=10,e.attackDistance=1,e.moveDistance=4,e.team=y,e}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(G);function mt(t){return mt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},mt(t)}function gt(t,e){return gt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},gt(t,e)}function bt(t,e){if(e&&("object"===mt(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function wt(t){return wt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},wt(t)}var St=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&gt(t,e)}(i,t);var e,r,n,o=(r=i,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=wt(r);if(n){var o=wt(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return bt(this,t)});function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(e=o.call(this,t,(this instanceof i?this.constructor:void 0).name)).attack=25,e.defence=25,e.attackDistance=2,e.moveDistance=2,e.team=y,e}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(G);function xt(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function Ot(t,e,r){return e&&xt(t.prototype,e),r&&xt(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}var Ct=Ot((function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.teamComp=[et,dt,St],this.teamHumanInit=[J,ft],this.teamHuman=[J,at,ft]}));function Et(t){return Et="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Et(t)}function Pt(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var jt=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.playersTurn=!0,this.level=1,this.points=0,this.highestPoints=0,this.positioned=[]}var e,r;return e=t,r=[{key:"from",value:function(t){return"object"===Et(t)?{object:t}:null}}],null&&Pt(e.prototype,null),r&&Pt(e,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function Tt(t,e,r,n,o,i,a){try{var c=t[i](a),s=c.value}catch(t){return void r(t)}c.done?e(s):Promise.resolve(s).then(n,o)}function kt(t){return function(t){if(Array.isArray(t))return Lt(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return Lt(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Lt(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Lt(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function _t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var At=function(){function r(t,e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,r),this.gamePlay=t,this.stateService=e,this.gameState=new jt,this.selectedCharacter=!1,this.indexOfSelectedCharacter=null,this.previouslySelected=null}var c,s,u,l;return c=r,s=[{key:"init",value:function(){this.prepareBoard(),this.drawCharacters()}},{key:"prepareBoard",value:function(){this.gamePlay.drawUi(Object.values(p)[this.gameState.level-1]),this.removeListeners(),this.addListeners(),this.showStats()}},{key:"drawCharacters",value:function(){this.teamHuman=q((new Ct).teamHumanInit,1,2),this.teamComp=q((new Ct).teamComp,1,2),this.posTeamHuman=z(this.teamHuman,v),this.posTeamComp=z(this.teamComp,y),this.gameState.positioned=[].concat(kt(this.posTeamHuman),kt(this.posTeamComp)),this.gamePlay.redrawPositions(this.gameState.positioned)}},{key:"onCellEnter",value:function(t){var r=this.findCharacterHere(t);if(this.gamePlay.setCursor(d),r){var n=r.character,a=n.level,c=n.attack,s=n.defence,u=n.health;this.gamePlay.showCellTooltip("🎖".concat(a," ⚔").concat(c," 🛡").concat(s," ❤").concat(u),t)}if(this.indexOfSelectedCharacter&&this.selectedCharacter){var l=this.findNumberOfStepsToMove(),f=this.findNumberOfStepsToAttack();if(l||f){var h=e(this.indexOfSelectedCharacter,t,l),p=e(this.indexOfSelectedCharacter,t,f);this.selectedCharacter&&(h&&!this.findCharacterHere(t)&&(this.gamePlay.selectCell(t,o),this.gamePlay.setCursor(m)),h||this.gamePlay.setCursor(b),(null==r?void 0:r.character.team)===y&&p?(this.gamePlay.selectCell(t,i),this.gamePlay.setCursor(g)):(null==r?void 0:r.character.team)===v&&(this.gamePlay.setCursor(m),this.gamePlay.selectCell(t,"")))}}}},{key:"onCellLeave",value:function(t){this.gamePlay.hideCellTooltip(t),t!==this.indexOfSelectedCharacter&&(this.gamePlay.deselectCell(t),this.gamePlay.setCursor(m))}},{key:"onCellClick",value:function(t){var r=this;if(this.gameState.playersTurn){if(this.posTeamHuman.length>0&&this.gameState.level<=4&&0!==this.posTeamComp.length){var n=this.findCharacterHere(t);if(n?n.character.team!==y||this.selectedCharacter?(this.previouslySelected=this.selectedCharacter,this.selectedCharacter=n,this.gamePlay.deselectCell(this.indexOfSelectedCharacter||t),this.gamePlay.selectCell(t),this.indexOfSelectedCharacter=t,this.gamePlay.setCursor(m)):(h.showError(w),this.gamePlay.deselectCell(this.indexOfSelectedCharacter||t)):this.selectedCharacter||h.showError(S),this.previouslySelected&&n){var o=this.previouslySelected.character.attackDistance,i=e(this.previouslySelected.position,t,o);if(n.character.team===v)this.gamePlay.deselectCell(this.indexOfSelectedCharacter),this.gamePlay.selectCell(t);else if(i){var a=n,c=Math.max(this.previouslySelected.character.attack-a.character.defence,.1*this.previouslySelected.character.attack);this.gamePlay.showDamage(t,c).then((function(){a.character.health-=c;var t=r.posTeamComp.indexOf(a);a.character.health<=0&&(r.posTeamComp.splice(t,1),r.gameState.positioned=[].concat(kt(r.posTeamHuman),kt(r.posTeamComp)),0===r.posTeamComp.length&&(r.gameState.playersTurn=!0,r.levelUp())),r.removeSelected(),r.gamePlay.redrawPositions(r.gameState.positioned),r.computersMove()})),this.selectedCharacter=null,this.indexOfSelectedCharacter=null,this.gameState.playersTurn=!1}else h.showError(x),this.selectedCharacter=null,this.previouslySelected=null,this.removeSelected(),this.computersMove()}if(!n&&this.selectedCharacter){var s=this.findNumberOfStepsToMove();e(this.indexOfSelectedCharacter,t,s)?(this.posTeamHuman=kt(this.posTeamHuman).filter((function(t){return t.position!==r.indexOfSelectedCharacter})),this.selectedCharacter.position=t,this.posTeamHuman.push(this.selectedCharacter),this.gameState.positioned=[].concat(kt(this.posTeamHuman),kt(this.posTeamComp)),this.selectedCharacter=null,this.indexOfSelectedCharacter=null,this.gamePlay.redrawPositions(this.gameState.positioned),this.removeSelected(),this.gameState.playersTurn=!1):h.showError(O),this.computersMove()}}}else h.showError(C)}},{key:"computersMove",value:(u=regeneratorRuntime.mark((function e(){var r,a,c,s,u,l,f,p,v,y,d,m,g,b,w=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(this.gameState.playersTurn){e.next=43;break}return e.next=3,n(300);case 3:if(r=Math.floor(Math.random()*this.posTeamComp.length),a=this.posTeamComp[r],c=a.position,s=a.character.moveDistance,u=a.character.attackDistance,l=this.posTeamHuman.map((function(t){return t.position})),f=this.posTeamComp.map((function(t){return t.position})),p=t(c,s).filter((function(t){return-1===f.indexOf(t)})).filter((function(t){return-1===l.indexOf(t)})),v=t(c,u),y=v.filter((function(t){return l.indexOf(t)>-1})),d=null,1===y.length?d=y[0]:y.length>1&&(d=y[Math.floor(Math.random()*y.length)]),d){e.next=31;break}return this.posTeamComp=kt(this.posTeamComp).filter((function(t){return t.position!==c})),this.gamePlay.selectCell(a.position),e.next=20,n(300);case 20:return this.gamePlay.deselectCell(a.position),a.position=p[Math.floor(Math.random()*p.length)],this.gamePlay.selectCell(a.position,o),e.next=25,n(300);case 25:this.gamePlay.deselectCell(a.position),this.posTeamComp.push(a),this.gameState.positioned=[].concat(kt(this.posTeamHuman),kt(this.posTeamComp)),this.gamePlay.redrawPositions(this.gameState.positioned),e.next=40;break;case 31:return m=this.findCharacterHere(d),g=Math.max(a.character.attack-m.character.defence,.1*a.character.attack),this.gamePlay.selectCell(a.position),e.next=36,n(300);case 36:this.gamePlay.selectCell(d,i),b=this.gamePlay.showDamage(d,g),this.gamePlay.deselectCell(a.position),b.then((function(){m.character.health-=g;var t=w.posTeamHuman.indexOf(m);m.character.health<=0&&(w.posTeamHuman.splice(t,1),w.gameState.positioned=[].concat(kt(w.posTeamHuman),kt(w.posTeamComp)),0===w.posTeamHuman.length&&h.showMessage(E)),w.gamePlay.redrawPositions(w.gameState.positioned),w.gamePlay.deselectCell(d)}));case 40:this.gameState.playersTurn=!0,e.next=44;break;case 43:this.gameState.playersTurn=!0;case 44:case"end":return e.stop()}}),e,this)})),l=function(){var t=this,e=arguments;return new Promise((function(r,n){var o=u.apply(t,e);function i(t){Tt(o,r,n,i,a,"next",t)}function a(t){Tt(o,r,n,i,a,"throw",t)}i(void 0)}))},function(){return l.apply(this,arguments)})},{key:"levelUp",value:function(){this.gameState.level<=4&&(this.gameState.points+=this.posTeamHuman.map((function(t){return t.character.health})).reduce((function(t,e){return t+e})),this.gameState.highestPoints<this.gameState.points&&(this.gameState.highestPoints=this.gameState.points),this.showStats(),this.gameState.level<4?(this.gameState.level+=1,this.prepareBoard(),this.gameState.positioned.forEach((function(t){return t.character.levelUp()})),this.teamHuman=this.posTeamHuman.map((function(t){return t.character})),this.teamHuman.push(W((new Ct).teamHuman,this.gameState.level-1).next().value),this.posTeamHuman=z(this.teamHuman,v),this.teamComp=q((new Ct).teamComp,this.gameState.level,this.posTeamHuman.length),this.posTeamComp=z(this.teamComp,y),this.gameState.positioned=[].concat(kt(this.posTeamHuman),kt(this.posTeamComp)),this.gamePlay.redrawPositions(this.gameState.positioned)):h.showMessage(_))}},{key:"onNewGameClick",value:function(){this.deselect(),this.gameState.playersTurn=!0,this.gameState.level=1,this.gameState.points=0,this.init()}},{key:"onSaveGameClick",value:function(){try{this.stateService.save(this.gameState),h.showMessage(A)}catch(t){h.showError(P)}}},{key:"onLoadGame",value:function(){try{var t=this.stateService.load(),e={Swordsman:ft,Bowman:J,Magician:at,Daemon:et,Undead:dt,Vampire:St};this.deselect(),this.gameState.level=t.level,this.gameState.points=t.points,this.gameState.highestPoints=t.highestPoints,this.gameState.playersTurn=t.playersTurn,this.prepareBoard(),this.gameState.positioned=t.positioned.map((function(t){var r=t.character,n=r.attack,o=r.attackDistance,i=r.defence,a=r.health,c=r.level,s=r.moveDistance,u=r.team,l=r.type,f=new e[l](c);return f.attack=n,f.attackDistance=o,f.defence=i,f.health=a,f.moveDistance=s,f.team=u,new H(f,t.position)})),this.posTeamHuman=this.gameState.positioned.filter((function(t){return t.character.team===v})),this.posTeamComp=this.gameState.positioned.filter((function(t){return t.character.team===y})),h.showMessage(R)}catch(t){return void h.showError(P)}this.gamePlay.redrawPositions(this.gameState.positioned)}},{key:"addListeners",value:function(){this.gamePlay.addCellEnterListener(this.onCellEnter.bind(this)),this.gamePlay.addCellLeaveListener(this.onCellLeave.bind(this)),this.gamePlay.addCellClickListener(this.onCellClick.bind(this)),this.gamePlay.addNewGameListener(this.onNewGameClick.bind(this)),this.gamePlay.addSaveGameListener(this.onSaveGameClick.bind(this)),this.gamePlay.addLoadGameListener(this.onLoadGame.bind(this))}},{key:"removeListeners",value:function(){this.gamePlay.cellClickListeners=[],this.gamePlay.cellEnterListeners=[],this.gamePlay.cellLeaveListeners=[],this.gamePlay.newGameListeners=[],this.gamePlay.saveGameListeners=[],this.gamePlay.loadGameListeners=[]}},{key:"deselect",value:function(){this.removeListeners(),this.selectedCharacter=!1,this.indexOfSelectedCharacter=null,this.previouslySelected=null}},{key:"showStats",value:function(){this.gamePlay.setCurrentLevel(this.gameState.level),this.gamePlay.setCurrentScore(this.gameState.points),this.gamePlay.setBestScore(this.gameState.highestPoints)}},{key:"removeSelected",value:function(){this.gamePlay.cells.forEach((function(t){return t.classList.remove("selected-".concat(a),"selected-".concat(o),"selected-".concat(i))}))}},{key:"findCharacterHere",value:function(t){return this.gameState.positioned.find((function(e){return e.position===t}))}},{key:"findNumberOfStepsToMove",value:function(){return this.selectedCharacter.character.moveDistance}},{key:"findNumberOfStepsToAttack",value:function(){return this.selectedCharacter.character.attackDistance}}],s&&_t(c.prototype,s),Object.defineProperty(c,"prototype",{writable:!1}),r}();function Rt(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var Mt=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.storage=e}var e,r;return e=t,(r=[{key:"save",value:function(t){this.storage.setItem("state",JSON.stringify(t))}},{key:"load",value:function(){try{return JSON.parse(this.storage.getItem("state"))}catch(t){throw new Error(L)}}}])&&Rt(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}(),It=new h;It.bindToDOM(document.querySelector("#game-container")),new At(It,new Mt(localStorage)).init()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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ZUFHakN0QixRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1jYWxsYWJsZS5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZnJvbS5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdC5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zbGljZS1zaW1wbGUuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc2xpY2UuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jYWxsLXdpdGgtc2FmZS1pdGVyYXRpb24tY2xvc2luZy5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi1yYXcuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29ycmVjdC1pcy1yZWdleHAtbG9naWMuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcy5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb20tdG9rZW4tbGlzdC1wcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcy1wZWJibGUuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcy5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZS5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtaXMtd2Vib3Mtd2Via2l0LmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50LmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZXhwb3J0LmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZhaWxzLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5LmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dC5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZS5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZS5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2xvYmFsLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGlkZGVuLWtleXMuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaG9zdC1yZXBvcnQtZXJyb3JzLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2h0bWwuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWNhbGxhYmxlLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWZvcmNlZC5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtcHVyZS5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtc3ltYm9sLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdGUuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3ItY2xvc2UuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3JzLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21pY3JvdGFzay5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtcHJvbWlzZS1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtc3ltYm9sLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS13ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25vdC1hLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scy5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC10by1hcnJheS5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtdG8tc3RyaW5nLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29yZGluYXJ5LXRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wYXRoLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3BlcmZvcm0uanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3F1ZXVlLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZGVmaW5lLWFsbC5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZXhlYy5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLXN0aWNreS1oZWxwZXJzLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC11bnN1cHBvcnRlZC1kb3QtYWxsLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC11bnN1cHBvcnRlZC1uY2cuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LXNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQtc3RvcmUuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZS5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90YXNrLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHkuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tbGVuZ3RoLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5LmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdHJ5LXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91aWQuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdjgtcHJvdG90eXBlLWRlZmluZS1idWcuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdmFsaWRhdGUtYXJndW1lbnRzLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZnJvbS5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudmFsdWVzLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LmNvbnN0cnVjdC5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3RhcnRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5kZXNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLml0ZXJhdG9yLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2Fqcy1kaXBsb21hL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9zcmMvanMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9zcmMvanMvY29uc3RhbnRzL2NvbG91ci5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL3NyYy9qcy9HYW1lUGxheS5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL3NyYy9qcy9jb25zdGFudHMvdGhlbWVzLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vc3JjL2pzL2NvbnN0YW50cy90ZWFtcy5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL3NyYy9qcy9jb25zdGFudHMvY3Vyc29ycy5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL3NyYy9qcy9jb25zdGFudHMvZXJyb3JzLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vc3JjL2pzL2NvbnN0YW50cy9tZXNzYWdlcy5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL3NyYy9qcy9DaGFyYWN0ZXIuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9zcmMvanMvUG9zaXRpb25lZENoYXJhY3Rlci5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL3NyYy9qcy9nZW5lcmF0b3JzLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vc3JjL2pzL2NoYXJhY3RlcnMvQm93bWFuLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vc3JjL2pzL2NoYXJhY3RlcnMvRGFlbW9uLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vc3JjL2pzL2NoYXJhY3RlcnMvTWFnaWNpYW4uanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9zcmMvanMvY2hhcmFjdGVycy9Td29yZHNtYW4uanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9zcmMvanMvY2hhcmFjdGVycy9VbmRlYWQuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9zcmMvanMvY2hhcmFjdGVycy9WYW1waXJlLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vc3JjL2pzL1RlYW0uanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9zcmMvanMvR2FtZVN0YXRlLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vc3JjL2pzL0dhbWVDb250cm9sbGVyLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vc3JjL2pzL0dhbWVTdGF0ZVNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9zcmMvanMvYXBwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIHRyeVRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcnKTtcblxudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG5cbi8vIGBBc3NlcnQ6IElzQ2FsbGFibGUoYXJndW1lbnQpIGlzIHRydWVgXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDtcbiAgdGhyb3cgVHlwZUVycm9yKHRyeVRvU3RyaW5nKGFyZ3VtZW50KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY29uc3RydWN0b3InKTtcbnZhciB0cnlUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90cnktdG8tc3RyaW5nJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBgQXNzZXJ0OiBJc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSBpcyB0cnVlYFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgaWYgKGlzQ29uc3RydWN0b3IoYXJndW1lbnQpKSByZXR1cm4gYXJndW1lbnQ7XG4gIHRocm93IFR5cGVFcnJvcih0cnlUb1N0cmluZyhhcmd1bWVudCkgKyAnIGlzIG5vdCBhIGNvbnN0cnVjdG9yJyk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG5cbnZhciBTdHJpbmcgPSBnbG9iYWwuU3RyaW5nO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIGlmICh0eXBlb2YgYXJndW1lbnQgPT0gJ29iamVjdCcgfHwgaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3Qgc2V0IFwiICsgU3RyaW5nKGFyZ3VtZW50KSArICcgYXMgYSBwcm90b3R5cGUnKTtcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbnZhciBVTlNDT1BBQkxFUyA9IHdlbGxLbm93blN5bWJvbCgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTtcblxuLy8gQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5pZiAoQXJyYXlQcm90b3R5cGVbVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkge1xuICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKEFycmF5UHJvdG90eXBlLCBVTlNDT1BBQkxFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogY3JlYXRlKG51bGwpXG4gIH0pO1xufVxuXG4vLyBhZGQgYSBrZXkgdG8gQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b3R5cGVbVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUHJvdG90eXBlKSB7XG4gIGlmIChpc1Byb3RvdHlwZU9mKFByb3RvdHlwZSwgaXQpKSByZXR1cm4gaXQ7XG4gIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0IGludm9jYXRpb24nKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgU3RyaW5nID0gZ2xvYmFsLlN0cmluZztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBgQXNzZXJ0OiBUeXBlKGFyZ3VtZW50KSBpcyBPYmplY3RgXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoaXNPYmplY3QoYXJndW1lbnQpKSByZXR1cm4gYXJndW1lbnQ7XG4gIHRocm93IFR5cGVFcnJvcihTdHJpbmcoYXJndW1lbnQpICsgJyBpcyBub3QgYW4gb2JqZWN0Jyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZvckVhY2g7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG5cbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnZm9yRWFjaCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxubW9kdWxlLmV4cG9ydHMgPSAhU1RSSUNUX01FVEhPRCA/IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1wcm90b3R5cGUtZm9yZWFjaCAtLSBzYWZlXG59IDogW10uZm9yRWFjaDtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NhbGwtd2l0aC1zYWZlLWl0ZXJhdGlvbi1jbG9zaW5nJyk7XG52YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIGlzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY29uc3RydWN0b3InKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGdldEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvcicpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcblxudmFyIEFycmF5ID0gZ2xvYmFsLkFycmF5O1xuXG4vLyBgQXJyYXkuZnJvbWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LmZyb21cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gIHZhciBJU19DT05TVFJVQ1RPUiA9IGlzQ29uc3RydWN0b3IodGhpcyk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgbWFwZm4gPSBhcmd1bWVudHNMZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gIGlmIChtYXBwaW5nKSBtYXBmbiA9IGJpbmQobWFwZm4sIGFyZ3VtZW50c0xlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICB2YXIgaXRlcmF0b3JNZXRob2QgPSBnZXRJdGVyYXRvck1ldGhvZChPKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvciwgbmV4dCwgdmFsdWU7XG4gIC8vIGlmIHRoZSB0YXJnZXQgaXMgbm90IGl0ZXJhYmxlIG9yIGl0J3MgYW4gYXJyYXkgd2l0aCB0aGUgZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBhIHNpbXBsZSBjYXNlXG4gIGlmIChpdGVyYXRvck1ldGhvZCAmJiAhKHRoaXMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJhdG9yTWV0aG9kKSkpIHtcbiAgICBpdGVyYXRvciA9IGdldEl0ZXJhdG9yKE8sIGl0ZXJhdG9yTWV0aG9kKTtcbiAgICBuZXh0ID0gaXRlcmF0b3IubmV4dDtcbiAgICByZXN1bHQgPSBJU19DT05TVFJVQ1RPUiA/IG5ldyB0aGlzKCkgOiBbXTtcbiAgICBmb3IgKDshKHN0ZXAgPSBjYWxsKG5leHQsIGl0ZXJhdG9yKSkuZG9uZTsgaW5kZXgrKykge1xuICAgICAgdmFsdWUgPSBtYXBwaW5nID8gY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyhpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZTtcbiAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgcmVzdWx0ID0gSVNfQ09OU1RSVUNUT1IgPyBuZXcgdGhpcyhsZW5ndGgpIDogQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgdmFsdWUgPSBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdO1xuICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgdmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUueyBpbmRleE9mLCBpbmNsdWRlcyB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICBpZiAoKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pICYmIE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xuICBpbmNsdWRlczogY3JlYXRlTWV0aG9kKHRydWUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmluZGV4T2ZgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmRleG9mXG4gIGluZGV4T2Y6IGNyZWF0ZU1ldGhvZChmYWxzZSlcbn07XG4iLCJ2YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGZvckVhY2gsIG1hcCwgZmlsdGVyLCBzb21lLCBldmVyeSwgZmluZCwgZmluZEluZGV4LCBmaWx0ZXJSZWplY3QgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgSVNfRklMVEVSX1JFSkVDVCA9IFRZUEUgPT0gNztcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQsIHNwZWNpZmljQ3JlYXRlKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0KE8pO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCB0aGF0KTtcbiAgICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2Uoc2VsZik7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgY3JlYXRlID0gc3BlY2lmaWNDcmVhdGUgfHwgYXJyYXlTcGVjaWVzQ3JlYXRlO1xuICAgIHZhciB0YXJnZXQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgfHwgSVNfRklMVEVSX1JFSkVDVCA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbHVlLCByZXN1bHQ7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWx1ZSA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzdWx0ID0gYm91bmRGdW5jdGlvbih2YWx1ZSwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgdGFyZ2V0W2luZGV4XSA9IHJlc3VsdDsgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlc3VsdCkgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWx1ZTsgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHB1c2godGFyZ2V0LCB2YWx1ZSk7ICAgICAgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDQ6IHJldHVybiBmYWxzZTsgICAgICAgICAgICAgLy8gZXZlcnlcbiAgICAgICAgICBjYXNlIDc6IHB1c2godGFyZ2V0LCB2YWx1ZSk7ICAgICAgLy8gZmlsdGVyUmVqZWN0XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHRhcmdldDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG4gIGZvckVhY2g6IGNyZWF0ZU1ldGhvZCgwKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5tYXBcbiAgbWFwOiBjcmVhdGVNZXRob2QoMSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsdGVyXG4gIGZpbHRlcjogY3JlYXRlTWV0aG9kKDIpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLnNvbWVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb21lXG4gIHNvbWU6IGNyZWF0ZU1ldGhvZCgzKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5ldmVyeWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmV2ZXJ5XG4gIGV2ZXJ5OiBjcmVhdGVNZXRob2QoNCksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRcbiAgZmluZDogY3JlYXRlTWV0aG9kKDUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRJbmRleFxuICBmaW5kSW5kZXg6IGNyZWF0ZU1ldGhvZCg2KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJSZWplY3RgIG1ldGhvZFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hcnJheS1maWx0ZXJpbmdcbiAgZmlsdGVyUmVqZWN0OiBjcmVhdGVNZXRob2QoNylcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB0aGlzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuICAvLyBkZW9wdGltaXphdGlvbiBhbmQgc2VyaW91cyBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc3XG4gIHJldHVybiBWOF9WRVJTSU9OID49IDUxIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFycmF5ID0gW107XG4gICAgdmFyIGNvbnN0cnVjdG9yID0gYXJyYXkuY29uc3RydWN0b3IgPSB7fTtcbiAgICBjb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7IGZvbzogMSB9O1xuICAgIH07XG4gICAgcmV0dXJuIGFycmF5W01FVEhPRF9OQU1FXShCb29sZWFuKS5mb28gIT09IDE7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSwgYXJndW1lbnQpIHtcbiAgdmFyIG1ldGhvZCA9IFtdW01FVEhPRF9OQU1FXTtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gICAgbWV0aG9kLmNhbGwobnVsbCwgYXJndW1lbnQgfHwgZnVuY3Rpb24gKCkgeyByZXR1cm4gMTsgfSwgMSk7XG4gIH0pO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcblxudmFyIEFycmF5ID0gZ2xvYmFsLkFycmF5O1xudmFyIG1heCA9IE1hdGgubWF4O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgdmFyIGsgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbmd0aCk7XG4gIHZhciBmaW4gPSB0b0Fic29sdXRlSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQsIGxlbmd0aCk7XG4gIHZhciByZXN1bHQgPSBBcnJheShtYXgoZmluIC0gaywgMCkpO1xuICBmb3IgKHZhciBuID0gMDsgayA8IGZpbjsgaysrLCBuKyspIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgbiwgT1trXSk7XG4gIHJlc3VsdC5sZW5ndGggPSBuO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB1bmN1cnJ5VGhpcyhbXS5zbGljZSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNvbnN0cnVjdG9yJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgQXJyYXkgPSBnbG9iYWwuQXJyYXk7XG5cbi8vIGEgcGFydCBvZiBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5KSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbEFycmF5KSkge1xuICAgIEMgPSBvcmlnaW5hbEFycmF5LmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKGlzQ29uc3RydWN0b3IoQykgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBlbHNlIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQztcbn07XG4iLCJ2YXIgYXJyYXlTcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5LCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoYXJyYXlTcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWxBcnJheSkpKGxlbmd0aCA9PT0gMCA/IDAgOiBsZW5ndGgpO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpdGVyYXRvckNsb3NlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlJyk7XG5cbi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIEVOVFJJRVMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gRU5UUklFUyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsICd0aHJvdycsIGVycm9yKTtcbiAgfVxufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgY2FsbGVkID0gMDtcbiAgdmFyIGl0ZXJhdG9yV2l0aFJldHVybiA9IHtcbiAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBkb25lOiAhIWNhbGxlZCsrIH07XG4gICAgfSxcbiAgICAncmV0dXJuJzogZnVuY3Rpb24gKCkge1xuICAgICAgU0FGRV9DTE9TSU5HID0gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIGl0ZXJhdG9yV2l0aFJldHVybltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1mcm9tLCBuby10aHJvdy1saXRlcmFsIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIEFycmF5LmZyb20oaXRlcmF0b3JXaXRoUmV0dXJuLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBTS0lQX0NMT1NJTkcpIHtcbiAgaWYgKCFTS0lQX0NMT1NJTkcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgSVRFUkFUSU9OX1NVUFBPUlQgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgb2JqZWN0ID0ge307XG4gICAgb2JqZWN0W0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4geyBkb25lOiBJVEVSQVRJT05fU1VQUE9SVCA9IHRydWUgfTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICAgIGV4ZWMob2JqZWN0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gSVRFUkFUSU9OX1NVUFBPUlQ7XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG52YXIgdG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyh7fS50b1N0cmluZyk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBzdHJpbmdTbGljZSh0b1N0cmluZyhpdCksIDgsIC0xKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgY2xhc3NvZlJhdyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciBPYmplY3QgPSBnbG9iYWwuT2JqZWN0O1xuXG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIENPUlJFQ1RfQVJHVU1FTlRTID0gY2xhc3NvZlJhdyhmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxufTtcblxuLy8gZ2V0dGluZyB0YWcgZnJvbSBFUzYrIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYFxubW9kdWxlLmV4cG9ydHMgPSBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPyBjbGFzc29mUmF3IDogZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCB0YWcsIHJlc3VsdDtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKHRhZyA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVE9fU1RSSU5HX1RBRykpID09ICdzdHJpbmcnID8gdGFnXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBDT1JSRUNUX0FSR1VNRU5UUyA/IGNsYXNzb2ZSYXcoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAocmVzdWx0ID0gY2xhc3NvZlJhdyhPKSkgPT0gJ09iamVjdCcgJiYgaXNDYWxsYWJsZShPLmNhbGxlZSkgPyAnQXJndW1lbnRzJyA6IHJlc3VsdDtcbn07XG4iLCJ2YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc291cmNlLCBleGNlcHRpb25zKSB7XG4gIHZhciBrZXlzID0gb3duS2V5cyhzb3VyY2UpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmICghaGFzT3duKHRhcmdldCwga2V5KSAmJiAhKGV4Y2VwdGlvbnMgJiYgaGFzT3duKGV4Y2VwdGlvbnMsIGtleSkpKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgfVxuICB9XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgTUFUQ0ggPSB3ZWxsS25vd25TeW1ib2woJ21hdGNoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIHZhciByZWdleHAgPSAvLi87XG4gIHRyeSB7XG4gICAgJy8uLydbTUVUSE9EX05BTUVdKHJlZ2V4cCk7XG4gIH0gY2F0Y2ggKGVycm9yMSkge1xuICAgIHRyeSB7XG4gICAgICByZWdleHBbTUFUQ0hdID0gZmFsc2U7XG4gICAgICByZXR1cm4gJy8uLydbTUVUSE9EX05BTUVdKHJlZ2V4cCk7XG4gICAgfSBjYXRjaCAoZXJyb3IyKSB7IC8qIGVtcHR5ICovIH1cbiAgfSByZXR1cm4gZmFsc2U7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICBGLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IG51bGw7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0cHJvdG90eXBlb2YgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihuZXcgRigpKSAhPT0gRi5wcm90b3R5cGU7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMtY29yZScpLkl0ZXJhdG9yUHJvdG90eXBlO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCwgRU5VTUVSQUJMRV9ORVhUKSB7XG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICBJdGVyYXRvckNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoKyFFTlVNRVJBQkxFX05FWFQsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvckNvbnN0cnVjdG9yLCBUT19TVFJJTkdfVEFHLCBmYWxzZSwgdHJ1ZSk7XG4gIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7XG4gIHJldHVybiBJdGVyYXRvckNvbnN0cnVjdG9yO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBrZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIHByb3BlcnR5S2V5ID0gdG9Qcm9wZXJ0eUtleShrZXkpO1xuICBpZiAocHJvcGVydHlLZXkgaW4gb2JqZWN0KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwgcHJvcGVydHlLZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtwcm9wZXJ0eUtleV0gPSB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBGdW5jdGlvbk5hbWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3RvcicpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciBJdGVyYXRvcnNDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJyk7XG5cbnZhciBQUk9QRVJfRlVOQ1RJT05fTkFNRSA9IEZ1bmN0aW9uTmFtZS5QUk9QRVI7XG52YXIgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUgPSBGdW5jdGlvbk5hbWUuQ09ORklHVVJBQkxFO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gSXRlcmF0b3JzQ29yZS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gSXRlcmF0b3JzQ29yZS5CVUdHWV9TQUZBUklfSVRFUkFUT1JTO1xudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG52YXIgRU5UUklFUyA9ICdlbnRyaWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYWJsZSwgTkFNRSwgSXRlcmF0b3JDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvcihJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcblxuICB2YXIgZ2V0SXRlcmF0aW9uTWV0aG9kID0gZnVuY3Rpb24gKEtJTkQpIHtcbiAgICBpZiAoS0lORCA9PT0gREVGQVVMVCAmJiBkZWZhdWx0SXRlcmF0b3IpIHJldHVybiBkZWZhdWx0SXRlcmF0b3I7XG4gICAgaWYgKCFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIEtJTkQgaW4gSXRlcmFibGVQcm90b3R5cGUpIHJldHVybiBJdGVyYWJsZVByb3RvdHlwZVtLSU5EXTtcbiAgICBzd2l0Y2ggKEtJTkQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIEVOVFJJRVM6IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcyk7IH07XG4gIH07XG5cbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSBmYWxzZTtcbiAgdmFyIEl0ZXJhYmxlUHJvdG90eXBlID0gSXRlcmFibGUucHJvdG90eXBlO1xuICB2YXIgbmF0aXZlSXRlcmF0b3IgPSBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl1cbiAgICB8fCBJdGVyYWJsZVByb3RvdHlwZVsnQEBpdGVyYXRvciddXG4gICAgfHwgREVGQVVMVCAmJiBJdGVyYWJsZVByb3RvdHlwZVtERUZBVUxUXTtcbiAgdmFyIGRlZmF1bHRJdGVyYXRvciA9ICFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIG5hdGl2ZUl0ZXJhdG9yIHx8IGdldEl0ZXJhdGlvbk1ldGhvZChERUZBVUxUKTtcbiAgdmFyIGFueU5hdGl2ZUl0ZXJhdG9yID0gTkFNRSA9PSAnQXJyYXknID8gSXRlcmFibGVQcm90b3R5cGUuZW50cmllcyB8fCBuYXRpdmVJdGVyYXRvciA6IG5hdGl2ZUl0ZXJhdG9yO1xuICB2YXIgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBtZXRob2RzLCBLRVk7XG5cbiAgLy8gZml4IG5hdGl2ZVxuICBpZiAoYW55TmF0aXZlSXRlcmF0b3IpIHtcbiAgICBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihhbnlOYXRpdmVJdGVyYXRvci5jYWxsKG5ldyBJdGVyYWJsZSgpKSk7XG4gICAgaWYgKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgaWYgKCFJU19QVVJFICYmIGdldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSkgIT09IEl0ZXJhdG9yUHJvdG90eXBlKSB7XG4gICAgICAgIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgICAgICAgIHNldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSXRlcmF0b3JQcm90b3R5cGUpO1xuICAgICAgICB9IGVsc2UgaWYgKCFpc0NhbGxhYmxlKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0pKSB7XG4gICAgICAgICAgcmVkZWZpbmUoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgdHJ1ZSwgdHJ1ZSk7XG4gICAgICBpZiAoSVNfUFVSRSkgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgICB9XG4gIH1cblxuICAvLyBmaXggQXJyYXkucHJvdG90eXBlLnsgdmFsdWVzLCBAQGl0ZXJhdG9yIH0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChQUk9QRVJfRlVOQ1RJT05fTkFNRSAmJiBERUZBVUxUID09IFZBTFVFUyAmJiBuYXRpdmVJdGVyYXRvciAmJiBuYXRpdmVJdGVyYXRvci5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBpZiAoIUlTX1BVUkUgJiYgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShJdGVyYWJsZVByb3RvdHlwZSwgJ25hbWUnLCBWQUxVRVMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSB0cnVlO1xuICAgICAgZGVmYXVsdEl0ZXJhdG9yID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gY2FsbChuYXRpdmVJdGVyYXRvciwgdGhpcyk7IH07XG4gICAgfVxuICB9XG5cbiAgLy8gZXhwb3J0IGFkZGl0aW9uYWwgbWV0aG9kc1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gZGVmYXVsdEl0ZXJhdG9yIDogZ2V0SXRlcmF0aW9uTWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogZ2V0SXRlcmF0aW9uTWV0aG9kKEVOVFJJRVMpXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKEtFWSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfHwgIShLRVkgaW4gSXRlcmFibGVQcm90b3R5cGUpKSB7XG4gICAgICAgIHJlZGVmaW5lKEl0ZXJhYmxlUHJvdG90eXBlLCBLRVksIG1ldGhvZHNbS0VZXSk7XG4gICAgICB9XG4gICAgfSBlbHNlICQoeyB0YXJnZXQ6IE5BTUUsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgfHwgSU5DT1JSRUNUX1ZBTFVFU19OQU1FIH0sIG1ldGhvZHMpO1xuICB9XG5cbiAgLy8gZGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUlTX1BVUkUgfHwgRk9SQ0VEKSAmJiBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl0gIT09IGRlZmF1bHRJdGVyYXRvcikge1xuICAgIHJlZGVmaW5lKEl0ZXJhYmxlUHJvdG90eXBlLCBJVEVSQVRPUiwgZGVmYXVsdEl0ZXJhdG9yLCB7IG5hbWU6IERFRkFVTFQgfSk7XG4gIH1cbiAgSXRlcmF0b3JzW05BTUVdID0gZGVmYXVsdEl0ZXJhdG9yO1xuXG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsInZhciBwYXRoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtd3JhcHBlZCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FKSB7XG4gIHZhciBTeW1ib2wgPSBwYXRoLlN5bWJvbCB8fCAocGF0aC5TeW1ib2wgPSB7fSk7XG4gIGlmICghaGFzT3duKFN5bWJvbCwgTkFNRSkpIGRlZmluZVByb3BlcnR5KFN5bWJvbCwgTkFNRSwge1xuICAgIHZhbHVlOiB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlLmYoTkFNRSlcbiAgfSk7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIERldGVjdCBJRTgncyBpbmNvbXBsZXRlIGRlZmluZVByb3BlcnR5IGltcGxlbWVudGF0aW9uXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgMSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSlbMV0gIT0gNztcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgRVhJU1RTID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gRVhJU1RTID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCIvLyBpdGVyYWJsZSBET00gY29sbGVjdGlvbnNcbi8vIGZsYWcgLSBgaXRlcmFibGVgIGludGVyZmFjZSAtICdlbnRyaWVzJywgJ2tleXMnLCAndmFsdWVzJywgJ2ZvckVhY2gnIG1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0ge1xuICBDU1NSdWxlTGlzdDogMCxcbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogMCxcbiAgQ1NTVmFsdWVMaXN0OiAwLFxuICBDbGllbnRSZWN0TGlzdDogMCxcbiAgRE9NUmVjdExpc3Q6IDAsXG4gIERPTVN0cmluZ0xpc3Q6IDAsXG4gIERPTVRva2VuTGlzdDogMSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IDAsXG4gIEZpbGVMaXN0OiAwLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogMCxcbiAgSFRNTENvbGxlY3Rpb246IDAsXG4gIEhUTUxGb3JtRWxlbWVudDogMCxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IDAsXG4gIE1lZGlhTGlzdDogMCxcbiAgTWltZVR5cGVBcnJheTogMCxcbiAgTmFtZWROb2RlTWFwOiAwLFxuICBOb2RlTGlzdDogMSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogMCxcbiAgUGx1Z2luOiAwLFxuICBQbHVnaW5BcnJheTogMCxcbiAgU1ZHTGVuZ3RoTGlzdDogMCxcbiAgU1ZHTnVtYmVyTGlzdDogMCxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IDAsXG4gIFNWR1BvaW50TGlzdDogMCxcbiAgU1ZHU3RyaW5nTGlzdDogMCxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogMCxcbiAgU291cmNlQnVmZmVyTGlzdDogMCxcbiAgU3R5bGVTaGVldExpc3Q6IDAsXG4gIFRleHRUcmFja0N1ZUxpc3Q6IDAsXG4gIFRleHRUcmFja0xpc3Q6IDAsXG4gIFRvdWNoTGlzdDogMFxufTtcbiIsIi8vIGluIG9sZCBXZWJLaXQgdmVyc2lvbnMsIGBlbGVtZW50LmNsYXNzTGlzdGAgaXMgbm90IGFuIGluc3RhbmNlIG9mIGdsb2JhbCBgRE9NVG9rZW5MaXN0YFxudmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG52YXIgY2xhc3NMaXN0ID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdzcGFuJykuY2xhc3NMaXN0O1xudmFyIERPTVRva2VuTGlzdFByb3RvdHlwZSA9IGNsYXNzTGlzdCAmJiBjbGFzc0xpc3QuY29uc3RydWN0b3IgJiYgY2xhc3NMaXN0LmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBET01Ub2tlbkxpc3RQcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGUgPyB1bmRlZmluZWQgOiBET01Ub2tlbkxpc3RQcm90b3R5cGU7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCc7XG4iLCJ2YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IC9pcGFkfGlwaG9uZXxpcG9kL2kudGVzdCh1c2VyQWdlbnQpICYmIGdsb2JhbC5QZWJibGUgIT09IHVuZGVmaW5lZDtcbiIsInZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAvKD86aXBhZHxpcGhvbmV8aXBvZCkuKmFwcGxld2Via2l0L2kudGVzdCh1c2VyQWdlbnQpO1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3NvZihnbG9iYWwucHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuIiwidmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IC93ZWIwcyg/IS4qY2hyb21lKS9pLnRlc3QodXNlckFnZW50KTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ25hdmlnYXRvcicsICd1c2VyQWdlbnQnKSB8fCAnJztcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgRGVubyA9IGdsb2JhbC5EZW5vO1xudmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zIHx8IERlbm8gJiYgRGVuby52ZXJzaW9uO1xudmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjg7XG52YXIgbWF0Y2gsIHZlcnNpb247XG5cbmlmICh2OCkge1xuICBtYXRjaCA9IHY4LnNwbGl0KCcuJyk7XG4gIC8vIGluIG9sZCBDaHJvbWUsIHZlcnNpb25zIG9mIFY4IGlzbid0IFY4ID0gQ2hyb21lIC8gMTBcbiAgLy8gYnV0IHRoZWlyIGNvcnJlY3QgdmVyc2lvbnMgYXJlIG5vdCBpbnRlcmVzdGluZyBmb3IgdXNcbiAgdmVyc2lvbiA9IG1hdGNoWzBdID4gMCAmJiBtYXRjaFswXSA8IDQgPyAxIDogKyhtYXRjaFswXSArIG1hdGNoWzFdKTtcbn1cblxuLy8gQnJvd3NlckZTIE5vZGVKUyBgcHJvY2Vzc2AgcG9seWZpbGwgaW5jb3JyZWN0bHkgc2V0IGAudjhgIHRvIGAwLjBgXG4vLyBzbyBjaGVjayBgdXNlckFnZW50YCBldmVuIGlmIGAudjhgIGV4aXN0cywgYnV0IDBcbmlmICghdmVyc2lvbiAmJiB1c2VyQWdlbnQpIHtcbiAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0VkZ2VcXC8oXFxkKykvKTtcbiAgaWYgKCFtYXRjaCB8fCBtYXRjaFsxXSA+PSA3NCkge1xuICAgIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9DaHJvbWVcXC8oXFxkKykvKTtcbiAgICBpZiAobWF0Y2gpIHZlcnNpb24gPSArbWF0Y2hbMV07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB2ZXJzaW9uO1xuIiwiLy8gSUU4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IFtcbiAgJ2NvbnN0cnVjdG9yJyxcbiAgJ2hhc093blByb3BlcnR5JyxcbiAgJ2lzUHJvdG90eXBlT2YnLFxuICAncHJvcGVydHlJc0VudW1lcmFibGUnLFxuICAndG9Mb2NhbGVTdHJpbmcnLFxuICAndG9TdHJpbmcnLFxuICAndmFsdWVPZidcbl07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG5cbi8qXG4gIG9wdGlvbnMudGFyZ2V0ICAgICAgLSBuYW1lIG9mIHRoZSB0YXJnZXQgb2JqZWN0XG4gIG9wdGlvbnMuZ2xvYmFsICAgICAgLSB0YXJnZXQgaXMgdGhlIGdsb2JhbCBvYmplY3RcbiAgb3B0aW9ucy5zdGF0ICAgICAgICAtIGV4cG9ydCBhcyBzdGF0aWMgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5wcm90byAgICAgICAtIGV4cG9ydCBhcyBwcm90b3R5cGUgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5yZWFsICAgICAgICAtIHJlYWwgcHJvdG90eXBlIG1ldGhvZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMuZm9yY2VkICAgICAgLSBleHBvcnQgZXZlbiBpZiB0aGUgbmF0aXZlIGZlYXR1cmUgaXMgYXZhaWxhYmxlXG4gIG9wdGlvbnMuYmluZCAgICAgICAgLSBiaW5kIG1ldGhvZHMgdG8gdGhlIHRhcmdldCwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLndyYXAgICAgICAgIC0gd3JhcCBjb25zdHJ1Y3RvcnMgdG8gcHJldmVudGluZyBnbG9iYWwgcG9sbHV0aW9uLCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMudW5zYWZlICAgICAgLSB1c2UgdGhlIHNpbXBsZSBhc3NpZ25tZW50IG9mIHByb3BlcnR5IGluc3RlYWQgb2YgZGVsZXRlICsgZGVmaW5lUHJvcGVydHlcbiAgb3B0aW9ucy5zaGFtICAgICAgICAtIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgb3B0aW9ucy5lbnVtZXJhYmxlICAtIGV4cG9ydCBhcyBlbnVtZXJhYmxlIHByb3BlcnR5XG4gIG9wdGlvbnMubm9UYXJnZXRHZXQgLSBwcmV2ZW50IGNhbGxpbmcgYSBnZXR0ZXIgb24gdGFyZ2V0XG4gIG9wdGlvbnMubmFtZSAgICAgICAgLSB0aGUgLm5hbWUgb2YgdGhlIGZ1bmN0aW9uIGlmIGl0IGRvZXMgbm90IG1hdGNoIHRoZSBrZXlcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRpb25zLCBzb3VyY2UpIHtcbiAgdmFyIFRBUkdFVCA9IG9wdGlvbnMudGFyZ2V0O1xuICB2YXIgR0xPQkFMID0gb3B0aW9ucy5nbG9iYWw7XG4gIHZhciBTVEFUSUMgPSBvcHRpb25zLnN0YXQ7XG4gIHZhciBGT1JDRUQsIHRhcmdldCwga2V5LCB0YXJnZXRQcm9wZXJ0eSwgc291cmNlUHJvcGVydHksIGRlc2NyaXB0b3I7XG4gIGlmIChHTE9CQUwpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWw7XG4gIH0gZWxzZSBpZiAoU1RBVElDKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsW1RBUkdFVF0gfHwgc2V0R2xvYmFsKFRBUkdFVCwge30pO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldCA9IChnbG9iYWxbVEFSR0VUXSB8fCB7fSkucHJvdG90eXBlO1xuICB9XG4gIGlmICh0YXJnZXQpIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIHNvdXJjZVByb3BlcnR5ID0gc291cmNlW2tleV07XG4gICAgaWYgKG9wdGlvbnMubm9UYXJnZXRHZXQpIHtcbiAgICAgIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpO1xuICAgICAgdGFyZ2V0UHJvcGVydHkgPSBkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IudmFsdWU7XG4gICAgfSBlbHNlIHRhcmdldFByb3BlcnR5ID0gdGFyZ2V0W2tleV07XG4gICAgRk9SQ0VEID0gaXNGb3JjZWQoR0xPQkFMID8ga2V5IDogVEFSR0VUICsgKFNUQVRJQyA/ICcuJyA6ICcjJykgKyBrZXksIG9wdGlvbnMuZm9yY2VkKTtcbiAgICAvLyBjb250YWluZWQgaW4gdGFyZ2V0XG4gICAgaWYgKCFGT1JDRUQgJiYgdGFyZ2V0UHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHR5cGVvZiBzb3VyY2VQcm9wZXJ0eSA9PSB0eXBlb2YgdGFyZ2V0UHJvcGVydHkpIGNvbnRpbnVlO1xuICAgICAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhzb3VyY2VQcm9wZXJ0eSwgdGFyZ2V0UHJvcGVydHkpO1xuICAgIH1cbiAgICAvLyBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gICAgaWYgKG9wdGlvbnMuc2hhbSB8fCAodGFyZ2V0UHJvcGVydHkgJiYgdGFyZ2V0UHJvcGVydHkuc2hhbSkpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShzb3VyY2VQcm9wZXJ0eSwgJ3NoYW0nLCB0cnVlKTtcbiAgICB9XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzb3VyY2VQcm9wZXJ0eSwgb3B0aW9ucyk7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwidmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBhcHBseSA9IEZ1bmN0aW9uUHJvdG90eXBlLmFwcGx5O1xudmFyIGNhbGwgPSBGdW5jdGlvblByb3RvdHlwZS5jYWxsO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tcmVmbGVjdCAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBSZWZsZWN0ID09ICdvYmplY3QnICYmIFJlZmxlY3QuYXBwbHkgfHwgKE5BVElWRV9CSU5EID8gY2FsbC5iaW5kKGFwcGx5KSA6IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGNhbGwuYXBwbHkoYXBwbHksIGFyZ3VtZW50cyk7XG59KTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciBiaW5kID0gdW5jdXJyeVRoaXModW5jdXJyeVRoaXMuYmluZCk7XG5cbi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQpIHtcbiAgYUNhbGxhYmxlKGZuKTtcbiAgcmV0dXJuIHRoYXQgPT09IHVuZGVmaW5lZCA/IGZuIDogTkFUSVZFX0JJTkQgPyBiaW5kKGZuLCB0aGF0KSA6IGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRlc3QgPSAoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KS5iaW5kKCk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgLS0gc2FmZVxuICByZXR1cm4gdHlwZW9mIHRlc3QgIT0gJ2Z1bmN0aW9uJyB8fCB0ZXN0Lmhhc093blByb3BlcnR5KCdwcm90b3R5cGUnKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZScpO1xudmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciBGdW5jdGlvbiA9IGdsb2JhbC5GdW5jdGlvbjtcbnZhciBjb25jYXQgPSB1bmN1cnJ5VGhpcyhbXS5jb25jYXQpO1xudmFyIGpvaW4gPSB1bmN1cnJ5VGhpcyhbXS5qb2luKTtcbnZhciBmYWN0b3JpZXMgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIChDLCBhcmdzTGVuZ3RoLCBhcmdzKSB7XG4gIGlmICghaGFzT3duKGZhY3RvcmllcywgYXJnc0xlbmd0aCkpIHtcbiAgICBmb3IgKHZhciBsaXN0ID0gW10sIGkgPSAwOyBpIDwgYXJnc0xlbmd0aDsgaSsrKSBsaXN0W2ldID0gJ2FbJyArIGkgKyAnXSc7XG4gICAgZmFjdG9yaWVzW2FyZ3NMZW5ndGhdID0gRnVuY3Rpb24oJ0MsYScsICdyZXR1cm4gbmV3IEMoJyArIGpvaW4obGlzdCwgJywnKSArICcpJyk7XG4gIH0gcmV0dXJuIGZhY3Rvcmllc1thcmdzTGVuZ3RoXShDLCBhcmdzKTtcbn07XG5cbi8vIGBGdW5jdGlvbi5wcm90b3R5cGUuYmluZGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9CSU5EID8gRnVuY3Rpb24uYmluZCA6IGZ1bmN0aW9uIGJpbmQodGhhdCAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgdmFyIEYgPSBhQ2FsbGFibGUodGhpcyk7XG4gIHZhciBQcm90b3R5cGUgPSBGLnByb3RvdHlwZTtcbiAgdmFyIHBhcnRBcmdzID0gYXJyYXlTbGljZShhcmd1bWVudHMsIDEpO1xuICB2YXIgYm91bmRGdW5jdGlvbiA9IGZ1bmN0aW9uIGJvdW5kKC8qIGFyZ3MuLi4gKi8pIHtcbiAgICB2YXIgYXJncyA9IGNvbmNhdChwYXJ0QXJncywgYXJyYXlTbGljZShhcmd1bWVudHMpKTtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGJvdW5kRnVuY3Rpb24gPyBjb25zdHJ1Y3QoRiwgYXJncy5sZW5ndGgsIGFyZ3MpIDogRi5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfTtcbiAgaWYgKGlzT2JqZWN0KFByb3RvdHlwZSkpIGJvdW5kRnVuY3Rpb24ucHJvdG90eXBlID0gUHJvdG90eXBlO1xuICByZXR1cm4gYm91bmRGdW5jdGlvbjtcbn07XG4iLCJ2YXIgTkFUSVZFX0JJTkQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1uYXRpdmUnKTtcblxudmFyIGNhbGwgPSBGdW5jdGlvbi5wcm90b3R5cGUuY2FsbDtcblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfQklORCA/IGNhbGwuYmluZChjYWxsKSA6IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGNhbGwuYXBwbHkoY2FsbCwgYXJndW1lbnRzKTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgZ2V0RGVzY3JpcHRvciA9IERFU0NSSVBUT1JTICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbnZhciBFWElTVFMgPSBoYXNPd24oRnVuY3Rpb25Qcm90b3R5cGUsICduYW1lJyk7XG4vLyBhZGRpdGlvbmFsIHByb3RlY3Rpb24gZnJvbSBtaW5pZmllZCAvIG1hbmdsZWQgLyBkcm9wcGVkIGZ1bmN0aW9uIG5hbWVzXG52YXIgUFJPUEVSID0gRVhJU1RTICYmIChmdW5jdGlvbiBzb21ldGhpbmcoKSB7IC8qIGVtcHR5ICovIH0pLm5hbWUgPT09ICdzb21ldGhpbmcnO1xudmFyIENPTkZJR1VSQUJMRSA9IEVYSVNUUyAmJiAoIURFU0NSSVBUT1JTIHx8IChERVNDUklQVE9SUyAmJiBnZXREZXNjcmlwdG9yKEZ1bmN0aW9uUHJvdG90eXBlLCAnbmFtZScpLmNvbmZpZ3VyYWJsZSkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgRVhJU1RTOiBFWElTVFMsXG4gIFBST1BFUjogUFJPUEVSLFxuICBDT05GSUdVUkFCTEU6IENPTkZJR1VSQUJMRVxufTtcbiIsInZhciBOQVRJVkVfQklORCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZScpO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgYmluZCA9IEZ1bmN0aW9uUHJvdG90eXBlLmJpbmQ7XG52YXIgY2FsbCA9IEZ1bmN0aW9uUHJvdG90eXBlLmNhbGw7XG52YXIgdW5jdXJyeVRoaXMgPSBOQVRJVkVfQklORCAmJiBiaW5kLmJpbmQoY2FsbCwgY2FsbCk7XG5cbm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX0JJTkQgPyBmdW5jdGlvbiAoZm4pIHtcbiAgcmV0dXJuIGZuICYmIHVuY3VycnlUaGlzKGZuKTtcbn0gOiBmdW5jdGlvbiAoZm4pIHtcbiAgcmV0dXJuIGZuICYmIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY2FsbC5hcHBseShmbiwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcblxudmFyIGFGdW5jdGlvbiA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gaXNDYWxsYWJsZShhcmd1bWVudCkgPyBhcmd1bWVudCA6IHVuZGVmaW5lZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWV0aG9kKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGFGdW5jdGlvbihnbG9iYWxbbmFtZXNwYWNlXSkgOiBnbG9iYWxbbmFtZXNwYWNlXSAmJiBnbG9iYWxbbmFtZXNwYWNlXVttZXRob2RdO1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBnZXRNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1ldGhvZCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gZ2V0TWV0aG9kKGl0LCBJVEVSQVRPUilcbiAgICB8fCBnZXRNZXRob2QoaXQsICdAQGl0ZXJhdG9yJylcbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0cnlUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90cnktdG8tc3RyaW5nJyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQsIHVzaW5nSXRlcmF0b3IpIHtcbiAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBnZXRJdGVyYXRvck1ldGhvZChhcmd1bWVudCkgOiB1c2luZ0l0ZXJhdG9yO1xuICBpZiAoYUNhbGxhYmxlKGl0ZXJhdG9yTWV0aG9kKSkgcmV0dXJuIGFuT2JqZWN0KGNhbGwoaXRlcmF0b3JNZXRob2QsIGFyZ3VtZW50KSk7XG4gIHRocm93IFR5cGVFcnJvcih0cnlUb1N0cmluZyhhcmd1bWVudCkgKyAnIGlzIG5vdCBpdGVyYWJsZScpO1xufTtcbiIsInZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xuXG4vLyBgR2V0TWV0aG9kYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0bWV0aG9kXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChWLCBQKSB7XG4gIHZhciBmdW5jID0gVltQXTtcbiAgcmV0dXJuIGZ1bmMgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGFDYWxsYWJsZShmdW5jKTtcbn07XG4iLCJ2YXIgY2hlY2sgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICYmIGl0Lk1hdGggPT0gTWF0aCAmJiBpdDtcbn07XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG5tb2R1bGUuZXhwb3J0cyA9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1nbG9iYWwtdGhpcyAtLSBzYWZlXG4gIGNoZWNrKHR5cGVvZiBnbG9iYWxUaGlzID09ICdvYmplY3QnICYmIGdsb2JhbFRoaXMpIHx8XG4gIGNoZWNrKHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93KSB8fFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzIC0tIHNhZmVcbiAgY2hlY2sodHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZikgfHxcbiAgY2hlY2sodHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuYyAtLSBmYWxsYmFja1xuICAoZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSkoKSB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSB1bmN1cnJ5VGhpcyh7fS5oYXNPd25Qcm9wZXJ0eSk7XG5cbi8vIGBIYXNPd25Qcm9wZXJ0eWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWhhc293bnByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5oYXNPd24gfHwgZnVuY3Rpb24gaGFzT3duKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5KHRvT2JqZWN0KGl0KSwga2V5KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYSwgYikge1xuICB2YXIgY29uc29sZSA9IGdsb2JhbC5jb25zb2xlO1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgYXJndW1lbnRzLmxlbmd0aCA9PSAxID8gY29uc29sZS5lcnJvcihhKSA6IGNvbnNvbGUuZXJyb3IoYSwgYik7XG4gIH1cbn07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdkb2N1bWVudCcsICdkb2N1bWVudEVsZW1lbnQnKTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG4vLyBUaGFua3MgdG8gSUU4IGZvciBpdHMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIURFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjcmVhdGVFbGVtZW50KCdkaXYnKSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9XG4gIH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxudmFyIE9iamVjdCA9IGdsb2JhbC5PYmplY3Q7XG52YXIgc3BsaXQgPSB1bmN1cnJ5VGhpcygnJy5zcGxpdCk7XG5cbi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gdGhyb3dzIGFuIGVycm9yIGluIHJoaW5vLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvcmhpbm8vaXNzdWVzLzM0NlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zIC0tIHNhZmVcbiAgcmV0dXJuICFPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKTtcbn0pID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjbGFzc29mKGl0KSA9PSAnU3RyaW5nJyA/IHNwbGl0KGl0LCAnJykgOiBPYmplY3QoaXQpO1xufSA6IE9iamVjdDtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgc3RvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG5cbnZhciBmdW5jdGlvblRvU3RyaW5nID0gdW5jdXJyeVRoaXMoRnVuY3Rpb24udG9TdHJpbmcpO1xuXG4vLyB0aGlzIGhlbHBlciBicm9rZW4gaW4gYGNvcmUtanNAMy40LjEtMy40LjRgLCBzbyB3ZSBjYW4ndCB1c2UgYHNoYXJlZGAgaGVscGVyXG5pZiAoIWlzQ2FsbGFibGUoc3RvcmUuaW5zcGVjdFNvdXJjZSkpIHtcbiAgc3RvcmUuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBmdW5jdGlvblRvU3RyaW5nKGl0KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZS5pbnNwZWN0U291cmNlO1xuIiwidmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG52YXIgT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQgPSAnT2JqZWN0IGFscmVhZHkgaW5pdGlhbGl6ZWQnO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xudmFyIHNldCwgZ2V0LCBoYXM7XG5cbnZhciBlbmZvcmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBoYXMoaXQpID8gZ2V0KGl0KSA6IHNldChpdCwge30pO1xufTtcblxudmFyIGdldHRlckZvciA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgc3RhdGU7XG4gICAgaWYgKCFpc09iamVjdChpdCkgfHwgKHN0YXRlID0gZ2V0KGl0KSkudHlwZSAhPT0gVFlQRSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCcpO1xuICAgIH0gcmV0dXJuIHN0YXRlO1xuICB9O1xufTtcblxuaWYgKE5BVElWRV9XRUFLX01BUCB8fCBzaGFyZWQuc3RhdGUpIHtcbiAgdmFyIHN0b3JlID0gc2hhcmVkLnN0YXRlIHx8IChzaGFyZWQuc3RhdGUgPSBuZXcgV2Vha01hcCgpKTtcbiAgdmFyIHdtZ2V0ID0gdW5jdXJyeVRoaXMoc3RvcmUuZ2V0KTtcbiAgdmFyIHdtaGFzID0gdW5jdXJyeVRoaXMoc3RvcmUuaGFzKTtcbiAgdmFyIHdtc2V0ID0gdW5jdXJyeVRoaXMoc3RvcmUuc2V0KTtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIGlmICh3bWhhcyhzdG9yZSwgaXQpKSB0aHJvdyBuZXcgVHlwZUVycm9yKE9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEKTtcbiAgICBtZXRhZGF0YS5mYWNhZGUgPSBpdDtcbiAgICB3bXNldChzdG9yZSwgaXQsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWdldChzdG9yZSwgaXQpIHx8IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gd21oYXMoc3RvcmUsIGl0KTtcbiAgfTtcbn0gZWxzZSB7XG4gIHZhciBTVEFURSA9IHNoYXJlZEtleSgnc3RhdGUnKTtcbiAgaGlkZGVuS2V5c1tTVEFURV0gPSB0cnVlO1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgaWYgKGhhc093bihpdCwgU1RBVEUpKSB0aHJvdyBuZXcgVHlwZUVycm9yKE9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEKTtcbiAgICBtZXRhZGF0YS5mYWNhZGUgPSBpdDtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoaXQsIFNUQVRFLCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gaGFzT3duKGl0LCBTVEFURSkgPyBpdFtTVEFURV0gOiB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGhhc093bihpdCwgU1RBVEUpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXQsXG4gIGdldDogZ2V0LFxuICBoYXM6IGhhcyxcbiAgZW5mb3JjZTogZW5mb3JjZSxcbiAgZ2V0dGVyRm9yOiBnZXR0ZXJGb3Jcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG90eXBlW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbi8vIGBJc0FycmF5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNhcnJheVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LWlzYXJyYXkgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGNsYXNzb2YoYXJndW1lbnQpID09ICdBcnJheSc7XG59O1xuIiwiLy8gYElzQ2FsbGFibGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc2NhbGxhYmxlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gdHlwZW9mIGFyZ3VtZW50ID09ICdmdW5jdGlvbic7XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xuXG52YXIgbm9vcCA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBlbXB0eSA9IFtdO1xudmFyIGNvbnN0cnVjdCA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnY29uc3RydWN0Jyk7XG52YXIgY29uc3RydWN0b3JSZWdFeHAgPSAvXlxccyooPzpjbGFzc3xmdW5jdGlvbilcXGIvO1xudmFyIGV4ZWMgPSB1bmN1cnJ5VGhpcyhjb25zdHJ1Y3RvclJlZ0V4cC5leGVjKTtcbnZhciBJTkNPUlJFQ1RfVE9fU1RSSU5HID0gIWNvbnN0cnVjdG9yUmVnRXhwLmV4ZWMobm9vcCk7XG5cbnZhciBpc0NvbnN0cnVjdG9yTW9kZXJuID0gZnVuY3Rpb24gaXNDb25zdHJ1Y3Rvcihhcmd1bWVudCkge1xuICBpZiAoIWlzQ2FsbGFibGUoYXJndW1lbnQpKSByZXR1cm4gZmFsc2U7XG4gIHRyeSB7XG4gICAgY29uc3RydWN0KG5vb3AsIGVtcHR5LCBhcmd1bWVudCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG52YXIgaXNDb25zdHJ1Y3RvckxlZ2FjeSA9IGZ1bmN0aW9uIGlzQ29uc3RydWN0b3IoYXJndW1lbnQpIHtcbiAgaWYgKCFpc0NhbGxhYmxlKGFyZ3VtZW50KSkgcmV0dXJuIGZhbHNlO1xuICBzd2l0Y2ggKGNsYXNzb2YoYXJndW1lbnQpKSB7XG4gICAgY2FzZSAnQXN5bmNGdW5jdGlvbic6XG4gICAgY2FzZSAnR2VuZXJhdG9yRnVuY3Rpb24nOlxuICAgIGNhc2UgJ0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24nOiByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyB3ZSBjYW4ndCBjaGVjayAucHJvdG90eXBlIHNpbmNlIGNvbnN0cnVjdG9ycyBwcm9kdWNlZCBieSAuYmluZCBoYXZlbid0IGl0XG4gICAgLy8gYEZ1bmN0aW9uI3RvU3RyaW5nYCB0aHJvd3Mgb24gc29tZSBidWlsdC1pdCBmdW5jdGlvbiBpbiBzb21lIGxlZ2FjeSBlbmdpbmVzXG4gICAgLy8gKGZvciBleGFtcGxlLCBgRE9NUXVhZGAgYW5kIHNpbWlsYXIgaW4gRkY0MS0pXG4gICAgcmV0dXJuIElOQ09SUkVDVF9UT19TVFJJTkcgfHwgISFleGVjKGNvbnN0cnVjdG9yUmVnRXhwLCBpbnNwZWN0U291cmNlKGFyZ3VtZW50KSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cbmlzQ29uc3RydWN0b3JMZWdhY3kuc2hhbSA9IHRydWU7XG5cbi8vIGBJc0NvbnN0cnVjdG9yYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNjb25zdHJ1Y3RvclxubW9kdWxlLmV4cG9ydHMgPSAhY29uc3RydWN0IHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNhbGxlZDtcbiAgcmV0dXJuIGlzQ29uc3RydWN0b3JNb2Rlcm4oaXNDb25zdHJ1Y3Rvck1vZGVybi5jYWxsKVxuICAgIHx8ICFpc0NvbnN0cnVjdG9yTW9kZXJuKE9iamVjdClcbiAgICB8fCAhaXNDb25zdHJ1Y3Rvck1vZGVybihmdW5jdGlvbiAoKSB7IGNhbGxlZCA9IHRydWU7IH0pXG4gICAgfHwgY2FsbGVkO1xufSkgPyBpc0NvbnN0cnVjdG9yTGVnYWN5IDogaXNDb25zdHJ1Y3Rvck1vZGVybjtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcblxudmFyIHJlcGxhY2VtZW50ID0gLyN8XFwucHJvdG90eXBlXFwuLztcblxudmFyIGlzRm9yY2VkID0gZnVuY3Rpb24gKGZlYXR1cmUsIGRldGVjdGlvbikge1xuICB2YXIgdmFsdWUgPSBkYXRhW25vcm1hbGl6ZShmZWF0dXJlKV07XG4gIHJldHVybiB2YWx1ZSA9PSBQT0xZRklMTCA/IHRydWVcbiAgICA6IHZhbHVlID09IE5BVElWRSA/IGZhbHNlXG4gICAgOiBpc0NhbGxhYmxlKGRldGVjdGlvbikgPyBmYWlscyhkZXRlY3Rpb24pXG4gICAgOiAhIWRldGVjdGlvbjtcbn07XG5cbnZhciBub3JtYWxpemUgPSBpc0ZvcmNlZC5ub3JtYWxpemUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHJldHVybiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlcGxhY2VtZW50LCAnLicpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG52YXIgZGF0YSA9IGlzRm9yY2VkLmRhdGEgPSB7fTtcbnZhciBOQVRJVkUgPSBpc0ZvcmNlZC5OQVRJVkUgPSAnTic7XG52YXIgUE9MWUZJTEwgPSBpc0ZvcmNlZC5QT0xZRklMTCA9ICdQJztcblxubW9kdWxlLmV4cG9ydHMgPSBpc0ZvcmNlZDtcbiIsInZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IGlzQ2FsbGFibGUoaXQpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgTUFUQ0ggPSB3ZWxsS25vd25TeW1ib2woJ21hdGNoJyk7XG5cbi8vIGBJc1JlZ0V4cGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzcmVnZXhwXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjbGFzc29mKGl0KSA9PSAnUmVnRXhwJyk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciBVU0VfU1lNQk9MX0FTX1VJRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZCcpO1xuXG52YXIgT2JqZWN0ID0gZ2xvYmFsLk9iamVjdDtcblxubW9kdWxlLmV4cG9ydHMgPSBVU0VfU1lNQk9MX0FTX1VJRCA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgJFN5bWJvbCA9IGdldEJ1aWx0SW4oJ1N5bWJvbCcpO1xuICByZXR1cm4gaXNDYWxsYWJsZSgkU3ltYm9sKSAmJiBpc1Byb3RvdHlwZU9mKCRTeW1ib2wucHJvdG90eXBlLCBPYmplY3QoaXQpKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdHJ5VG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHJ5LXRvLXN0cmluZycpO1xudmFyIGlzQXJyYXlJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIGdldEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvcicpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBpdGVyYXRvckNsb3NlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG52YXIgUmVzdWx0ID0gZnVuY3Rpb24gKHN0b3BwZWQsIHJlc3VsdCkge1xuICB0aGlzLnN0b3BwZWQgPSBzdG9wcGVkO1xuICB0aGlzLnJlc3VsdCA9IHJlc3VsdDtcbn07XG5cbnZhciBSZXN1bHRQcm90b3R5cGUgPSBSZXN1bHQucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgdW5ib3VuZEZ1bmN0aW9uLCBvcHRpb25zKSB7XG4gIHZhciB0aGF0ID0gb3B0aW9ucyAmJiBvcHRpb25zLnRoYXQ7XG4gIHZhciBBU19FTlRSSUVTID0gISEob3B0aW9ucyAmJiBvcHRpb25zLkFTX0VOVFJJRVMpO1xuICB2YXIgSVNfSVRFUkFUT1IgPSAhIShvcHRpb25zICYmIG9wdGlvbnMuSVNfSVRFUkFUT1IpO1xuICB2YXIgSU5URVJSVVBURUQgPSAhIShvcHRpb25zICYmIG9wdGlvbnMuSU5URVJSVVBURUQpO1xuICB2YXIgZm4gPSBiaW5kKHVuYm91bmRGdW5jdGlvbiwgdGhhdCk7XG4gIHZhciBpdGVyYXRvciwgaXRlckZuLCBpbmRleCwgbGVuZ3RoLCByZXN1bHQsIG5leHQsIHN0ZXA7XG5cbiAgdmFyIHN0b3AgPSBmdW5jdGlvbiAoY29uZGl0aW9uKSB7XG4gICAgaWYgKGl0ZXJhdG9yKSBpdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCAnbm9ybWFsJywgY29uZGl0aW9uKTtcbiAgICByZXR1cm4gbmV3IFJlc3VsdCh0cnVlLCBjb25kaXRpb24pO1xuICB9O1xuXG4gIHZhciBjYWxsRm4gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAoQVNfRU5UUklFUykge1xuICAgICAgYW5PYmplY3QodmFsdWUpO1xuICAgICAgcmV0dXJuIElOVEVSUlVQVEVEID8gZm4odmFsdWVbMF0sIHZhbHVlWzFdLCBzdG9wKSA6IGZuKHZhbHVlWzBdLCB2YWx1ZVsxXSk7XG4gICAgfSByZXR1cm4gSU5URVJSVVBURUQgPyBmbih2YWx1ZSwgc3RvcCkgOiBmbih2YWx1ZSk7XG4gIH07XG5cbiAgaWYgKElTX0lURVJBVE9SKSB7XG4gICAgaXRlcmF0b3IgPSBpdGVyYWJsZTtcbiAgfSBlbHNlIHtcbiAgICBpdGVyRm4gPSBnZXRJdGVyYXRvck1ldGhvZChpdGVyYWJsZSk7XG4gICAgaWYgKCFpdGVyRm4pIHRocm93IFR5cGVFcnJvcih0cnlUb1N0cmluZyhpdGVyYWJsZSkgKyAnIGlzIG5vdCBpdGVyYWJsZScpO1xuICAgIC8vIG9wdGltaXNhdGlvbiBmb3IgYXJyYXkgaXRlcmF0b3JzXG4gICAgaWYgKGlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyRm4pKSB7XG4gICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoaXRlcmFibGUpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICByZXN1bHQgPSBjYWxsRm4oaXRlcmFibGVbaW5kZXhdKTtcbiAgICAgICAgaWYgKHJlc3VsdCAmJiBpc1Byb3RvdHlwZU9mKFJlc3VsdFByb3RvdHlwZSwgcmVzdWx0KSkgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0gcmV0dXJuIG5ldyBSZXN1bHQoZmFsc2UpO1xuICAgIH1cbiAgICBpdGVyYXRvciA9IGdldEl0ZXJhdG9yKGl0ZXJhYmxlLCBpdGVyRm4pO1xuICB9XG5cbiAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7XG4gIHdoaWxlICghKHN0ZXAgPSBjYWxsKG5leHQsIGl0ZXJhdG9yKSkuZG9uZSkge1xuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSBjYWxsRm4oc3RlcC52YWx1ZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsICd0aHJvdycsIGVycm9yKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgPT0gJ29iamVjdCcgJiYgcmVzdWx0ICYmIGlzUHJvdG90eXBlT2YoUmVzdWx0UHJvdG90eXBlLCByZXN1bHQpKSByZXR1cm4gcmVzdWx0O1xuICB9IHJldHVybiBuZXcgUmVzdWx0KGZhbHNlKTtcbn07XG4iLCJ2YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGtpbmQsIHZhbHVlKSB7XG4gIHZhciBpbm5lclJlc3VsdCwgaW5uZXJFcnJvcjtcbiAgYW5PYmplY3QoaXRlcmF0b3IpO1xuICB0cnkge1xuICAgIGlubmVyUmVzdWx0ID0gZ2V0TWV0aG9kKGl0ZXJhdG9yLCAncmV0dXJuJyk7XG4gICAgaWYgKCFpbm5lclJlc3VsdCkge1xuICAgICAgaWYgKGtpbmQgPT09ICd0aHJvdycpIHRocm93IHZhbHVlO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBpbm5lclJlc3VsdCA9IGNhbGwoaW5uZXJSZXN1bHQsIGl0ZXJhdG9yKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpbm5lckVycm9yID0gdHJ1ZTtcbiAgICBpbm5lclJlc3VsdCA9IGVycm9yO1xuICB9XG4gIGlmIChraW5kID09PSAndGhyb3cnKSB0aHJvdyB2YWx1ZTtcbiAgaWYgKGlubmVyRXJyb3IpIHRocm93IGlubmVyUmVzdWx0O1xuICBhbk9iamVjdChpbm5lclJlc3VsdCk7XG4gIHJldHVybiB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gZmFsc2U7XG5cbi8vIGAlSXRlcmF0b3JQcm90b3R5cGUlYCBvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJWl0ZXJhdG9ycHJvdG90eXBlJS1vYmplY3RcbnZhciBJdGVyYXRvclByb3RvdHlwZSwgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlLCBhcnJheUl0ZXJhdG9yO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1hcnJheS1wcm90b3R5cGUta2V5cyAtLSBzYWZlICovXG5pZiAoW10ua2V5cykge1xuICBhcnJheUl0ZXJhdG9yID0gW10ua2V5cygpO1xuICAvLyBTYWZhcmkgOCBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbiAgaWYgKCEoJ25leHQnIGluIGFycmF5SXRlcmF0b3IpKSBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gdHJ1ZTtcbiAgZWxzZSB7XG4gICAgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoZ2V0UHJvdG90eXBlT2YoYXJyYXlJdGVyYXRvcikpO1xuICAgIGlmIChQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUpIEl0ZXJhdG9yUHJvdG90eXBlID0gUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG59XG5cbnZhciBORVdfSVRFUkFUT1JfUFJPVE9UWVBFID0gSXRlcmF0b3JQcm90b3R5cGUgPT0gdW5kZWZpbmVkIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRlc3QgPSB7fTtcbiAgLy8gRkY0NC0gbGVnYWN5IGl0ZXJhdG9ycyBjYXNlXG4gIHJldHVybiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0uY2FsbCh0ZXN0KSAhPT0gdGVzdDtcbn0pO1xuXG5pZiAoTkVXX0lURVJBVE9SX1BST1RPVFlQRSkgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbmVsc2UgaWYgKElTX1BVUkUpIEl0ZXJhdG9yUHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcblxuLy8gYCVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSVpdGVyYXRvcnByb3RvdHlwZSUtQEBpdGVyYXRvclxuaWYgKCFpc0NhbGxhYmxlKEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSkpIHtcbiAgcmVkZWZpbmUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgSXRlcmF0b3JQcm90b3R5cGU6IEl0ZXJhdG9yUHJvdG90eXBlLFxuICBCVUdHWV9TQUZBUklfSVRFUkFUT1JTOiBCVUdHWV9TQUZBUklfSVRFUkFUT1JTXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcblxuLy8gYExlbmd0aE9mQXJyYXlMaWtlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbGVuZ3Rob2ZhcnJheWxpa2Vcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gdG9MZW5ndGgob2JqLmxlbmd0aCk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpLnNldDtcbnZhciBJU19JT1MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcycpO1xudmFyIElTX0lPU19QRUJCTEUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcy1wZWJibGUnKTtcbnZhciBJU19XRUJPU19XRUJLSVQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLXdlYm9zLXdlYmtpdCcpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcblxudmFyIE11dGF0aW9uT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xuLy8gTm9kZS5qcyAxMSBzaG93cyBFeHBlcmltZW50YWxXYXJuaW5nIG9uIGdldHRpbmcgYHF1ZXVlTWljcm90YXNrYFxudmFyIHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihnbG9iYWwsICdxdWV1ZU1pY3JvdGFzaycpO1xudmFyIHF1ZXVlTWljcm90YXNrID0gcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yICYmIHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvci52YWx1ZTtcblxudmFyIGZsdXNoLCBoZWFkLCBsYXN0LCBub3RpZnksIHRvZ2dsZSwgbm9kZSwgcHJvbWlzZSwgdGhlbjtcblxuLy8gbW9kZXJuIGVuZ2luZXMgaGF2ZSBxdWV1ZU1pY3JvdGFzayBtZXRob2RcbmlmICghcXVldWVNaWNyb3Rhc2spIHtcbiAgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKElTX05PREUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkgcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZSAoaGVhZCkge1xuICAgICAgZm4gPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlciwgZXhjZXB0IGlPUyAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgLy8gYWxzbyBleGNlcHQgV2ViT1MgV2Via2l0IGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84OThcbiAgaWYgKCFJU19JT1MgJiYgIUlTX05PREUgJiYgIUlTX1dFQk9TX1dFQktJVCAmJiBNdXRhdGlvbk9ic2VydmVyICYmIGRvY3VtZW50KSB7XG4gICAgdG9nZ2xlID0gdHJ1ZTtcbiAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBNdXRhdGlvbk9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICAgIH07XG4gIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZiAoIUlTX0lPU19QRUJCTEUgJiYgUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpIHtcbiAgICAvLyBQcm9taXNlLnJlc29sdmUgd2l0aG91dCBhbiBhcmd1bWVudCB0aHJvd3MgYW4gZXJyb3IgaW4gTEcgV2ViT1MgMlxuICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICAvLyB3b3JrYXJvdW5kIG9mIFdlYktpdCB+IGlPUyBTYWZhcmkgMTAuMSBidWdcbiAgICBwcm9taXNlLmNvbnN0cnVjdG9yID0gUHJvbWlzZTtcbiAgICB0aGVuID0gYmluZChwcm9taXNlLnRoZW4sIHByb21pc2UpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoZW4oZmx1c2gpO1xuICAgIH07XG4gIC8vIE5vZGUuanMgd2l0aG91dCBwcm9taXNlc1xuICB9IGVsc2UgaWYgKElTX05PREUpIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOlxuICAvLyAtIHNldEltbWVkaWF0ZVxuICAvLyAtIE1lc3NhZ2VDaGFubmVsXG4gIC8vIC0gd2luZG93LnBvc3RNZXNzYWdcbiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2VcbiAgLy8gLSBzZXRUaW1lb3V0XG4gIH0gZWxzZSB7XG4gICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmJpbmQoZ2xvYmFsKVxuICAgIG1hY3JvdGFzayA9IGJpbmQobWFjcm90YXNrLCBnbG9iYWwpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG1hY3JvdGFzayhmbHVzaCk7XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHF1ZXVlTWljcm90YXNrIHx8IGZ1bmN0aW9uIChmbikge1xuICB2YXIgdGFzayA9IHsgZm46IGZuLCBuZXh0OiB1bmRlZmluZWQgfTtcbiAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gIGlmICghaGVhZCkge1xuICAgIGhlYWQgPSB0YXNrO1xuICAgIG5vdGlmeSgpO1xuICB9IGxhc3QgPSB0YXNrO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLlByb21pc2U7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1zeW1ib2wgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eXN5bWJvbHMgLS0gcmVxdWlyZWQgZm9yIHRlc3Rpbmdcbm1vZHVsZS5leHBvcnRzID0gISFPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBzeW1ib2wgPSBTeW1ib2woKTtcbiAgLy8gQ2hyb21lIDM4IFN5bWJvbCBoYXMgaW5jb3JyZWN0IHRvU3RyaW5nIGNvbnZlcnNpb25cbiAgLy8gYGdldC1vd24tcHJvcGVydHktc3ltYm9sc2AgcG9seWZpbGwgc3ltYm9scyBjb252ZXJ0ZWQgdG8gb2JqZWN0IGFyZSBub3QgU3ltYm9sIGluc3RhbmNlc1xuICByZXR1cm4gIVN0cmluZyhzeW1ib2wpIHx8ICEoT2JqZWN0KHN5bWJvbCkgaW5zdGFuY2VvZiBTeW1ib2wpIHx8XG4gICAgLy8gQ2hyb21lIDM4LTQwIHN5bWJvbHMgYXJlIG5vdCBpbmhlcml0ZWQgZnJvbSBET00gY29sbGVjdGlvbnMgcHJvdG90eXBlcyB0byBpbnN0YW5jZXNcbiAgICAhU3ltYm9sLnNoYW0gJiYgVjhfVkVSU0lPTiAmJiBWOF9WRVJTSU9OIDwgNDE7XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcblxudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0NhbGxhYmxlKFdlYWtNYXApICYmIC9uYXRpdmUgY29kZS8udGVzdChpbnNwZWN0U291cmNlKFdlYWtNYXApKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xuXG52YXIgUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkge1xuICAgIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUNhbGxhYmxlKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCA9IGFDYWxsYWJsZShyZWplY3QpO1xufTtcblxuLy8gYE5ld1Byb21pc2VDYXBhYmlsaXR5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbmV3cHJvbWlzZWNhcGFiaWxpdHlcbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykge1xuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXNSZWdFeHAoaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFwiVGhlIG1ldGhvZCBkb2Vzbid0IGFjY2VwdCByZWd1bGFyIGV4cHJlc3Npb25zXCIpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCIvKiBnbG9iYWwgQWN0aXZlWE9iamVjdCAtLSBvbGQgSUUsIFdTSCAqL1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnRpZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBkb2N1bWVudENyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xuXG52YXIgR1QgPSAnPic7XG52YXIgTFQgPSAnPCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgU0NSSVBUID0gJ3NjcmlwdCc7XG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG5cbnZhciBFbXB0eUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuXG52YXIgc2NyaXB0VGFnID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIExUICsgU0NSSVBUICsgR1QgKyBjb250ZW50ICsgTFQgKyAnLycgKyBTQ1JJUFQgKyBHVDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBBY3RpdmVYIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCA9IGZ1bmN0aW9uIChhY3RpdmVYRG9jdW1lbnQpIHtcbiAgYWN0aXZlWERvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnJykpO1xuICBhY3RpdmVYRG9jdW1lbnQuY2xvc2UoKTtcbiAgdmFyIHRlbXAgPSBhY3RpdmVYRG9jdW1lbnQucGFyZW50V2luZG93Lk9iamVjdDtcbiAgYWN0aXZlWERvY3VtZW50ID0gbnVsbDsgLy8gYXZvaWQgbWVtb3J5IGxlYWtcbiAgcmV0dXJuIHRlbXA7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgdmFyIEpTID0gJ2phdmEnICsgU0NSSVBUICsgJzonO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBodG1sLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy80NzVcbiAgaWZyYW1lLnNyYyA9IFN0cmluZyhKUyk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCdkb2N1bWVudC5GPU9iamVjdCcpKTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgcmV0dXJuIGlmcmFtZURvY3VtZW50LkY7XG59O1xuXG4vLyBDaGVjayBmb3IgZG9jdW1lbnQuZG9tYWluIGFuZCBhY3RpdmUgeCBzdXBwb3J0XG4vLyBObyBuZWVkIHRvIHVzZSBhY3RpdmUgeCBhcHByb2FjaCB3aGVuIGRvY3VtZW50LmRvbWFpbiBpcyBub3Qgc2V0XG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8xNTBcbi8vIHZhcmlhdGlvbiBvZiBodHRwczovL2dpdGh1Yi5jb20va2l0Y2FtYnJpZGdlL2VzNS1zaGltL2NvbW1pdC80ZjczOGFjMDY2MzQ2XG4vLyBhdm9pZCBJRSBHQyBidWdcbnZhciBhY3RpdmVYRG9jdW1lbnQ7XG52YXIgTnVsbFByb3RvT2JqZWN0ID0gZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIGFjdGl2ZVhEb2N1bWVudCA9IG5ldyBBY3RpdmVYT2JqZWN0KCdodG1sZmlsZScpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBpZ25vcmUgKi8gfVxuICBOdWxsUHJvdG9PYmplY3QgPSB0eXBlb2YgZG9jdW1lbnQgIT0gJ3VuZGVmaW5lZCdcbiAgICA/IGRvY3VtZW50LmRvbWFpbiAmJiBhY3RpdmVYRG9jdW1lbnRcbiAgICAgID8gTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpIC8vIG9sZCBJRVxuICAgICAgOiBOdWxsUHJvdG9PYmplY3RWaWFJRnJhbWUoKVxuICAgIDogTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpOyAvLyBXU0hcbiAgdmFyIGxlbmd0aCA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSBkZWxldGUgTnVsbFByb3RvT2JqZWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbbGVuZ3RoXV07XG4gIHJldHVybiBOdWxsUHJvdG9PYmplY3QoKTtcbn07XG5cbmhpZGRlbktleXNbSUVfUFJPVE9dID0gdHJ1ZTtcblxuLy8gYE9iamVjdC5jcmVhdGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eUNvbnN0cnVjdG9yW1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHlDb25zdHJ1Y3RvcigpO1xuICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gTnVsbFByb3RvT2JqZWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkZWZpbmVQcm9wZXJ0aWVzTW9kdWxlLmYocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy92OC1wcm90b3R5cGUtZGVmaW5lLWJ1ZycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnRpZXMgLS0gc2FmZVxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgJiYgIVY4X1BST1RPVFlQRV9ERUZJTkVfQlVHID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBwcm9wcyA9IHRvSW5kZXhlZE9iamVjdChQcm9wZXJ0aWVzKTtcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihPLCBrZXkgPSBrZXlzW2luZGV4KytdLCBwcm9wc1trZXldKTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG52YXIgVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdjgtcHJvdG90eXBlLWRlZmluZS1idWcnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xuXG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBFTlVNRVJBQkxFID0gJ2VudW1lcmFibGUnO1xudmFyIENPTkZJR1VSQUJMRSA9ICdjb25maWd1cmFibGUnO1xudmFyIFdSSVRBQkxFID0gJ3dyaXRhYmxlJztcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyA/IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKHR5cGVvZiBPID09PSAnZnVuY3Rpb24nICYmIFAgPT09ICdwcm90b3R5cGUnICYmICd2YWx1ZScgaW4gQXR0cmlidXRlcyAmJiBXUklUQUJMRSBpbiBBdHRyaWJ1dGVzICYmICFBdHRyaWJ1dGVzW1dSSVRBQkxFXSkge1xuICAgIHZhciBjdXJyZW50ID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKTtcbiAgICBpZiAoY3VycmVudCAmJiBjdXJyZW50W1dSSVRBQkxFXSkge1xuICAgICAgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gICAgICBBdHRyaWJ1dGVzID0ge1xuICAgICAgICBjb25maWd1cmFibGU6IENPTkZJR1VSQUJMRSBpbiBBdHRyaWJ1dGVzID8gQXR0cmlidXRlc1tDT05GSUdVUkFCTEVdIDogY3VycmVudFtDT05GSUdVUkFCTEVdLFxuICAgICAgICBlbnVtZXJhYmxlOiBFTlVNRVJBQkxFIGluIEF0dHJpYnV0ZXMgPyBBdHRyaWJ1dGVzW0VOVU1FUkFCTEVdIDogY3VycmVudFtFTlVNRVJBQkxFXSxcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlXG4gICAgICB9O1xuICAgIH1cbiAgfSByZXR1cm4gJGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xufSA6ICRkZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiAkZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCcpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIFAgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhc093bihPLCBQKSkgcmV0dXJuIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcighY2FsbChwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mLCBPLCBQKSwgT1tQXSk7XG59O1xuIiwiLyogZXNsaW50LWRpc2FibGUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5bmFtZXMgLS0gc2FmZSAqL1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZS1zaW1wbGUnKTtcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlOYW1lcyhpdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIGFycmF5U2xpY2Uod2luZG93TmFtZXMpO1xuICB9XG59O1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgY2xhc3NvZihpdCkgPT0gJ1dpbmRvdydcbiAgICA/IGdldFdpbmRvd05hbWVzKGl0KVxuICAgIDogJGdldE93blByb3BlcnR5TmFtZXModG9JbmRleGVkT2JqZWN0KGl0KSk7XG59O1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxudmFyIGhpZGRlbktleXMgPSBlbnVtQnVnS2V5cy5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHluYW1lcyAtLSBzYWZlXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5c3ltYm9scyAtLSBzYWZlXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXInKTtcblxudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xudmFyIE9iamVjdCA9IGdsb2JhbC5PYmplY3Q7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLy8gYE9iamVjdC5nZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRwcm90b3R5cGVvZlxubW9kdWxlLmV4cG9ydHMgPSBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiAoTykge1xuICB2YXIgb2JqZWN0ID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXNPd24ob2JqZWN0LCBJRV9QUk9UTykpIHJldHVybiBvYmplY3RbSUVfUFJPVE9dO1xuICB2YXIgY29uc3RydWN0b3IgPSBvYmplY3QuY29uc3RydWN0b3I7XG4gIGlmIChpc0NhbGxhYmxlKGNvbnN0cnVjdG9yKSAmJiBvYmplY3QgaW5zdGFuY2VvZiBjb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBjb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvdHlwZSA6IG51bGw7XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVuY3VycnlUaGlzKHt9LmlzUHJvdG90eXBlT2YpO1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSAhaGFzT3duKGhpZGRlbktleXMsIGtleSkgJiYgaGFzT3duKE8sIGtleSkgJiYgcHVzaChyZXN1bHQsIGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXNPd24oTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+aW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcHVzaChyZXN1bHQsIGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG4vLyBgT2JqZWN0LmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1rZXlzIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBOYXNob3JuIH4gSkRLOCBidWdcbnZhciBOQVNIT1JOX0JVRyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiAhJHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoeyAxOiAyIH0sIDEpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUucHJvcGVydHlpc2VudW1lcmFibGVcbmV4cG9ydHMuZiA9IE5BU0hPUk5fQlVHID8gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikge1xuICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0aGlzLCBWKTtcbiAgcmV0dXJuICEhZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLmVudW1lcmFibGU7XG59IDogJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gLS0gc2FmZSAqL1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFQb3NzaWJsZVByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnNldHByb3RvdHlwZW9mXG4vLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3Qtc2V0cHJvdG90eXBlb2YgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gZnVuY3Rpb24gKCkge1xuICB2YXIgQ09SUkVDVF9TRVRURVIgPSBmYWxzZTtcbiAgdmFyIHRlc3QgPSB7fTtcbiAgdmFyIHNldHRlcjtcbiAgdHJ5IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG4gICAgc2V0dGVyID0gdW5jdXJyeVRoaXMoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0KTtcbiAgICBzZXR0ZXIodGVzdCwgW10pO1xuICAgIENPUlJFQ1RfU0VUVEVSID0gdGVzdCBpbnN0YW5jZW9mIEFycmF5O1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgIGFuT2JqZWN0KE8pO1xuICAgIGFQb3NzaWJsZVByb3RvdHlwZShwcm90byk7XG4gICAgaWYgKENPUlJFQ1RfU0VUVEVSKSBzZXR0ZXIoTywgcHJvdG8pO1xuICAgIGVsc2UgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICByZXR1cm4gTztcbiAgfTtcbn0oKSA6IHVuZGVmaW5lZCk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJykuZjtcblxudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gdW5jdXJyeVRoaXMoJHByb3BlcnR5SXNFbnVtZXJhYmxlKTtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG5cbi8vIGBPYmplY3QueyBlbnRyaWVzLCB2YWx1ZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUT19FTlRSSUVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChpdCk7XG4gICAgdmFyIGtleXMgPSBvYmplY3RLZXlzKE8pO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGkpIHtcbiAgICAgIGtleSA9IGtleXNbaSsrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgcHJvcGVydHlJc0VudW1lcmFibGUoTywga2V5KSkge1xuICAgICAgICBwdXNoKHJlc3VsdCwgVE9fRU5UUklFUyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBPYmplY3QuZW50cmllc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmVudHJpZXNcbiAgZW50cmllczogY3JlYXRlTWV0aG9kKHRydWUpLFxuICAvLyBgT2JqZWN0LnZhbHVlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnZhbHVlc1xuICB2YWx1ZXM6IGNyZWF0ZU1ldGhvZChmYWxzZSlcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gVE9fU1RSSU5HX1RBR19TVVBQT1JUID8ge30udG9TdHJpbmcgOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcblxuLy8gYE9yZGluYXJ5VG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vcmRpbmFyeXRvcHJpbWl0aXZlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnB1dCwgcHJlZikge1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKHByZWYgPT09ICdzdHJpbmcnICYmIGlzQ2FsbGFibGUoZm4gPSBpbnB1dC50b1N0cmluZykgJiYgIWlzT2JqZWN0KHZhbCA9IGNhbGwoZm4sIGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmIChpc0NhbGxhYmxlKGZuID0gaW5wdXQudmFsdWVPZikgJiYgIWlzT2JqZWN0KHZhbCA9IGNhbGwoZm4sIGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmIChwcmVmICE9PSAnc3RyaW5nJyAmJiBpc0NhbGxhYmxlKGZuID0gaW5wdXQudG9TdHJpbmcpICYmICFpc09iamVjdCh2YWwgPSBjYWxsKGZuLCBpbnB1dCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbnZhciBjb25jYXQgPSB1bmN1cnJ5VGhpcyhbXS5jb25jYXQpO1xuXG4vLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnb3duS2V5cycpIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8gY29uY2F0KGtleXMsIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdsb2JhbDtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlcnJvcjogZmFsc2UsIHZhbHVlOiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4geyBlcnJvcjogdHJ1ZSwgdmFsdWU6IGVycm9yIH07XG4gIH1cbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIGFuT2JqZWN0KEMpO1xuICBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykgcmV0dXJuIHg7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuIiwidmFyIFF1ZXVlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmhlYWQgPSBudWxsO1xuICB0aGlzLnRhaWwgPSBudWxsO1xufTtcblxuUXVldWUucHJvdG90eXBlID0ge1xuICBhZGQ6IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgdmFyIGVudHJ5ID0geyBpdGVtOiBpdGVtLCBuZXh0OiBudWxsIH07XG4gICAgaWYgKHRoaXMuaGVhZCkgdGhpcy50YWlsLm5leHQgPSBlbnRyeTtcbiAgICBlbHNlIHRoaXMuaGVhZCA9IGVudHJ5O1xuICAgIHRoaXMudGFpbCA9IGVudHJ5O1xuICB9LFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZW50cnkgPSB0aGlzLmhlYWQ7XG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICB0aGlzLmhlYWQgPSBlbnRyeS5uZXh0O1xuICAgICAgaWYgKHRoaXMudGFpbCA9PT0gZW50cnkpIHRoaXMudGFpbCA9IG51bGw7XG4gICAgICByZXR1cm4gZW50cnkuaXRlbTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUXVldWU7XG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBvcHRpb25zKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpLkNPTkZJR1VSQUJMRTtcblxudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBlbmZvcmNlSW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZW5mb3JjZTtcbnZhciBURU1QTEFURSA9IFN0cmluZyhTdHJpbmcpLnNwbGl0KCdTdHJpbmcnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgdmFyIHVuc2FmZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMudW5zYWZlIDogZmFsc2U7XG4gIHZhciBzaW1wbGUgPSBvcHRpb25zID8gISFvcHRpb25zLmVudW1lcmFibGUgOiBmYWxzZTtcbiAgdmFyIG5vVGFyZ2V0R2V0ID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5ub1RhcmdldEdldCA6IGZhbHNlO1xuICB2YXIgbmFtZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5uYW1lICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm5hbWUgOiBrZXk7XG4gIHZhciBzdGF0ZTtcbiAgaWYgKGlzQ2FsbGFibGUodmFsdWUpKSB7XG4gICAgaWYgKFN0cmluZyhuYW1lKS5zbGljZSgwLCA3KSA9PT0gJ1N5bWJvbCgnKSB7XG4gICAgICBuYW1lID0gJ1snICsgU3RyaW5nKG5hbWUpLnJlcGxhY2UoL15TeW1ib2xcXCgoW14pXSopXFwpLywgJyQxJykgKyAnXSc7XG4gICAgfVxuICAgIGlmICghaGFzT3duKHZhbHVlLCAnbmFtZScpIHx8IChDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSAmJiB2YWx1ZS5uYW1lICE9PSBuYW1lKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHZhbHVlLCAnbmFtZScsIG5hbWUpO1xuICAgIH1cbiAgICBzdGF0ZSA9IGVuZm9yY2VJbnRlcm5hbFN0YXRlKHZhbHVlKTtcbiAgICBpZiAoIXN0YXRlLnNvdXJjZSkge1xuICAgICAgc3RhdGUuc291cmNlID0gVEVNUExBVEUuam9pbih0eXBlb2YgbmFtZSA9PSAnc3RyaW5nJyA/IG5hbWUgOiAnJyk7XG4gICAgfVxuICB9XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgICBlbHNlIHNldEdsb2JhbChrZXksIHZhbHVlKTtcbiAgICByZXR1cm47XG4gIH0gZWxzZSBpZiAoIXVuc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gIH0gZWxzZSBpZiAoIW5vVGFyZ2V0R2V0ICYmIE9ba2V5XSkge1xuICAgIHNpbXBsZSA9IHRydWU7XG4gIH1cbiAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gIGVsc2UgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KE8sIGtleSwgdmFsdWUpO1xuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gaXNDYWxsYWJsZSh0aGlzKSAmJiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNvdXJjZSB8fCBpbnNwZWN0U291cmNlKHRoaXMpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSByZWdleHAvbm8tZW1wdHktY2FwdHVyaW5nLWdyb3VwLCByZWdleHAvbm8tZW1wdHktZ3JvdXAsIHJlZ2V4cC9uby1sYXp5LWVuZHMgLS0gdGVzdGluZyAqL1xuLyogZXNsaW50LWRpc2FibGUgcmVnZXhwL25vLXVzZWxlc3MtcXVhbnRpZmllciAtLSB0ZXN0aW5nICovXG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG52YXIgc3RpY2t5SGVscGVycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtc3RpY2t5LWhlbHBlcnMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJykuZ2V0O1xudmFyIFVOU1VQUE9SVEVEX0RPVF9BTEwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLWRvdC1hbGwnKTtcbnZhciBVTlNVUFBPUlRFRF9OQ0cgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLW5jZycpO1xuXG52YXIgbmF0aXZlUmVwbGFjZSA9IHNoYXJlZCgnbmF0aXZlLXN0cmluZy1yZXBsYWNlJywgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKTtcbnZhciBuYXRpdmVFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xudmFyIHBhdGNoZWRFeGVjID0gbmF0aXZlRXhlYztcbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIGluZGV4T2YgPSB1bmN1cnJ5VGhpcygnJy5pbmRleE9mKTtcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbnZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUxID0gL2EvO1xuICB2YXIgcmUyID0gL2IqL2c7XG4gIGNhbGwobmF0aXZlRXhlYywgcmUxLCAnYScpO1xuICBjYWxsKG5hdGl2ZUV4ZWMsIHJlMiwgJ2EnKTtcbiAgcmV0dXJuIHJlMS5sYXN0SW5kZXggIT09IDAgfHwgcmUyLmxhc3RJbmRleCAhPT0gMDtcbn0pKCk7XG5cbnZhciBVTlNVUFBPUlRFRF9ZID0gc3RpY2t5SGVscGVycy5CUk9LRU5fQ0FSRVQ7XG5cbi8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwLCBjb3BpZWQgZnJvbSBlczUtc2hpbSdzIFN0cmluZyNzcGxpdCBwYXRjaC5cbnZhciBOUENHX0lOQ0xVREVEID0gLygpPz8vLmV4ZWMoJycpWzFdICE9PSB1bmRlZmluZWQ7XG5cbnZhciBQQVRDSCA9IFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyB8fCBOUENHX0lOQ0xVREVEIHx8IFVOU1VQUE9SVEVEX1kgfHwgVU5TVVBQT1JURURfRE9UX0FMTCB8fCBVTlNVUFBPUlRFRF9OQ0c7XG5cbmlmIChQQVRDSCkge1xuICBwYXRjaGVkRXhlYyA9IGZ1bmN0aW9uIGV4ZWMoc3RyaW5nKSB7XG4gICAgdmFyIHJlID0gdGhpcztcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHJlKTtcbiAgICB2YXIgc3RyID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICB2YXIgcmF3ID0gc3RhdGUucmF3O1xuICAgIHZhciByZXN1bHQsIHJlQ29weSwgbGFzdEluZGV4LCBtYXRjaCwgaSwgb2JqZWN0LCBncm91cDtcblxuICAgIGlmIChyYXcpIHtcbiAgICAgIHJhdy5sYXN0SW5kZXggPSByZS5sYXN0SW5kZXg7XG4gICAgICByZXN1bHQgPSBjYWxsKHBhdGNoZWRFeGVjLCByYXcsIHN0cik7XG4gICAgICByZS5sYXN0SW5kZXggPSByYXcubGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICB2YXIgZ3JvdXBzID0gc3RhdGUuZ3JvdXBzO1xuICAgIHZhciBzdGlja3kgPSBVTlNVUFBPUlRFRF9ZICYmIHJlLnN0aWNreTtcbiAgICB2YXIgZmxhZ3MgPSBjYWxsKHJlZ2V4cEZsYWdzLCByZSk7XG4gICAgdmFyIHNvdXJjZSA9IHJlLnNvdXJjZTtcbiAgICB2YXIgY2hhcnNBZGRlZCA9IDA7XG4gICAgdmFyIHN0ckNvcHkgPSBzdHI7XG5cbiAgICBpZiAoc3RpY2t5KSB7XG4gICAgICBmbGFncyA9IHJlcGxhY2UoZmxhZ3MsICd5JywgJycpO1xuICAgICAgaWYgKGluZGV4T2YoZmxhZ3MsICdnJykgPT09IC0xKSB7XG4gICAgICAgIGZsYWdzICs9ICdnJztcbiAgICAgIH1cblxuICAgICAgc3RyQ29weSA9IHN0cmluZ1NsaWNlKHN0ciwgcmUubGFzdEluZGV4KTtcbiAgICAgIC8vIFN1cHBvcnQgYW5jaG9yZWQgc3RpY2t5IGJlaGF2aW9yLlxuICAgICAgaWYgKHJlLmxhc3RJbmRleCA+IDAgJiYgKCFyZS5tdWx0aWxpbmUgfHwgcmUubXVsdGlsaW5lICYmIGNoYXJBdChzdHIsIHJlLmxhc3RJbmRleCAtIDEpICE9PSAnXFxuJykpIHtcbiAgICAgICAgc291cmNlID0gJyg/OiAnICsgc291cmNlICsgJyknO1xuICAgICAgICBzdHJDb3B5ID0gJyAnICsgc3RyQ29weTtcbiAgICAgICAgY2hhcnNBZGRlZCsrO1xuICAgICAgfVxuICAgICAgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIHN0ciBzbGljaW5nLCB0b1xuICAgICAgLy8gc2ltdWxhdGUgdGhlICd5JyBmbGFnLlxuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXig/OicgKyBzb3VyY2UgKyAnKScsIGZsYWdzKTtcbiAgICB9XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyBzb3VyY2UgKyAnJCg/IVxcXFxzKScsIGZsYWdzKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmUubGFzdEluZGV4O1xuXG4gICAgbWF0Y2ggPSBjYWxsKG5hdGl2ZUV4ZWMsIHN0aWNreSA/IHJlQ29weSA6IHJlLCBzdHJDb3B5KTtcblxuICAgIGlmIChzdGlja3kpIHtcbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBtYXRjaC5pbnB1dCA9IHN0cmluZ1NsaWNlKG1hdGNoLmlucHV0LCBjaGFyc0FkZGVkKTtcbiAgICAgICAgbWF0Y2hbMF0gPSBzdHJpbmdTbGljZShtYXRjaFswXSwgY2hhcnNBZGRlZCk7XG4gICAgICAgIG1hdGNoLmluZGV4ID0gcmUubGFzdEluZGV4O1xuICAgICAgICByZS5sYXN0SW5kZXggKz0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgfSBlbHNlIHJlLmxhc3RJbmRleCA9IDA7XG4gICAgfSBlbHNlIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcbiAgICAgIHJlLmxhc3RJbmRleCA9IHJlLmdsb2JhbCA/IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIDogbGFzdEluZGV4O1xuICAgIH1cbiAgICBpZiAoTlBDR19JTkNMVURFRCAmJiBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYFxuICAgICAgLy8gZm9yIE5QQ0csIGxpa2UgSUU4LiBOT1RFOiBUaGlzIGRvZXNuJyB3b3JrIGZvciAvKC4/KT8vXG4gICAgICBjYWxsKG5hdGl2ZVJlcGxhY2UsIG1hdGNoWzBdLCByZUNvcHksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpIG1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAobWF0Y2ggJiYgZ3JvdXBzKSB7XG4gICAgICBtYXRjaC5ncm91cHMgPSBvYmplY3QgPSBjcmVhdGUobnVsbCk7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGdyb3VwID0gZ3JvdXBzW2ldO1xuICAgICAgICBvYmplY3RbZ3JvdXBbMF1dID0gbWF0Y2hbZ3JvdXBbMV1dO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtYXRjaDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXRjaGVkRXhlYztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NgIGdldHRlciBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtcmVnZXhwLnByb3RvdHlwZS5mbGFnc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LmRvdEFsbCkgcmVzdWx0ICs9ICdzJztcbiAgaWYgKHRoYXQudW5pY29kZSkgcmVzdWx0ICs9ICd1JztcbiAgaWYgKHRoYXQuc3RpY2t5KSByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxuLy8gYmFiZWwtbWluaWZ5IGFuZCBDbG9zdXJlIENvbXBpbGVyIHRyYW5zcGlsZXMgUmVnRXhwKCdhJywgJ3knKSAtPiAvYS95IGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcblxudmFyIFVOU1VQUE9SVEVEX1kgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciByZSA9ICRSZWdFeHAoJ2EnLCAneScpO1xuICByZS5sYXN0SW5kZXggPSAyO1xuICByZXR1cm4gcmUuZXhlYygnYWJjZCcpICE9IG51bGw7XG59KTtcblxuLy8gVUMgQnJvd3NlciBidWdcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xMDA4XG52YXIgTUlTU0VEX1NUSUNLWSA9IFVOU1VQUE9SVEVEX1kgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gISRSZWdFeHAoJ2EnLCAneScpLnN0aWNreTtcbn0pO1xuXG52YXIgQlJPS0VOX0NBUkVUID0gVU5TVVBQT1JURURfWSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTc3MzY4N1xuICB2YXIgcmUgPSAkUmVnRXhwKCdecicsICdneScpO1xuICByZS5sYXN0SW5kZXggPSAyO1xuICByZXR1cm4gcmUuZXhlYygnc3RyJykgIT0gbnVsbDtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQlJPS0VOX0NBUkVUOiBCUk9LRU5fQ0FSRVQsXG4gIE1JU1NFRF9TVElDS1k6IE1JU1NFRF9TVElDS1ksXG4gIFVOU1VQUE9SVEVEX1k6IFVOU1VQUE9SVEVEX1lcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbi8vIGJhYmVsLW1pbmlmeSBhbmQgQ2xvc3VyZSBDb21waWxlciB0cmFuc3BpbGVzIFJlZ0V4cCgnLicsICdzJykgLT4gLy4vcyBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG5cbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUgPSAkUmVnRXhwKCcuJywgJ3MnKTtcbiAgcmV0dXJuICEocmUuZG90QWxsICYmIHJlLmV4ZWMoJ1xcbicpICYmIHJlLmZsYWdzID09PSAncycpO1xufSk7XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbi8vIGJhYmVsLW1pbmlmeSBhbmQgQ2xvc3VyZSBDb21waWxlciB0cmFuc3BpbGVzIFJlZ0V4cCgnKD88YT5iKScsICdnJykgLT4gLyg/PGE+YikvZyBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG5cbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUgPSAkUmVnRXhwKCcoPzxhPmIpJywgJ2cnKTtcbiAgcmV0dXJuIHJlLmV4ZWMoJ2InKS5ncm91cHMuYSAhPT0gJ2InIHx8XG4gICAgJ2InLnJlcGxhY2UocmUsICckPGE+YycpICE9PSAnYmMnO1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcblxuLy8gYFJlcXVpcmVPYmplY3RDb2VyY2libGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZXF1aXJlb2JqZWN0Y29lcmNpYmxlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgZGVmaW5lUHJvcGVydHkoZ2xvYmFsLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGdsb2JhbFtrZXldID0gdmFsdWU7XG4gIH0gcmV0dXJuIHZhbHVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT05TVFJVQ1RPUl9OQU1FKSB7XG4gIHZhciBDb25zdHJ1Y3RvciA9IGdldEJ1aWx0SW4oQ09OU1RSVUNUT1JfTkFNRSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmIENvbnN0cnVjdG9yICYmICFDb25zdHJ1Y3RvcltTUEVDSUVTXSkge1xuICAgIGRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBTUEVDSUVTLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgICB9KTtcbiAgfVxufTtcbiIsInZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBUQUcsIFNUQVRJQykge1xuICBpZiAodGFyZ2V0ICYmICFTVEFUSUMpIHRhcmdldCA9IHRhcmdldC5wcm90b3R5cGU7XG4gIGlmICh0YXJnZXQgJiYgIWhhc093bih0YXJnZXQsIFRPX1NUUklOR19UQUcpKSB7XG4gICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBUT19TVFJJTkdfVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IFRBRyB9KTtcbiAgfVxufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xuXG52YXIga2V5cyA9IHNoYXJlZCgna2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcblxudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgc2V0R2xvYmFsKFNIQVJFRCwge30pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlO1xuIiwidmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogJzMuMjEuMScsXG4gIG1vZGU6IElTX1BVUkUgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxNC0yMDIyIERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJyxcbiAgbGljZW5zZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2Jsb2IvdjMuMjEuMS9MSUNFTlNFJyxcbiAgc291cmNlOiAnaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMnXG59KTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jb25zdHJ1Y3RvcicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG4vLyBgU3BlY2llc0NvbnN0cnVjdG9yYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3BlY2llc2NvbnN0cnVjdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBkZWZhdWx0Q29uc3RydWN0b3IpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gZGVmYXVsdENvbnN0cnVjdG9yIDogYUNvbnN0cnVjdG9yKFMpO1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciBjaGFyQ29kZUF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckNvZGVBdCk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoQ09OVkVSVF9UT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgcG9zKSB7XG4gICAgdmFyIFMgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgdmFyIHBvc2l0aW9uID0gdG9JbnRlZ2VyT3JJbmZpbml0eShwb3MpO1xuICAgIHZhciBzaXplID0gUy5sZW5ndGg7XG4gICAgdmFyIGZpcnN0LCBzZWNvbmQ7XG4gICAgaWYgKHBvc2l0aW9uIDwgMCB8fCBwb3NpdGlvbiA+PSBzaXplKSByZXR1cm4gQ09OVkVSVF9UT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBmaXJzdCA9IGNoYXJDb2RlQXQoUywgcG9zaXRpb24pO1xuICAgIHJldHVybiBmaXJzdCA8IDB4RDgwMCB8fCBmaXJzdCA+IDB4REJGRiB8fCBwb3NpdGlvbiArIDEgPT09IHNpemVcbiAgICAgIHx8IChzZWNvbmQgPSBjaGFyQ29kZUF0KFMsIHBvc2l0aW9uICsgMSkpIDwgMHhEQzAwIHx8IHNlY29uZCA+IDB4REZGRlxuICAgICAgICA/IENPTlZFUlRfVE9fU1RSSU5HXG4gICAgICAgICAgPyBjaGFyQXQoUywgcG9zaXRpb24pXG4gICAgICAgICAgOiBmaXJzdFxuICAgICAgICA6IENPTlZFUlRfVE9fU1RSSU5HXG4gICAgICAgICAgPyBzdHJpbmdTbGljZShTLCBwb3NpdGlvbiwgcG9zaXRpb24gKyAyKVxuICAgICAgICAgIDogKGZpcnN0IC0gMHhEODAwIDw8IDEwKSArIChzZWNvbmQgLSAweERDMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5jb2RlcG9pbnRhdFxuICBjb2RlQXQ6IGNyZWF0ZU1ldGhvZChmYWxzZSksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxuICBjaGFyQXQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9odG1sJyk7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZScpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy92YWxpZGF0ZS1hcmd1bWVudHMtbGVuZ3RoJyk7XG52YXIgSVNfSU9TID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MnKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG5cbnZhciBzZXQgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBGdW5jdGlvbiA9IGdsb2JhbC5GdW5jdGlvbjtcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBTdHJpbmcgPSBnbG9iYWwuU3RyaW5nO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgbG9jYXRpb24sIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xuXG50cnkge1xuICAvLyBEZW5vIHRocm93cyBhIFJlZmVyZW5jZUVycm9yIG9uIGBsb2NhdGlvbmAgYWNjZXNzIHdpdGhvdXQgYC0tbG9jYXRpb25gIGZsYWdcbiAgbG9jYXRpb24gPSBnbG9iYWwubG9jYXRpb247XG59IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG5cbnZhciBydW4gPSBmdW5jdGlvbiAoaWQpIHtcbiAgaWYgKGhhc093bihxdWV1ZSwgaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcblxudmFyIHJ1bm5lciA9IGZ1bmN0aW9uIChpZCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJ1bihpZCk7XG4gIH07XG59O1xuXG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuKGV2ZW50LmRhdGEpO1xufTtcblxudmFyIHBvc3QgPSBmdW5jdGlvbiAoaWQpIHtcbiAgLy8gb2xkIGVuZ2luZXMgaGF2ZSBub3QgbG9jYXRpb24ub3JpZ2luXG4gIGdsb2JhbC5wb3N0TWVzc2FnZShTdHJpbmcoaWQpLCBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0KTtcbn07XG5cbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0IHx8ICFjbGVhcikge1xuICBzZXQgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoaGFuZGxlcikge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIHZhciBmbiA9IGlzQ2FsbGFibGUoaGFuZGxlcikgPyBoYW5kbGVyIDogRnVuY3Rpb24oaGFuZGxlcik7XG4gICAgdmFyIGFyZ3MgPSBhcnJheVNsaWNlKGFyZ3VtZW50cywgMSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwcGx5KGZuLCB1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKElTX05PREUpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhydW5uZXIoaWQpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KHJ1bm5lcihpZCkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgLy8gZXhjZXB0IGlPUyAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82MjRcbiAgfSBlbHNlIGlmIChNZXNzYWdlQ2hhbm5lbCAmJiAhSVNfSU9TKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBiaW5kKHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmIChcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJlxuICAgIGlzQ2FsbGFibGUoZ2xvYmFsLnBvc3RNZXNzYWdlKSAmJlxuICAgICFnbG9iYWwuaW1wb3J0U2NyaXB0cyAmJlxuICAgIGxvY2F0aW9uICYmIGxvY2F0aW9uLnByb3RvY29sICE9PSAnZmlsZTonICYmXG4gICAgIWZhaWxzKHBvc3QpXG4gICkge1xuICAgIGRlZmVyID0gcG9zdDtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmIChPTlJFQURZU1RBVEVDSEFOR0UgaW4gY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjcmVhdGVFbGVtZW50KCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgc2V0VGltZW91dChydW5uZXIoaWQpLCAwKTtcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldCxcbiAgY2xlYXI6IGNsZWFyXG59O1xuIiwidmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xuXG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIEhlbHBlciBmb3IgYSBwb3B1bGFyIHJlcGVhdGluZyBjYXNlIG9mIHRoZSBzcGVjOlxuLy8gTGV0IGludGVnZXIgYmUgPyBUb0ludGVnZXIoaW5kZXgpLlxuLy8gSWYgaW50ZWdlciA8IDAsIGxldCByZXN1bHQgYmUgbWF4KChsZW5ndGggKyBpbnRlZ2VyKSwgMCk7IGVsc2UgbGV0IHJlc3VsdCBiZSBtaW4oaW50ZWdlciwgbGVuZ3RoKS5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgdmFyIGludGVnZXIgPSB0b0ludGVnZXJPckluZmluaXR5KGluZGV4KTtcbiAgcmV0dXJuIGludGVnZXIgPCAwID8gbWF4KGludGVnZXIgKyBsZW5ndGgsIDApIDogbWluKGludGVnZXIsIGxlbmd0aCk7XG59O1xuIiwiLy8gdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEluZGV4ZWRPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShpdCkpO1xufTtcbiIsInZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gYFRvSW50ZWdlck9ySW5maW5pdHlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2ludGVnZXJvcmluZmluaXR5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIgbnVtYmVyID0gK2FyZ3VtZW50O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIHNhZmVcbiAgcmV0dXJuIG51bWJlciAhPT0gbnVtYmVyIHx8IG51bWJlciA9PT0gMCA/IDAgOiAobnVtYmVyID4gMCA/IGZsb29yIDogY2VpbCkobnVtYmVyKTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG5cbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gYFRvTGVuZ3RoYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9sZW5ndGhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBhcmd1bWVudCA+IDAgPyBtaW4odG9JbnRlZ2VyT3JJbmZpbml0eShhcmd1bWVudCksIDB4MUZGRkZGRkZGRkZGRkYpIDogMDsgLy8gMiAqKiA1MyAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxudmFyIE9iamVjdCA9IGdsb2JhbC5PYmplY3Q7XG5cbi8vIGBUb09iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvb2JqZWN0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgb3JkaW5hcnlUb1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vcmRpbmFyeS10by1wcmltaXRpdmUnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgVE9fUFJJTUlUSVZFID0gd2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xuXG4vLyBgVG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b3ByaW1pdGl2ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIHByZWYpIHtcbiAgaWYgKCFpc09iamVjdChpbnB1dCkgfHwgaXNTeW1ib2woaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG4gIHZhciBleG90aWNUb1ByaW0gPSBnZXRNZXRob2QoaW5wdXQsIFRPX1BSSU1JVElWRSk7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChleG90aWNUb1ByaW0pIHtcbiAgICBpZiAocHJlZiA9PT0gdW5kZWZpbmVkKSBwcmVmID0gJ2RlZmF1bHQnO1xuICAgIHJlc3VsdCA9IGNhbGwoZXhvdGljVG9QcmltLCBpbnB1dCwgcHJlZik7XG4gICAgaWYgKCFpc09iamVjdChyZXN1bHQpIHx8IGlzU3ltYm9sKHJlc3VsdCkpIHJldHVybiByZXN1bHQ7XG4gICAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xuICB9XG4gIGlmIChwcmVmID09PSB1bmRlZmluZWQpIHByZWYgPSAnbnVtYmVyJztcbiAgcmV0dXJuIG9yZGluYXJ5VG9QcmltaXRpdmUoaW5wdXQsIHByZWYpO1xufTtcbiIsInZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcblxuLy8gYFRvUHJvcGVydHlLZXlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b3Byb3BlcnR5a2V5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIga2V5ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsICdzdHJpbmcnKTtcbiAgcmV0dXJuIGlzU3ltYm9sKGtleSkgPyBrZXkgOiBrZXkgKyAnJztcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIHRlc3QgPSB7fTtcblxudGVzdFtUT19TVFJJTkdfVEFHXSA9ICd6JztcblxubW9kdWxlLmV4cG9ydHMgPSBTdHJpbmcodGVzdCkgPT09ICdbb2JqZWN0IHpdJztcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG5cbnZhciBTdHJpbmcgPSBnbG9iYWwuU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoY2xhc3NvZihhcmd1bWVudCkgPT09ICdTeW1ib2wnKSB0aHJvdyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IGEgU3ltYm9sIHZhbHVlIHRvIGEgc3RyaW5nJyk7XG4gIHJldHVybiBTdHJpbmcoYXJndW1lbnQpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbnZhciBTdHJpbmcgPSBnbG9iYWwuU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB0cnkge1xuICAgIHJldHVybiBTdHJpbmcoYXJndW1lbnQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiAnT2JqZWN0JztcbiAgfVxufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxudmFyIGlkID0gMDtcbnZhciBwb3N0Zml4ID0gTWF0aC5yYW5kb20oKTtcbnZhciB0b1N0cmluZyA9IHVuY3VycnlUaGlzKDEuMC50b1N0cmluZyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnICsgKGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXkpICsgJylfJyArIHRvU3RyaW5nKCsraWQgKyBwb3N0Zml4LCAzNik7XG59O1xuIiwiLyogZXNsaW50LWRpc2FibGUgZXMvbm8tc3ltYm9sIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nICovXG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX1NZTUJPTFxuICAmJiAhU3ltYm9sLnNoYW1cbiAgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJztcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIFY4IH4gQ2hyb21lIDM2LVxuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzMzNFxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sICdwcm90b3R5cGUnLCB7XG4gICAgdmFsdWU6IDQyLFxuICAgIHdyaXRhYmxlOiBmYWxzZVxuICB9KS5wcm90b3R5cGUgIT0gNDI7XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChwYXNzZWQsIHJlcXVpcmVkKSB7XG4gIGlmIChwYXNzZWQgPCByZXF1aXJlZCkgdGhyb3cgVHlwZUVycm9yKCdOb3QgZW5vdWdoIGFyZ3VtZW50cycpO1xuICByZXR1cm4gcGFzc2VkO1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuZXhwb3J0cy5mID0gd2VsbEtub3duU3ltYm9sO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcblxudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG52YXIgU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBzeW1ib2xGb3IgPSBTeW1ib2wgJiYgU3ltYm9sWydmb3InXTtcbnZhciBjcmVhdGVXZWxsS25vd25TeW1ib2wgPSBVU0VfU1lNQk9MX0FTX1VJRCA/IFN5bWJvbCA6IFN5bWJvbCAmJiBTeW1ib2wud2l0aG91dFNldHRlciB8fCB1aWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgaWYgKCFoYXNPd24oV2VsbEtub3duU3ltYm9sc1N0b3JlLCBuYW1lKSB8fCAhKE5BVElWRV9TWU1CT0wgfHwgdHlwZW9mIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9PSAnc3RyaW5nJykpIHtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSAnU3ltYm9sLicgKyBuYW1lO1xuICAgIGlmIChOQVRJVkVfU1lNQk9MICYmIGhhc093bihTeW1ib2wsIG5hbWUpKSB7XG4gICAgICBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBTeW1ib2xbbmFtZV07XG4gICAgfSBlbHNlIGlmIChVU0VfU1lNQk9MX0FTX1VJRCAmJiBzeW1ib2xGb3IpIHtcbiAgICAgIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IHN5bWJvbEZvcihkZXNjcmlwdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IGNyZWF0ZVdlbGxLbm93blN5bWJvbChkZXNjcmlwdGlvbik7XG4gICAgfVxuICB9IHJldHVybiBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFID0gd2VsbEtub3duU3ltYm9sKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gMHgxRkZGRkZGRkZGRkZGRjtcbnZhciBNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQgPSAnTWF4aW11bSBhbGxvd2VkIGluZGV4IGV4Y2VlZGVkJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBXZSBjYW4ndCB1c2UgdGhpcyBmZWF0dXJlIGRldGVjdGlvbiBpbiBWOCBzaW5jZSBpdCBjYXVzZXNcbi8vIGRlb3B0aW1pemF0aW9uIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc5XG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCA9IFY4X1ZFUlNJT04gPj0gNTEgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFycmF5ID0gW107XG4gIGFycmF5W0lTX0NPTkNBVF9TUFJFQURBQkxFXSA9IGZhbHNlO1xuICByZXR1cm4gYXJyYXkuY29uY2F0KClbMF0gIT09IGFycmF5O1xufSk7XG5cbnZhciBTUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdjb25jYXQnKTtcblxudmFyIGlzQ29uY2F0U3ByZWFkYWJsZSA9IGZ1bmN0aW9uIChPKSB7XG4gIGlmICghaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNwcmVhZGFibGUgPSBPW0lTX0NPTkNBVF9TUFJFQURBQkxFXTtcbiAgcmV0dXJuIHNwcmVhZGFibGUgIT09IHVuZGVmaW5lZCA/ICEhc3ByZWFkYWJsZSA6IGlzQXJyYXkoTyk7XG59O1xuXG52YXIgRk9SQ0VEID0gIUlTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQgfHwgIVNQRUNJRVNfU1VQUE9SVDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5jb25jYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuY29uY2F0XG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAaXNDb25jYXRTcHJlYWRhYmxlIGFuZCBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIGNvbmNhdDogZnVuY3Rpb24gY29uY2F0KGFyZykge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgdmFyIG4gPSAwO1xuICAgIHZhciBpLCBrLCBsZW5ndGgsIGxlbiwgRTtcbiAgICBmb3IgKGkgPSAtMSwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBFID0gaSA9PT0gLTEgPyBPIDogYXJndW1lbnRzW2ldO1xuICAgICAgaWYgKGlzQ29uY2F0U3ByZWFkYWJsZShFKSkge1xuICAgICAgICBsZW4gPSBsZW5ndGhPZkFycmF5TGlrZShFKTtcbiAgICAgICAgaWYgKG4gKyBsZW4gPiBNQVhfU0FGRV9JTlRFR0VSKSB0aHJvdyBUeXBlRXJyb3IoTUFYSU1VTV9BTExPV0VEX0lOREVYX0VYQ0VFREVEKTtcbiAgICAgICAgZm9yIChrID0gMDsgayA8IGxlbjsgaysrLCBuKyspIGlmIChrIGluIEUpIGNyZWF0ZVByb3BlcnR5KEEsIG4sIEVba10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG4gPj0gTUFYX1NBRkVfSU5URUdFUikgdGhyb3cgVHlwZUVycm9yKE1BWElNVU1fQUxMT1dFRF9JTkRFWF9FWENFRURFRCk7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KEEsIG4rKywgRSk7XG4gICAgICB9XG4gICAgfVxuICAgIEEubGVuZ3RoID0gbjtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkZmlsdGVyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZpbHRlcjtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnZmlsdGVyJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbHRlclxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIH0sIHtcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmluZDtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG52YXIgRklORCA9ICdmaW5kJztcbnZhciBTS0lQU19IT0xFUyA9IHRydWU7XG5cbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoRklORCBpbiBbXSkgQXJyYXkoMSlbRklORF0oZnVuY3Rpb24gKCkgeyBTS0lQU19IT0xFUyA9IGZhbHNlOyB9KTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maW5kYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IFNLSVBTX0hPTEVTIH0sIHtcbiAgZmluZDogZnVuY3Rpb24gZmluZChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKEZJTkQpO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZnJvbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mcm9tJyk7XG52YXIgY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbicpO1xuXG52YXIgSU5DT1JSRUNUX0lURVJBVElPTiA9ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1mcm9tIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIEFycmF5LmZyb20oaXRlcmFibGUpO1xufSk7XG5cbi8vIGBBcnJheS5mcm9tYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkuZnJvbVxuJCh7IHRhcmdldDogJ0FycmF5Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1RfSVRFUkFUSU9OIH0sIHtcbiAgZnJvbTogZnJvbVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkaW5jbHVkZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmNsdWRlcztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSB9LCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdpbmNsdWRlcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xuXG52YXIgQVJSQVlfSVRFUkFUT1IgPSAnQXJyYXkgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoQVJSQVlfSVRFUkFUT1IpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmVudHJpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZW50cmllc1xuLy8gYEFycmF5LnByb3RvdHlwZS5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmtleXNcbi8vIGBBcnJheS5wcm90b3R5cGUudmFsdWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnZhbHVlc1xuLy8gYEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQGl0ZXJhdG9yXG4vLyBgQ3JlYXRlQXJyYXlJdGVyYXRvcmAgaW50ZXJuYWwgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZWFycmF5aXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lSXRlcmF0b3IoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBBUlJBWV9JVEVSQVRPUixcbiAgICB0YXJnZXQ6IHRvSW5kZXhlZE9iamVjdChpdGVyYXRlZCksIC8vIHRhcmdldFxuICAgIGluZGV4OiAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICAgIGtpbmQ6IGtpbmQgICAgICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICB9KTtcbi8vIGAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSVhcnJheWl0ZXJhdG9ycHJvdG90eXBlJS5uZXh0XG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gIHZhciB0YXJnZXQgPSBzdGF0ZS50YXJnZXQ7XG4gIHZhciBraW5kID0gc3RhdGUua2luZDtcbiAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXgrKztcbiAgaWYgKCF0YXJnZXQgfHwgaW5kZXggPj0gdGFyZ2V0Lmxlbmd0aCkge1xuICAgIHN0YXRlLnRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4geyB2YWx1ZTogaW5kZXgsIGRvbmU6IGZhbHNlIH07XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4geyB2YWx1ZTogdGFyZ2V0W2luZGV4XSwgZG9uZTogZmFsc2UgfTtcbiAgcmV0dXJuIHsgdmFsdWU6IFtpbmRleCwgdGFyZ2V0W2luZGV4XV0sIGRvbmU6IGZhbHNlIH07XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGV1bm1hcHBlZGFyZ3VtZW50c29iamVjdFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGVtYXBwZWRhcmd1bWVudHNvYmplY3RcbnZhciB2YWx1ZXMgPSBJdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcblxuLy8gVjggfiBDaHJvbWUgNDUtIGJ1Z1xuaWYgKCFJU19QVVJFICYmIERFU0NSSVBUT1JTICYmIHZhbHVlcy5uYW1lICE9PSAndmFsdWVzJykgdHJ5IHtcbiAgZGVmaW5lUHJvcGVydHkodmFsdWVzLCAnbmFtZScsIHsgdmFsdWU6ICd2YWx1ZXMnIH0pO1xufSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJG1hcCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5tYXA7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ21hcCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5tYXBcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB9LCB7XG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jb25zdHJ1Y3RvcicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xudmFyIHVuJFNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlJyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnc2xpY2UnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbnZhciBBcnJheSA9IGdsb2JhbC5BcnJheTtcbnZhciBtYXggPSBNYXRoLm1heDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5zbGljZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zbGljZVxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfSwge1xuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgICB2YXIgayA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuZ3RoKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kLCBsZW5ndGgpO1xuICAgIC8vIGlubGluZSBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBmb3IgdXNhZ2UgbmF0aXZlIGBBcnJheSNzbGljZWAgd2hlcmUgaXQncyBwb3NzaWJsZVxuICAgIHZhciBDb25zdHJ1Y3RvciwgcmVzdWx0LCBuO1xuICAgIGlmIChpc0FycmF5KE8pKSB7XG4gICAgICBDb25zdHJ1Y3RvciA9IE8uY29uc3RydWN0b3I7XG4gICAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgICAgaWYgKGlzQ29uc3RydWN0b3IoQ29uc3RydWN0b3IpICYmIChDb25zdHJ1Y3RvciA9PT0gQXJyYXkgfHwgaXNBcnJheShDb25zdHJ1Y3Rvci5wcm90b3R5cGUpKSkge1xuICAgICAgICBDb25zdHJ1Y3RvciA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoQ29uc3RydWN0b3IpKSB7XG4gICAgICAgIENvbnN0cnVjdG9yID0gQ29uc3RydWN0b3JbU1BFQ0lFU107XG4gICAgICAgIGlmIChDb25zdHJ1Y3RvciA9PT0gbnVsbCkgQ29uc3RydWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoQ29uc3RydWN0b3IgPT09IEFycmF5IHx8IENvbnN0cnVjdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuJFNsaWNlKE8sIGssIGZpbik7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdCA9IG5ldyAoQ29uc3RydWN0b3IgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQ29uc3RydWN0b3IpKG1heChmaW4gLSBrLCAwKSk7XG4gICAgZm9yIChuID0gMDsgayA8IGZpbjsgaysrLCBuKyspIGlmIChrIGluIE8pIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgbiwgT1trXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IG47XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnc3BsaWNlJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSAweDFGRkZGRkZGRkZGRkZGO1xudmFyIE1BWElNVU1fQUxMT1dFRF9MRU5HVEhfRVhDRUVERUQgPSAnTWF4aW11bSBhbGxvd2VkIGxlbmd0aCBleGNlZWRlZCc7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuc3BsaWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNwbGljZVxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIH0sIHtcbiAgc3BsaWNlOiBmdW5jdGlvbiBzcGxpY2Uoc3RhcnQsIGRlbGV0ZUNvdW50IC8qICwgLi4uaXRlbXMgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW4gPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgICB2YXIgYWN0dWFsU3RhcnQgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gICAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGluc2VydENvdW50LCBhY3R1YWxEZWxldGVDb3VudCwgQSwgaywgZnJvbSwgdG87XG4gICAgaWYgKGFyZ3VtZW50c0xlbmd0aCA9PT0gMCkge1xuICAgICAgaW5zZXJ0Q291bnQgPSBhY3R1YWxEZWxldGVDb3VudCA9IDA7XG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHNMZW5ndGggPT09IDEpIHtcbiAgICAgIGluc2VydENvdW50ID0gMDtcbiAgICAgIGFjdHVhbERlbGV0ZUNvdW50ID0gbGVuIC0gYWN0dWFsU3RhcnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc2VydENvdW50ID0gYXJndW1lbnRzTGVuZ3RoIC0gMjtcbiAgICAgIGFjdHVhbERlbGV0ZUNvdW50ID0gbWluKG1heCh0b0ludGVnZXJPckluZmluaXR5KGRlbGV0ZUNvdW50KSwgMCksIGxlbiAtIGFjdHVhbFN0YXJ0KTtcbiAgICB9XG4gICAgaWYgKGxlbiArIGluc2VydENvdW50IC0gYWN0dWFsRGVsZXRlQ291bnQgPiBNQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoTUFYSU1VTV9BTExPV0VEX0xFTkdUSF9FWENFRURFRCk7XG4gICAgfVxuICAgIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgYWN0dWFsRGVsZXRlQ291bnQpO1xuICAgIGZvciAoayA9IDA7IGsgPCBhY3R1YWxEZWxldGVDb3VudDsgaysrKSB7XG4gICAgICBmcm9tID0gYWN0dWFsU3RhcnQgKyBrO1xuICAgICAgaWYgKGZyb20gaW4gTykgY3JlYXRlUHJvcGVydHkoQSwgaywgT1tmcm9tXSk7XG4gICAgfVxuICAgIEEubGVuZ3RoID0gYWN0dWFsRGVsZXRlQ291bnQ7XG4gICAgaWYgKGluc2VydENvdW50IDwgYWN0dWFsRGVsZXRlQ291bnQpIHtcbiAgICAgIGZvciAoayA9IGFjdHVhbFN0YXJ0OyBrIDwgbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQ7IGsrKykge1xuICAgICAgICBmcm9tID0gayArIGFjdHVhbERlbGV0ZUNvdW50O1xuICAgICAgICB0byA9IGsgKyBpbnNlcnRDb3VudDtcbiAgICAgICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO1xuICAgICAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICAgIH1cbiAgICAgIGZvciAoayA9IGxlbjsgayA+IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50ICsgaW5zZXJ0Q291bnQ7IGstLSkgZGVsZXRlIE9bayAtIDFdO1xuICAgIH0gZWxzZSBpZiAoaW5zZXJ0Q291bnQgPiBhY3R1YWxEZWxldGVDb3VudCkge1xuICAgICAgZm9yIChrID0gbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQ7IGsgPiBhY3R1YWxTdGFydDsgay0tKSB7XG4gICAgICAgIGZyb20gPSBrICsgYWN0dWFsRGVsZXRlQ291bnQgLSAxO1xuICAgICAgICB0byA9IGsgKyBpbnNlcnRDb3VudCAtIDE7XG4gICAgICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICAgICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoayA9IDA7IGsgPCBpbnNlcnRDb3VudDsgaysrKSB7XG4gICAgICBPW2sgKyBhY3R1YWxTdGFydF0gPSBhcmd1bWVudHNbayArIDJdO1xuICAgIH1cbiAgICBPLmxlbmd0aCA9IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50ICsgaW5zZXJ0Q291bnQ7XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgRlVOQ1RJT05fTkFNRV9FWElTVFMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpLkVYSVNUUztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxudmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIGZ1bmN0aW9uVG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyhGdW5jdGlvblByb3RvdHlwZS50b1N0cmluZyk7XG52YXIgbmFtZVJFID0gL2Z1bmN0aW9uXFxiKD86XFxzfFxcL1xcKltcXFNcXHNdKj9cXCpcXC98XFwvXFwvW15cXG5cXHJdKltcXG5cXHJdKykqKFteXFxzKC9dKikvO1xudmFyIHJlZ0V4cEV4ZWMgPSB1bmN1cnJ5VGhpcyhuYW1lUkUuZXhlYyk7XG52YXIgTkFNRSA9ICduYW1lJztcblxuLy8gRnVuY3Rpb24gaW5zdGFuY2VzIGAubmFtZWAgcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZnVuY3Rpb24taW5zdGFuY2VzLW5hbWVcbmlmIChERVNDUklQVE9SUyAmJiAhRlVOQ1RJT05fTkFNRV9FWElTVFMpIHtcbiAgZGVmaW5lUHJvcGVydHkoRnVuY3Rpb25Qcm90b3R5cGUsIE5BTUUsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gcmVnRXhwRXhlYyhuYW1lUkUsIGZ1bmN0aW9uVG9TdHJpbmcodGhpcykpWzFdO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIG5hdGl2ZUdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlcicpO1xuXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgbmF0aXZlR2V0UHJvdG90eXBlT2YoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldHByb3RvdHlwZW9mXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGQUlMU19PTl9QUklNSVRJVkVTLCBzaGFtOiAhQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSIH0sIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KSB7XG4gICAgcmV0dXJuIG5hdGl2ZUdldFByb3RvdHlwZU9mKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuXG4iLCJ2YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZycpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmdcbmlmICghVE9fU1RSSU5HX1RBR19TVVBQT1JUKSB7XG4gIHJlZGVmaW5lKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIHRvU3RyaW5nLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbn1cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICR2YWx1ZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXRvLWFycmF5JykudmFsdWVzO1xuXG4vLyBgT2JqZWN0LnZhbHVlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC52YWx1ZXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoTykge1xuICAgIHJldHVybiAkdmFsdWVzKE8pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIE5hdGl2ZVByb21pc2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXByb21pc2UtY29uc3RydWN0b3InKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lLWFsbCcpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21pY3JvdGFzaycpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIGhvc3RSZXBvcnRFcnJvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaG9zdC1yZXBvcnQtZXJyb3JzJyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGVyZm9ybScpO1xudmFyIFF1ZXVlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3F1ZXVlJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX0JST1dTRVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWJyb3dzZXInKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG5cbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoUFJPTUlTRSk7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsUHJvbWlzZVN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoUFJPTUlTRSk7XG52YXIgTmF0aXZlUHJvbWlzZVByb3RvdHlwZSA9IE5hdGl2ZVByb21pc2UgJiYgTmF0aXZlUHJvbWlzZS5wcm90b3R5cGU7XG52YXIgUHJvbWlzZUNvbnN0cnVjdG9yID0gTmF0aXZlUHJvbWlzZTtcbnZhciBQcm9taXNlUHJvdG90eXBlID0gTmF0aXZlUHJvbWlzZVByb3RvdHlwZTtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG52YXIgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHk7XG5cbnZhciBESVNQQVRDSF9FVkVOVCA9ICEhKGRvY3VtZW50ICYmIGRvY3VtZW50LmNyZWF0ZUV2ZW50ICYmIGdsb2JhbC5kaXNwYXRjaEV2ZW50KTtcbnZhciBOQVRJVkVfUkVKRUNUSU9OX0VWRU5UID0gaXNDYWxsYWJsZShnbG9iYWwuUHJvbWlzZVJlamVjdGlvbkV2ZW50KTtcbnZhciBVTkhBTkRMRURfUkVKRUNUSU9OID0gJ3VuaGFuZGxlZHJlamVjdGlvbic7XG52YXIgUkVKRUNUSU9OX0hBTkRMRUQgPSAncmVqZWN0aW9uaGFuZGxlZCc7XG52YXIgUEVORElORyA9IDA7XG52YXIgRlVMRklMTEVEID0gMTtcbnZhciBSRUpFQ1RFRCA9IDI7XG52YXIgSEFORExFRCA9IDE7XG52YXIgVU5IQU5ETEVEID0gMjtcbnZhciBTVUJDTEFTU0lORyA9IGZhbHNlO1xuXG52YXIgSW50ZXJuYWwsIE93blByb21pc2VDYXBhYmlsaXR5LCBQcm9taXNlV3JhcHBlciwgbmF0aXZlVGhlbjtcblxudmFyIEZPUkNFRCA9IGlzRm9yY2VkKFBST01JU0UsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIFBST01JU0VfQ09OU1RSVUNUT1JfU09VUkNFID0gaW5zcGVjdFNvdXJjZShQcm9taXNlQ29uc3RydWN0b3IpO1xuICB2YXIgR0xPQkFMX0NPUkVfSlNfUFJPTUlTRSA9IFBST01JU0VfQ09OU1RSVUNUT1JfU09VUkNFICE9PSBTdHJpbmcoUHJvbWlzZUNvbnN0cnVjdG9yKTtcbiAgLy8gVjggNi42IChOb2RlIDEwIGFuZCBDaHJvbWUgNjYpIGhhdmUgYSBidWcgd2l0aCByZXNvbHZpbmcgY3VzdG9tIHRoZW5hYmxlc1xuICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04MzA1NjVcbiAgLy8gV2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgaWYgKCFHTE9CQUxfQ09SRV9KU19QUk9NSVNFICYmIFY4X1ZFUlNJT04gPT09IDY2KSByZXR1cm4gdHJ1ZTtcbiAgLy8gV2UgbmVlZCBQcm9taXNlI2ZpbmFsbHkgaW4gdGhlIHB1cmUgdmVyc2lvbiBmb3IgcHJldmVudGluZyBwcm90b3R5cGUgcG9sbHV0aW9uXG4gIGlmIChJU19QVVJFICYmICFQcm9taXNlUHJvdG90eXBlWydmaW5hbGx5J10pIHJldHVybiB0cnVlO1xuICAvLyBXZSBjYW4ndCB1c2UgQEBzcGVjaWVzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuICAvLyBkZW9wdGltaXphdGlvbiBhbmQgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3OVxuICBpZiAoVjhfVkVSU0lPTiA+PSA1MSAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoUFJPTUlTRV9DT05TVFJVQ1RPUl9TT1VSQ0UpKSByZXR1cm4gZmFsc2U7XG4gIC8vIERldGVjdCBjb3JyZWN0bmVzcyBvZiBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gIHZhciBwcm9taXNlID0gbmV3IFByb21pc2VDb25zdHJ1Y3RvcihmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKDEpOyB9KTtcbiAgdmFyIEZha2VQcm9taXNlID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICBleGVjKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbiAgfTtcbiAgdmFyIGNvbnN0cnVjdG9yID0gcHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9O1xuICBjb25zdHJ1Y3RvcltTUEVDSUVTXSA9IEZha2VQcm9taXNlO1xuICBTVUJDTEFTU0lORyA9IHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pIGluc3RhbmNlb2YgRmFrZVByb21pc2U7XG4gIGlmICghU1VCQ0xBU1NJTkcpIHJldHVybiB0cnVlO1xuICAvLyBVbmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gIHJldHVybiAhR0xPQkFMX0NPUkVfSlNfUFJPTUlTRSAmJiBJU19CUk9XU0VSICYmICFOQVRJVkVfUkVKRUNUSU9OX0VWRU5UO1xufSk7XG5cbnZhciBJTkNPUlJFQ1RfSVRFUkFUSU9OID0gRk9SQ0VEIHx8ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gIFByb21pc2VDb25zdHJ1Y3Rvci5hbGwoaXRlcmFibGUpWydjYXRjaCddKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgaXNDYWxsYWJsZSh0aGVuID0gaXQudGhlbikgPyB0aGVuIDogZmFsc2U7XG59O1xuXG52YXIgY2FsbFJlYWN0aW9uID0gZnVuY3Rpb24gKHJlYWN0aW9uLCBzdGF0ZSkge1xuICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcbiAgdmFyIG9rID0gc3RhdGUuc3RhdGUgPT0gRlVMRklMTEVEO1xuICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gIHZhciByZWplY3QgPSByZWFjdGlvbi5yZWplY3Q7XG4gIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgdHJ5IHtcbiAgICBpZiAoaGFuZGxlcikge1xuICAgICAgaWYgKCFvaykge1xuICAgICAgICBpZiAoc3RhdGUucmVqZWN0aW9uID09PSBVTkhBTkRMRUQpIG9uSGFuZGxlVW5oYW5kbGVkKHN0YXRlKTtcbiAgICAgICAgc3RhdGUucmVqZWN0aW9uID0gSEFORExFRDtcbiAgICAgIH1cbiAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTtcbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7IC8vIGNhbiB0aHJvd1xuICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICBleGl0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgY2FsbCh0aGVuLCByZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChkb21haW4gJiYgIWV4aXRlZCkgZG9tYWluLmV4aXQoKTtcbiAgICByZWplY3QoZXJyb3IpO1xuICB9XG59O1xuXG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHN0YXRlLCBpc1JlamVjdCkge1xuICBpZiAoc3RhdGUubm90aWZpZWQpIHJldHVybjtcbiAgc3RhdGUubm90aWZpZWQgPSB0cnVlO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciByZWFjdGlvbnMgPSBzdGF0ZS5yZWFjdGlvbnM7XG4gICAgdmFyIHJlYWN0aW9uO1xuICAgIHdoaWxlIChyZWFjdGlvbiA9IHJlYWN0aW9ucy5nZXQoKSkge1xuICAgICAgY2FsbFJlYWN0aW9uKHJlYWN0aW9uLCBzdGF0ZSk7XG4gICAgfVxuICAgIHN0YXRlLm5vdGlmaWVkID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFzdGF0ZS5yZWplY3Rpb24pIG9uVW5oYW5kbGVkKHN0YXRlKTtcbiAgfSk7XG59O1xuXG52YXIgZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uIChuYW1lLCBwcm9taXNlLCByZWFzb24pIHtcbiAgdmFyIGV2ZW50LCBoYW5kbGVyO1xuICBpZiAoRElTUEFUQ0hfRVZFTlQpIHtcbiAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGV2ZW50LnByb21pc2UgPSBwcm9taXNlO1xuICAgIGV2ZW50LnJlYXNvbiA9IHJlYXNvbjtcbiAgICBldmVudC5pbml0RXZlbnQobmFtZSwgZmFsc2UsIHRydWUpO1xuICAgIGdsb2JhbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfSBlbHNlIGV2ZW50ID0geyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHJlYXNvbiB9O1xuICBpZiAoIU5BVElWRV9SRUpFQ1RJT05fRVZFTlQgJiYgKGhhbmRsZXIgPSBnbG9iYWxbJ29uJyArIG5hbWVdKSkgaGFuZGxlcihldmVudCk7XG4gIGVsc2UgaWYgKG5hbWUgPT09IFVOSEFORExFRF9SRUpFQ1RJT04pIGhvc3RSZXBvcnRFcnJvcnMoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHJlYXNvbik7XG59O1xuXG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgY2FsbCh0YXNrLCBnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IHN0YXRlLmZhY2FkZTtcbiAgICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcbiAgICB2YXIgSVNfVU5IQU5ETEVEID0gaXNVbmhhbmRsZWQoc3RhdGUpO1xuICAgIHZhciByZXN1bHQ7XG4gICAgaWYgKElTX1VOSEFORExFRCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChJU19OT0RFKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFVOSEFORExFRF9SRUpFQ1RJT04sIHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHN0YXRlLnJlamVjdGlvbiA9IElTX05PREUgfHwgaXNVbmhhbmRsZWQoc3RhdGUpID8gVU5IQU5ETEVEIDogSEFORExFRDtcbiAgICAgIGlmIChyZXN1bHQuZXJyb3IpIHRocm93IHJlc3VsdC52YWx1ZTtcbiAgICB9XG4gIH0pO1xufTtcblxudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5yZWplY3Rpb24gIT09IEhBTkRMRUQgJiYgIXN0YXRlLnBhcmVudDtcbn07XG5cbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICBjYWxsKHRhc2ssIGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gc3RhdGUuZmFjYWRlO1xuICAgIGlmIChJU19OT0RFKSB7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgZGlzcGF0Y2hFdmVudChSRUpFQ1RJT05fSEFORExFRCwgcHJvbWlzZSwgc3RhdGUudmFsdWUpO1xuICB9KTtcbn07XG5cbnZhciBiaW5kID0gZnVuY3Rpb24gKGZuLCBzdGF0ZSwgdW53cmFwKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBmbihzdGF0ZSwgdmFsdWUsIHVud3JhcCk7XG4gIH07XG59O1xuXG52YXIgaW50ZXJuYWxSZWplY3QgPSBmdW5jdGlvbiAoc3RhdGUsIHZhbHVlLCB1bndyYXApIHtcbiAgaWYgKHN0YXRlLmRvbmUpIHJldHVybjtcbiAgc3RhdGUuZG9uZSA9IHRydWU7XG4gIGlmICh1bndyYXApIHN0YXRlID0gdW53cmFwO1xuICBzdGF0ZS52YWx1ZSA9IHZhbHVlO1xuICBzdGF0ZS5zdGF0ZSA9IFJFSkVDVEVEO1xuICBub3RpZnkoc3RhdGUsIHRydWUpO1xufTtcblxudmFyIGludGVybmFsUmVzb2x2ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgdmFsdWUsIHVud3JhcCkge1xuICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuO1xuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgaWYgKHVud3JhcCkgc3RhdGUgPSB1bndyYXA7XG4gIHRyeSB7XG4gICAgaWYgKHN0YXRlLmZhY2FkZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIHZhciB0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSk7XG4gICAgaWYgKHRoZW4pIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBkb25lOiBmYWxzZSB9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNhbGwodGhlbiwgdmFsdWUsXG4gICAgICAgICAgICBiaW5kKGludGVybmFsUmVzb2x2ZSwgd3JhcHBlciwgc3RhdGUpLFxuICAgICAgICAgICAgYmluZChpbnRlcm5hbFJlamVjdCwgd3JhcHBlciwgc3RhdGUpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBpbnRlcm5hbFJlamVjdCh3cmFwcGVyLCBlcnJvciwgc3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUudmFsdWUgPSB2YWx1ZTtcbiAgICAgIHN0YXRlLnN0YXRlID0gRlVMRklMTEVEO1xuICAgICAgbm90aWZ5KHN0YXRlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGludGVybmFsUmVqZWN0KHsgZG9uZTogZmFsc2UgfSwgZXJyb3IsIHN0YXRlKTtcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmIChGT1JDRUQpIHtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgUHJvbWlzZUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGFuSW5zdGFuY2UodGhpcywgUHJvbWlzZVByb3RvdHlwZSk7XG4gICAgYUNhbGxhYmxlKGV4ZWN1dG9yKTtcbiAgICBjYWxsKEludGVybmFsLCB0aGlzKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihiaW5kKGludGVybmFsUmVzb2x2ZSwgc3RhdGUpLCBiaW5kKGludGVybmFsUmVqZWN0LCBzdGF0ZSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpbnRlcm5hbFJlamVjdChzdGF0ZSwgZXJyb3IpO1xuICAgIH1cbiAgfTtcbiAgUHJvbWlzZVByb3RvdHlwZSA9IFByb21pc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgdHlwZTogUFJPTUlTRSxcbiAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgbm90aWZpZWQ6IGZhbHNlLFxuICAgICAgcGFyZW50OiBmYWxzZSxcbiAgICAgIHJlYWN0aW9uczogbmV3IFF1ZXVlKCksXG4gICAgICByZWplY3Rpb246IGZhbHNlLFxuICAgICAgc3RhdGU6IFBFTkRJTkcsXG4gICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgfSk7XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKFByb21pc2VQcm90b3R5cGUsIHtcbiAgICAvLyBgUHJvbWlzZS5wcm90b3R5cGUudGhlbmAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnByb3RvdHlwZS50aGVuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHVuaWNvcm4vbm8tdGhlbmFibGUgLS0gc2FmZVxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUHJvbWlzZVN0YXRlKHRoaXMpO1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIFByb21pc2VDb25zdHJ1Y3RvcikpO1xuICAgICAgc3RhdGUucGFyZW50ID0gdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLm9rID0gaXNDYWxsYWJsZShvbkZ1bGZpbGxlZCkgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsID0gaXNDYWxsYWJsZShvblJlamVjdGVkKSAmJiBvblJlamVjdGVkO1xuICAgICAgcmVhY3Rpb24uZG9tYWluID0gSVNfTk9ERSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKHN0YXRlLnN0YXRlID09IFBFTkRJTkcpIHN0YXRlLnJlYWN0aW9ucy5hZGQocmVhY3Rpb24pO1xuICAgICAgZWxzZSBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICBjYWxsUmVhY3Rpb24ocmVhY3Rpb24sIHN0YXRlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyBgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5wcm90b3R5cGUuY2F0Y2hcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZShwcm9taXNlKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGJpbmQoaW50ZXJuYWxSZXNvbHZlLCBzdGF0ZSk7XG4gICAgdGhpcy5yZWplY3QgPSBiaW5kKGludGVybmFsUmVqZWN0LCBzdGF0ZSk7XG4gIH07XG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09IFByb21pc2VDb25zdHJ1Y3RvciB8fCBDID09PSBQcm9taXNlV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xuXG4gIGlmICghSVNfUFVSRSAmJiBpc0NhbGxhYmxlKE5hdGl2ZVByb21pc2UpICYmIE5hdGl2ZVByb21pc2VQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUpIHtcbiAgICBuYXRpdmVUaGVuID0gTmF0aXZlUHJvbWlzZVByb3RvdHlwZS50aGVuO1xuXG4gICAgaWYgKCFTVUJDTEFTU0lORykge1xuICAgICAgLy8gbWFrZSBgUHJvbWlzZSN0aGVuYCByZXR1cm4gYSBwb2x5ZmlsbGVkIGBQcm9taXNlYCBmb3IgbmF0aXZlIHByb21pc2UtYmFzZWQgQVBJc1xuICAgICAgcmVkZWZpbmUoTmF0aXZlUHJvbWlzZVByb3RvdHlwZSwgJ3RoZW4nLCBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlQ29uc3RydWN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGNhbGwobmF0aXZlVGhlbiwgdGhhdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSkudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCk7XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjQwXG4gICAgICB9LCB7IHVuc2FmZTogdHJ1ZSB9KTtcblxuICAgICAgLy8gbWFrZXMgc3VyZSB0aGF0IG5hdGl2ZSBwcm9taXNlLWJhc2VkIEFQSXMgYFByb21pc2UjY2F0Y2hgIHByb3Blcmx5IHdvcmtzIHdpdGggcGF0Y2hlZCBgUHJvbWlzZSN0aGVuYFxuICAgICAgcmVkZWZpbmUoTmF0aXZlUHJvbWlzZVByb3RvdHlwZSwgJ2NhdGNoJywgUHJvbWlzZVByb3RvdHlwZVsnY2F0Y2gnXSwgeyB1bnNhZmU6IHRydWUgfSk7XG4gICAgfVxuXG4gICAgLy8gbWFrZSBgLmNvbnN0cnVjdG9yID09PSBQcm9taXNlYCB3b3JrIGZvciBuYXRpdmUgcHJvbWlzZS1iYXNlZCBBUElzXG4gICAgdHJ5IHtcbiAgICAgIGRlbGV0ZSBOYXRpdmVQcm9taXNlUHJvdG90eXBlLmNvbnN0cnVjdG9yO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cblxuICAgIC8vIG1ha2UgYGluc3RhbmNlb2YgUHJvbWlzZWAgd29yayBmb3IgbmF0aXZlIHByb21pc2UtYmFzZWQgQVBJc1xuICAgIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgICAgc2V0UHJvdG90eXBlT2YoTmF0aXZlUHJvbWlzZVByb3RvdHlwZSwgUHJvbWlzZVByb3RvdHlwZSk7XG4gICAgfVxuICB9XG59XG5cbiQoeyBnbG9iYWw6IHRydWUsIHdyYXA6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgUHJvbWlzZTogUHJvbWlzZUNvbnN0cnVjdG9yXG59KTtcblxuc2V0VG9TdHJpbmdUYWcoUHJvbWlzZUNvbnN0cnVjdG9yLCBQUk9NSVNFLCBmYWxzZSwgdHJ1ZSk7XG5zZXRTcGVjaWVzKFBST01JU0UpO1xuXG5Qcm9taXNlV3JhcHBlciA9IGdldEJ1aWx0SW4oUFJPTUlTRSk7XG5cbi8vIHN0YXRpY3NcbiQoeyB0YXJnZXQ6IFBST01JU0UsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgLy8gYFByb21pc2UucmVqZWN0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJlamVjdFxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKTtcbiAgICBjYWxsKGNhcGFiaWxpdHkucmVqZWN0LCB1bmRlZmluZWQsIHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfHwgRk9SQ0VEIH0sIHtcbiAgLy8gYFByb21pc2UucmVzb2x2ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5yZXNvbHZlXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShJU19QVVJFICYmIHRoaXMgPT09IFByb21pc2VXcmFwcGVyID8gUHJvbWlzZUNvbnN0cnVjdG9yIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9JVEVSQVRJT04gfSwge1xuICAvLyBgUHJvbWlzZS5hbGxgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UuYWxsXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkcHJvbWlzZVJlc29sdmUgPSBhQ2FsbGFibGUoQy5yZXNvbHZlKTtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gY291bnRlcisrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgY2FsbCgkcHJvbWlzZVJlc29sdmUsIEMsIHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lcnJvcikgcmVqZWN0KHJlc3VsdC52YWx1ZSk7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfSxcbiAgLy8gYFByb21pc2UucmFjZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5yYWNlXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRwcm9taXNlUmVzb2x2ZSA9IGFDYWxsYWJsZShDLnJlc29sdmUpO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgY2FsbCgkcHJvbWlzZVJlc29sdmUsIEMsIHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lcnJvcikgcmVqZWN0KHJlc3VsdC52YWx1ZSk7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGFwcGx5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5Jyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kJyk7XG52YXIgYUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY29uc3RydWN0b3InKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBuYXRpdmVDb25zdHJ1Y3QgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ2NvbnN0cnVjdCcpO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG52YXIgcHVzaCA9IFtdLnB1c2g7XG5cbi8vIGBSZWZsZWN0LmNvbnN0cnVjdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QuY29uc3RydWN0XG4vLyBNUyBFZGdlIHN1cHBvcnRzIG9ubHkgMiBhcmd1bWVudHMgYW5kIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbi8vIEZGIE5pZ2h0bHkgc2V0cyB0aGlyZCBhcmd1bWVudCBhcyBgbmV3LnRhcmdldGAsIGJ1dCBkb2VzIG5vdCBjcmVhdGUgYHRoaXNgIGZyb20gaXRcbnZhciBORVdfVEFSR0VUX0JVRyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShuYXRpdmVDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCBbXSwgRikgaW5zdGFuY2VvZiBGKTtcbn0pO1xuXG52YXIgQVJHU19CVUcgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBuYXRpdmVDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG52YXIgRk9SQ0VEID0gTkVXX1RBUkdFVF9CVUcgfHwgQVJHU19CVUc7XG5cbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQsIHNoYW06IEZPUkNFRCB9LCB7XG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gY29uc3RydWN0KFRhcmdldCwgYXJncyAvKiAsIG5ld1RhcmdldCAqLykge1xuICAgIGFDb25zdHJ1Y3RvcihUYXJnZXQpO1xuICAgIGFuT2JqZWN0KGFyZ3MpO1xuICAgIHZhciBuZXdUYXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IFRhcmdldCA6IGFDb25zdHJ1Y3Rvcihhcmd1bWVudHNbMl0pO1xuICAgIGlmIChBUkdTX0JVRyAmJiAhTkVXX1RBUkdFVF9CVUcpIHJldHVybiBuYXRpdmVDb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzLCBuZXdUYXJnZXQpO1xuICAgIGlmIChUYXJnZXQgPT0gbmV3VGFyZ2V0KSB7XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIG9wdGltaXphdGlvbiBmb3IgMC00IGFyZ3VtZW50c1xuICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgVGFyZ2V0KCk7XG4gICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSk7XG4gICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICB9XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIGxvdCBvZiBhcmd1bWVudHMgY2FzZVxuICAgICAgdmFyICRhcmdzID0gW251bGxdO1xuICAgICAgYXBwbHkocHVzaCwgJGFyZ3MsIGFyZ3MpO1xuICAgICAgcmV0dXJuIG5ldyAoYXBwbHkoYmluZCwgVGFyZ2V0LCAkYXJncykpKCk7XG4gICAgfVxuICAgIC8vIHdpdGggYWx0ZXJlZCBuZXdUYXJnZXQsIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGNvbnN0cnVjdG9yc1xuICAgIHZhciBwcm90byA9IG5ld1RhcmdldC5wcm90b3R5cGU7XG4gICAgdmFyIGluc3RhbmNlID0gY3JlYXRlKGlzT2JqZWN0KHByb3RvKSA/IHByb3RvIDogT2JqZWN0UHJvdG90eXBlKTtcbiAgICB2YXIgcmVzdWx0ID0gYXBwbHkoVGFyZ2V0LCBpbnN0YW5jZSwgYXJncyk7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiBpbnN0YW5jZTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBleGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLmV4ZWNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLmV4ZWNcbiQoeyB0YXJnZXQ6ICdSZWdFeHAnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAvLi8uZXhlYyAhPT0gZXhlYyB9LCB7XG4gIGV4ZWM6IGV4ZWNcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgbm90QVJlZ0V4cCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ub3QtYS1yZWdleHAnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGNvcnJlY3RJc1JlZ0V4cExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtaXMtcmVnZXhwLWxvZ2ljJyk7XG5cbnZhciBzdHJpbmdJbmRleE9mID0gdW5jdXJyeVRoaXMoJycuaW5kZXhPZik7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlc1xuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFjb3JyZWN0SXNSZWdFeHBMb2dpYygnaW5jbHVkZXMnKSB9LCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICByZXR1cm4gISF+c3RyaW5nSW5kZXhPZihcbiAgICAgIHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpLFxuICAgICAgdG9TdHJpbmcobm90QVJlZ0V4cChzZWFyY2hTdHJpbmcpKSxcbiAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkXG4gICAgKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2hhckF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jaGFyQXQ7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvcicpO1xuXG52YXIgU1RSSU5HX0lURVJBVE9SID0gJ1N0cmluZyBJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTVFJJTkdfSVRFUkFUT1IpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUtQEBpdGVyYXRvclxuZGVmaW5lSXRlcmF0b3IoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFNUUklOR19JVEVSQVRPUixcbiAgICBzdHJpbmc6IHRvU3RyaW5nKGl0ZXJhdGVkKSxcbiAgICBpbmRleDogMFxuICB9KTtcbi8vIGAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0lc3RyaW5naXRlcmF0b3Jwcm90b3R5cGUlLm5leHRcbn0sIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gIHZhciBzdHJpbmcgPSBzdGF0ZS5zdHJpbmc7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4O1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBzdHJpbmcubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gY2hhckF0KHN0cmluZywgaW5kZXgpO1xuICBzdGF0ZS5pbmRleCArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIG5vdEFSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbm90LWEtcmVnZXhwJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBjb3JyZWN0SXNSZWdFeHBMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LWlzLXJlZ2V4cC1sb2dpYycpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tc3RyaW5nLXByb3RvdHlwZS1zdGFydHN3aXRoIC0tIHNhZmVcbnZhciB1biRTdGFydHNXaXRoID0gdW5jdXJyeVRoaXMoJycuc3RhcnRzV2l0aCk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG52YXIgbWluID0gTWF0aC5taW47XG5cbnZhciBDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyA9IGNvcnJlY3RJc1JlZ0V4cExvZ2ljKCdzdGFydHNXaXRoJyk7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9wdWxsLzcwMlxudmFyIE1ETl9QT0xZRklMTF9CVUcgPSAhSVNfUFVSRSAmJiAhQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgJiYgISFmdW5jdGlvbiAoKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFN0cmluZy5wcm90b3R5cGUsICdzdGFydHNXaXRoJyk7XG4gIHJldHVybiBkZXNjcmlwdG9yICYmICFkZXNjcmlwdG9yLndyaXRhYmxlO1xufSgpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zdGFydHN3aXRoXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogIU1ETl9QT0xZRklMTF9CVUcgJiYgIUNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDIH0sIHtcbiAgc3RhcnRzV2l0aDogZnVuY3Rpb24gc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICB2YXIgdGhhdCA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgIG5vdEFSZWdFeHAoc2VhcmNoU3RyaW5nKTtcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChtaW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSk7XG4gICAgdmFyIHNlYXJjaCA9IHRvU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuIHVuJFN0YXJ0c1dpdGhcbiAgICAgID8gdW4kU3RhcnRzV2l0aCh0aGF0LCBzZWFyY2gsIGluZGV4KVxuICAgICAgOiBzdHJpbmdTbGljZSh0aGF0LCBpbmRleCwgaW5kZXggKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIi8vIGBTeW1ib2wucHJvdG90eXBlLmRlc2NyaXB0aW9uYCBnZXR0ZXJcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS5kZXNjcmlwdGlvblxuJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMnKTtcblxudmFyIE5hdGl2ZVN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgU3ltYm9sUHJvdG90eXBlID0gTmF0aXZlU3ltYm9sICYmIE5hdGl2ZVN5bWJvbC5wcm90b3R5cGU7XG5cbmlmIChERVNDUklQVE9SUyAmJiBpc0NhbGxhYmxlKE5hdGl2ZVN5bWJvbCkgJiYgKCEoJ2Rlc2NyaXB0aW9uJyBpbiBTeW1ib2xQcm90b3R5cGUpIHx8XG4gIC8vIFNhZmFyaSAxMiBidWdcbiAgTmF0aXZlU3ltYm9sKCkuZGVzY3JpcHRpb24gIT09IHVuZGVmaW5lZFxuKSkge1xuICB2YXIgRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlID0ge307XG4gIC8vIHdyYXAgU3ltYm9sIGNvbnN0cnVjdG9yIGZvciBjb3JyZWN0IHdvcmsgd2l0aCB1bmRlZmluZWQgZGVzY3JpcHRpb25cbiAgdmFyIFN5bWJvbFdyYXBwZXIgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiB0b1N0cmluZyhhcmd1bWVudHNbMF0pO1xuICAgIHZhciByZXN1bHQgPSBpc1Byb3RvdHlwZU9mKFN5bWJvbFByb3RvdHlwZSwgdGhpcylcbiAgICAgID8gbmV3IE5hdGl2ZVN5bWJvbChkZXNjcmlwdGlvbilcbiAgICAgIC8vIGluIEVkZ2UgMTMsIFN0cmluZyhTeW1ib2wodW5kZWZpbmVkKSkgPT09ICdTeW1ib2wodW5kZWZpbmVkKSdcbiAgICAgIDogZGVzY3JpcHRpb24gPT09IHVuZGVmaW5lZCA/IE5hdGl2ZVN5bWJvbCgpIDogTmF0aXZlU3ltYm9sKGRlc2NyaXB0aW9uKTtcbiAgICBpZiAoZGVzY3JpcHRpb24gPT09ICcnKSBFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmVbcmVzdWx0XSA9IHRydWU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKFN5bWJvbFdyYXBwZXIsIE5hdGl2ZVN5bWJvbCk7XG4gIFN5bWJvbFdyYXBwZXIucHJvdG90eXBlID0gU3ltYm9sUHJvdG90eXBlO1xuICBTeW1ib2xQcm90b3R5cGUuY29uc3RydWN0b3IgPSBTeW1ib2xXcmFwcGVyO1xuXG4gIHZhciBOQVRJVkVfU1lNQk9MID0gU3RyaW5nKE5hdGl2ZVN5bWJvbCgndGVzdCcpKSA9PSAnU3ltYm9sKHRlc3QpJztcbiAgdmFyIHN5bWJvbFRvU3RyaW5nID0gdW5jdXJyeVRoaXMoU3ltYm9sUHJvdG90eXBlLnRvU3RyaW5nKTtcbiAgdmFyIHN5bWJvbFZhbHVlT2YgPSB1bmN1cnJ5VGhpcyhTeW1ib2xQcm90b3R5cGUudmFsdWVPZik7XG4gIHZhciByZWdleHAgPSAvXlN5bWJvbFxcKCguKilcXClbXildKyQvO1xuICB2YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xuICB2YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbiAgZGVmaW5lUHJvcGVydHkoU3ltYm9sUHJvdG90eXBlLCAnZGVzY3JpcHRpb24nLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZGVzY3JpcHRpb24oKSB7XG4gICAgICB2YXIgc3ltYm9sID0gc3ltYm9sVmFsdWVPZih0aGlzKTtcbiAgICAgIHZhciBzdHJpbmcgPSBzeW1ib2xUb1N0cmluZyhzeW1ib2wpO1xuICAgICAgaWYgKGhhc093bihFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUsIHN5bWJvbCkpIHJldHVybiAnJztcbiAgICAgIHZhciBkZXNjID0gTkFUSVZFX1NZTUJPTCA/IHN0cmluZ1NsaWNlKHN0cmluZywgNywgLTEpIDogcmVwbGFjZShzdHJpbmcsIHJlZ2V4cCwgJyQxJyk7XG4gICAgICByZXR1cm4gZGVzYyA9PT0gJycgPyB1bmRlZmluZWQgOiBkZXNjO1xuICAgIH1cbiAgfSk7XG5cbiAgJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICBTeW1ib2w6IFN5bWJvbFdyYXBwZXJcbiAgfSk7XG59XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLml0ZXJhdG9yYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuaXRlcmF0b3JcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGFwcGx5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBuYXRpdmVPYmplY3RDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLWV4dGVybmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBkZWZpbmVQcm9wZXJ0aWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcycpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJyk7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLXdyYXBwZWQnKTtcbnZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZm9yRWFjaDtcblxudmFyIEhJRERFTiA9IHNoYXJlZEtleSgnaGlkZGVuJyk7XG52YXIgU1lNQk9MID0gJ1N5bWJvbCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgVE9fUFJJTUlUSVZFID0gd2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xuXG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTWU1CT0wpO1xuXG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgU3ltYm9sUHJvdG90eXBlID0gJFN5bWJvbCAmJiAkU3ltYm9sW1BST1RPVFlQRV07XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBRT2JqZWN0ID0gZ2xvYmFsLlFPYmplY3Q7XG52YXIgJHN0cmluZ2lmeSA9IGdldEJ1aWx0SW4oJ0pTT04nLCAnc3RyaW5naWZ5Jyk7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG52YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwuZjtcbnZhciBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmY7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuXG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvdHlwZVN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzdHJpbmctdG8tc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXRvLXN0cmluZy1yZWdpc3RyeScpO1xudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG5cbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIFVTRV9TRVRURVIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjcmlwdG9yID0gREVTQ1JJUFRPUlMgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0Q3JlYXRlKG5hdGl2ZURlZmluZVByb3BlcnR5KHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIHZhciBPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yID0gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdFByb3RvdHlwZSwgUCk7XG4gIGlmIChPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yKSBkZWxldGUgT2JqZWN0UHJvdG90eXBlW1BdO1xuICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgaWYgKE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IgJiYgTyAhPT0gT2JqZWN0UHJvdG90eXBlKSB7XG4gICAgbmF0aXZlRGVmaW5lUHJvcGVydHkoT2JqZWN0UHJvdG90eXBlLCBQLCBPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yKTtcbiAgfVxufSA6IG5hdGl2ZURlZmluZVByb3BlcnR5O1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcsIGRlc2NyaXB0aW9uKSB7XG4gIHZhciBzeW1ib2wgPSBBbGxTeW1ib2xzW3RhZ10gPSBuYXRpdmVPYmplY3RDcmVhdGUoU3ltYm9sUHJvdG90eXBlKTtcbiAgc2V0SW50ZXJuYWxTdGF0ZShzeW1ib2wsIHtcbiAgICB0eXBlOiBTWU1CT0wsXG4gICAgdGFnOiB0YWcsXG4gICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uXG4gIH0pO1xuICBpZiAoIURFU0NSSVBUT1JTKSBzeW1ib2wuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgcmV0dXJuIHN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGlmIChPID09PSBPYmplY3RQcm90b3R5cGUpICRkZWZpbmVQcm9wZXJ0eShPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBQLCBBdHRyaWJ1dGVzKTtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXkgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKGhhc093bihBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFBdHRyaWJ1dGVzLmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzT3duKE8sIEhJRERFTikpIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIEhJRERFTiwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHt9KSk7XG4gICAgICBPW0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChoYXNPd24oTywgSElEREVOKSAmJiBPW0hJRERFTl1ba2V5XSkgT1tISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEF0dHJpYnV0ZXMgPSBuYXRpdmVPYmplY3RDcmVhdGUoQXR0cmlidXRlcywgeyBlbnVtZXJhYmxlOiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2NyaXB0b3IoTywga2V5LCBBdHRyaWJ1dGVzKTtcbiAgfSByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkoTywga2V5LCBBdHRyaWJ1dGVzKTtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIHByb3BlcnRpZXMgPSB0b0luZGV4ZWRPYmplY3QoUHJvcGVydGllcyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhwcm9wZXJ0aWVzKS5jb25jYXQoJGdldE93blByb3BlcnR5U3ltYm9scyhwcm9wZXJ0aWVzKSk7XG4gICRmb3JFYWNoKGtleXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIURFU0NSSVBUT1JTIHx8IGNhbGwoJHByb3BlcnR5SXNFbnVtZXJhYmxlLCBwcm9wZXJ0aWVzLCBrZXkpKSAkZGVmaW5lUHJvcGVydHkoTywga2V5LCBwcm9wZXJ0aWVzW2tleV0pO1xuICB9KTtcbiAgcmV0dXJuIE87XG59O1xuXG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyBuYXRpdmVPYmplY3RDcmVhdGUoTykgOiAkZGVmaW5lUHJvcGVydGllcyhuYXRpdmVPYmplY3RDcmVhdGUoTyksIFByb3BlcnRpZXMpO1xufTtcblxudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIFAgPSB0b1Byb3BlcnR5S2V5KFYpO1xuICB2YXIgZW51bWVyYWJsZSA9IGNhbGwobmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUsIHRoaXMsIFApO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG90eXBlICYmIGhhc093bihBbGxTeW1ib2xzLCBQKSAmJiAhaGFzT3duKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIFApKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBlbnVtZXJhYmxlIHx8ICFoYXNPd24odGhpcywgUCkgfHwgIWhhc093bihBbGxTeW1ib2xzLCBQKSB8fCBoYXNPd24odGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1bUF1cbiAgICA/IGVudW1lcmFibGUgOiB0cnVlO1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICB2YXIgaXQgPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIHZhciBrZXkgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvdHlwZSAmJiBoYXNPd24oQWxsU3ltYm9scywga2V5KSAmJiAhaGFzT3duKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIGtleSkpIHJldHVybjtcbiAgdmFyIGRlc2NyaXB0b3IgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSk7XG4gIGlmIChkZXNjcmlwdG9yICYmIGhhc093bihBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzT3duKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIHtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSB0cnVlO1xuICB9XG4gIHJldHVybiBkZXNjcmlwdG9yO1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHZhciBuYW1lcyA9IG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXModG9JbmRleGVkT2JqZWN0KE8pKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICAkZm9yRWFjaChuYW1lcywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICghaGFzT3duKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhc093bihoaWRkZW5LZXlzLCBrZXkpKSBwdXNoKHJlc3VsdCwga2V5KTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhPKSB7XG4gIHZhciBJU19PQkpFQ1RfUFJPVE9UWVBFID0gTyA9PT0gT2JqZWN0UHJvdG90eXBlO1xuICB2YXIgbmFtZXMgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKElTX09CSkVDVF9QUk9UT1RZUEUgPyBPYmplY3RQcm90b3R5cGVTeW1ib2xzIDogdG9JbmRleGVkT2JqZWN0KE8pKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICAkZm9yRWFjaChuYW1lcywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChoYXNPd24oQWxsU3ltYm9scywga2V5KSAmJiAoIUlTX09CSkVDVF9QUk9UT1RZUEUgfHwgaGFzT3duKE9iamVjdFByb3RvdHlwZSwga2V5KSkpIHtcbiAgICAgIHB1c2gocmVzdWx0LCBBbGxTeW1ib2xzW2tleV0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyBgU3ltYm9sYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wtY29uc3RydWN0b3JcbmlmICghTkFUSVZFX1NZTUJPTCkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmIChpc1Byb3RvdHlwZU9mKFN5bWJvbFByb3RvdHlwZSwgdGhpcykpIHRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yJyk7XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gIWFyZ3VtZW50cy5sZW5ndGggfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiAkdG9TdHJpbmcoYXJndW1lbnRzWzBdKTtcbiAgICB2YXIgdGFnID0gdWlkKGRlc2NyaXB0aW9uKTtcbiAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG90eXBlKSBjYWxsKHNldHRlciwgT2JqZWN0UHJvdG90eXBlU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhc093bih0aGlzLCBISURERU4pICYmIGhhc093bih0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjcmlwdG9yKHRoaXMsIHRhZywgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgVVNFX1NFVFRFUikgc2V0U3ltYm9sRGVzY3JpcHRvcihPYmplY3RQcm90b3R5cGUsIHRhZywgeyBjb25maWd1cmFibGU6IHRydWUsIHNldDogc2V0dGVyIH0pO1xuICAgIHJldHVybiB3cmFwKHRhZywgZGVzY3JpcHRpb24pO1xuICB9O1xuXG4gIFN5bWJvbFByb3RvdHlwZSA9ICRTeW1ib2xbUFJPVE9UWVBFXTtcblxuICByZWRlZmluZShTeW1ib2xQcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnRhZztcbiAgfSk7XG5cbiAgcmVkZWZpbmUoJFN5bWJvbCwgJ3dpdGhvdXRTZXR0ZXInLCBmdW5jdGlvbiAoZGVzY3JpcHRpb24pIHtcbiAgICByZXR1cm4gd3JhcCh1aWQoZGVzY3JpcHRpb24pLCBkZXNjcmlwdGlvbik7XG4gIH0pO1xuXG4gIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIGRlZmluZVByb3BlcnR5TW9kdWxlLmYgPSAkZGVmaW5lUHJvcGVydHk7XG4gIGRlZmluZVByb3BlcnRpZXNNb2R1bGUuZiA9ICRkZWZpbmVQcm9wZXJ0aWVzO1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZiA9IGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlLmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdlbGxLbm93blN5bWJvbChuYW1lKSwgbmFtZSk7XG4gIH07XG5cbiAgaWYgKERFU0NSSVBUT1JTKSB7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtU3ltYm9sLWRlc2NyaXB0aW9uXG4gICAgbmF0aXZlRGVmaW5lUHJvcGVydHkoU3ltYm9sUHJvdG90eXBlLCAnZGVzY3JpcHRpb24nLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGRlc2NyaXB0aW9uKCkge1xuICAgICAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5kZXNjcmlwdGlvbjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIUlTX1BVUkUpIHtcbiAgICAgIHJlZGVmaW5lKE9iamVjdFByb3RvdHlwZSwgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH1cbn1cblxuJCh7IGdsb2JhbDogdHJ1ZSwgd3JhcDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCwgc2hhbTogIU5BVElWRV9TWU1CT0wgfSwge1xuICBTeW1ib2w6ICRTeW1ib2xcbn0pO1xuXG4kZm9yRWFjaChvYmplY3RLZXlzKFdlbGxLbm93blN5bWJvbHNTdG9yZSksIGZ1bmN0aW9uIChuYW1lKSB7XG4gIGRlZmluZVdlbGxLbm93blN5bWJvbChuYW1lKTtcbn0pO1xuXG4kKHsgdGFyZ2V0OiBTWU1CT0wsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wgfSwge1xuICAvLyBgU3ltYm9sLmZvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLmZvclxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBzdHJpbmcgPSAkdG9TdHJpbmcoa2V5KTtcbiAgICBpZiAoaGFzT3duKFN0cmluZ1RvU3ltYm9sUmVnaXN0cnksIHN0cmluZykpIHJldHVybiBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5W3N0cmluZ107XG4gICAgdmFyIHN5bWJvbCA9ICRTeW1ib2woc3RyaW5nKTtcbiAgICBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5W3N0cmluZ10gPSBzeW1ib2w7XG4gICAgU3ltYm9sVG9TdHJpbmdSZWdpc3RyeVtzeW1ib2xdID0gc3RyaW5nO1xuICAgIHJldHVybiBzeW1ib2w7XG4gIH0sXG4gIC8vIGBTeW1ib2wua2V5Rm9yYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wua2V5Zm9yXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sJyk7XG4gICAgaWYgKGhhc093bihTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5LCBzeW0pKSByZXR1cm4gU3ltYm9sVG9TdHJpbmdSZWdpc3RyeVtzeW1dO1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgVVNFX1NFVFRFUiA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBVU0VfU0VUVEVSID0gZmFsc2U7IH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgLy8gYE9iamVjdC5jcmVhdGVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvclxufSk7XG5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eXN5bWJvbHNcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gQ2hyb21lIDM4IGFuZCAzOSBgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc2AgZmFpbHMgb24gcHJpbWl0aXZlc1xuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzQ0M1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogZmFpbHMoZnVuY3Rpb24gKCkgeyBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZigxKTsgfSkgfSwge1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICAgIHJldHVybiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZih0b09iamVjdChpdCkpO1xuICB9XG59KTtcblxuLy8gYEpTT04uc3RyaW5naWZ5YCBtZXRob2QgYmVoYXZpb3Igd2l0aCBzeW1ib2xzXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWpzb24uc3RyaW5naWZ5XG5pZiAoJHN0cmluZ2lmeSkge1xuICB2YXIgRk9SQ0VEX0pTT05fU1RSSU5HSUZZID0gIU5BVElWRV9TWU1CT0wgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBzeW1ib2wgPSAkU3ltYm9sKCk7XG4gICAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgICByZXR1cm4gJHN0cmluZ2lmeShbc3ltYm9sXSkgIT0gJ1tudWxsXSdcbiAgICAgIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAgICAgfHwgJHN0cmluZ2lmeSh7IGE6IHN5bWJvbCB9KSAhPSAne30nXG4gICAgICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICAgICAgfHwgJHN0cmluZ2lmeShPYmplY3Qoc3ltYm9sKSkgIT0gJ3t9JztcbiAgfSk7XG5cbiAgJCh7IHRhcmdldDogJ0pTT04nLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRF9KU09OX1NUUklOR0lGWSB9LCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCwgcmVwbGFjZXIsIHNwYWNlKSB7XG4gICAgICB2YXIgYXJncyA9IGFycmF5U2xpY2UoYXJndW1lbnRzKTtcbiAgICAgIHZhciAkcmVwbGFjZXIgPSByZXBsYWNlcjtcbiAgICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICAgIGlmICghaXNBcnJheShyZXBsYWNlcikpIHJlcGxhY2VyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGlzQ2FsbGFibGUoJHJlcGxhY2VyKSkgdmFsdWUgPSBjYWxsKCRyZXBsYWNlciwgdGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgICB9O1xuICAgICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICAgICAgcmV0dXJuIGFwcGx5KCRzdHJpbmdpZnksIG51bGwsIGFyZ3MpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvcHJpbWl0aXZlXG5pZiAoIVN5bWJvbFByb3RvdHlwZVtUT19QUklNSVRJVkVdKSB7XG4gIHZhciB2YWx1ZU9mID0gU3ltYm9sUHJvdG90eXBlLnZhbHVlT2Y7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgLmxlbmd0aFxuICByZWRlZmluZShTeW1ib2xQcm90b3R5cGUsIFRPX1BSSU1JVElWRSwgZnVuY3Rpb24gKGhpbnQpIHtcbiAgICAvLyBUT0RPOiBpbXByb3ZlIGhpbnQgbG9naWNcbiAgICByZXR1cm4gY2FsbCh2YWx1ZU9mLCB0aGlzKTtcbiAgfSk7XG59XG4vLyBgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXWAgcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvc3RyaW5ndGFnXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCBTWU1CT0wpO1xuXG5oaWRkZW5LZXlzW0hJRERFTl0gPSB0cnVlO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBET01JdGVyYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcycpO1xudmFyIERPTVRva2VuTGlzdFByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20tdG9rZW4tbGlzdC1wcm90b3R5cGUnKTtcbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xuXG52YXIgaGFuZGxlUHJvdG90eXBlID0gZnVuY3Rpb24gKENvbGxlY3Rpb25Qcm90b3R5cGUpIHtcbiAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlICYmIENvbGxlY3Rpb25Qcm90b3R5cGUuZm9yRWFjaCAhPT0gZm9yRWFjaCkgdHJ5IHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgJ2ZvckVhY2gnLCBmb3JFYWNoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBDb2xsZWN0aW9uUHJvdG90eXBlLmZvckVhY2ggPSBmb3JFYWNoO1xuICB9XG59O1xuXG5mb3IgKHZhciBDT0xMRUNUSU9OX05BTUUgaW4gRE9NSXRlcmFibGVzKSB7XG4gIGlmIChET01JdGVyYWJsZXNbQ09MTEVDVElPTl9OQU1FXSkge1xuICAgIGhhbmRsZVByb3RvdHlwZShnbG9iYWxbQ09MTEVDVElPTl9OQU1FXSAmJiBnbG9iYWxbQ09MTEVDVElPTl9OQU1FXS5wcm90b3R5cGUpO1xuICB9XG59XG5cbmhhbmRsZVByb3RvdHlwZShET01Ub2tlbkxpc3RQcm90b3R5cGUpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBET01JdGVyYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcycpO1xudmFyIERPTVRva2VuTGlzdFByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20tdG9rZW4tbGlzdC1wcm90b3R5cGUnKTtcbnZhciBBcnJheUl0ZXJhdG9yTWV0aG9kcyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvck1ldGhvZHMudmFsdWVzO1xuXG52YXIgaGFuZGxlUHJvdG90eXBlID0gZnVuY3Rpb24gKENvbGxlY3Rpb25Qcm90b3R5cGUsIENPTExFQ1RJT05fTkFNRSkge1xuICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZSkge1xuICAgIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICAgIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gQXJyYXlWYWx1ZXMpIHRyeSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgQ29sbGVjdGlvblByb3RvdHlwZVtJVEVSQVRPUl0gPSBBcnJheVZhbHVlcztcbiAgICB9XG4gICAgaWYgKCFDb2xsZWN0aW9uUHJvdG90eXBlW1RPX1NUUklOR19UQUddKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgQ09MTEVDVElPTl9OQU1FKTtcbiAgICB9XG4gICAgaWYgKERPTUl0ZXJhYmxlc1tDT0xMRUNUSU9OX05BTUVdKSBmb3IgKHZhciBNRVRIT0RfTkFNRSBpbiBBcnJheUl0ZXJhdG9yTWV0aG9kcykge1xuICAgICAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gICAgICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZVtNRVRIT0RfTkFNRV0gIT09IEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXSkgdHJ5IHtcbiAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIE1FVEhPRF9OQU1FLCBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV0pO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgQ29sbGVjdGlvblByb3RvdHlwZVtNRVRIT0RfTkFNRV0gPSBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV07XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5mb3IgKHZhciBDT0xMRUNUSU9OX05BTUUgaW4gRE9NSXRlcmFibGVzKSB7XG4gIGhhbmRsZVByb3RvdHlwZShnbG9iYWxbQ09MTEVDVElPTl9OQU1FXSAmJiBnbG9iYWxbQ09MTEVDVElPTl9OQU1FXS5wcm90b3R5cGUsIENPTExFQ1RJT05fTkFNRSk7XG59XG5cbmhhbmRsZVByb3RvdHlwZShET01Ub2tlbkxpc3RQcm90b3R5cGUsICdET01Ub2tlbkxpc3QnKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiBkZWZpbmUob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gb2JqW2tleV07XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBJRSA4IGhhcyBhIGJyb2tlbiBPYmplY3QuZGVmaW5lUHJvcGVydHkgdGhhdCBvbmx5IHdvcmtzIG9uIERPTSBvYmplY3RzLlxuICAgIGRlZmluZSh7fSwgXCJcIik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGRlZmluZSA9IGZ1bmN0aW9uKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG9ialtrZXldID0gdmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIGRlZmluZShJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgZGVmaW5lKEdwLCBcImNvbnN0cnVjdG9yXCIsIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgZGVmaW5lKEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBcImNvbnN0cnVjdG9yXCIsIEdlbmVyYXRvckZ1bmN0aW9uKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkZWZpbmUoXG4gICAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsXG4gICAgdG9TdHJpbmdUYWdTeW1ib2wsXG4gICAgXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICk7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgZGVmaW5lKHByb3RvdHlwZSwgbWV0aG9kLCBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgZGVmaW5lKGdlbkZ1biwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yRnVuY3Rpb25cIik7XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUltcGwoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBkZWZpbmUoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUsIGFzeW5jSXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCwgUHJvbWlzZUltcGwpIHtcbiAgICBpZiAoUHJvbWlzZUltcGwgPT09IHZvaWQgMCkgUHJvbWlzZUltcGwgPSBQcm9taXNlO1xuXG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLFxuICAgICAgUHJvbWlzZUltcGxcbiAgICApO1xuXG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIC8vIE5vdGU6IFtcInJldHVyblwiXSBtdXN0IGJlIHVzZWQgZm9yIEVTMyBwYXJzaW5nIGNvbXBhdGliaWxpdHkuXG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSkge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIGRlZmluZShHcCwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yXCIpO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgZGVmaW5lKEdwLCBpdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuXG4gIGRlZmluZShHcCwgXCJ0b1N0cmluZ1wiLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgaW4gbW9kZXJuIGVuZ2luZXNcbiAgLy8gd2UgY2FuIGV4cGxpY2l0bHkgYWNjZXNzIGdsb2JhbFRoaXMuIEluIG9sZGVyIGVuZ2luZXMgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSBcIm9iamVjdFwiKSB7XG4gICAgZ2xvYmFsVGhpcy5yZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xuICB9IGVsc2Uge1xuICAgIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG4gIH1cbn1cbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsImV4cG9ydCBmdW5jdGlvbiBjYWxjVGlsZVR5cGUoaW5kZXgsIGJvYXJkU2l6ZSkge1xuICBjb25zdCBzcXVhcmUgPSBib2FyZFNpemUgKiBib2FyZFNpemU7XG4gIGlmIChpbmRleCA9PT0gMCkge1xuICAgIHJldHVybiAndG9wLWxlZnQnO1xuICB9XG4gIGlmIChpbmRleCA9PT0gYm9hcmRTaXplIC0gMSkge1xuICAgIHJldHVybiAndG9wLXJpZ2h0JztcbiAgfVxuICBpZiAoaW5kZXggPT09IHNxdWFyZSAtIGJvYXJkU2l6ZSkge1xuICAgIHJldHVybiAnYm90dG9tLWxlZnQnO1xuICB9XG4gIGlmIChpbmRleCA9PT0gc3F1YXJlIC0gMSkge1xuICAgIHJldHVybiAnYm90dG9tLXJpZ2h0JztcbiAgfVxuICBpZiAoaW5kZXggPiAwICYmIGluZGV4IDwgYm9hcmRTaXplIC0gMSkge1xuICAgIHJldHVybiAndG9wJztcbiAgfVxuICBpZiAoaW5kZXggPCBzcXVhcmUgLSAxICYmIGluZGV4ID4gc3F1YXJlIC0gYm9hcmRTaXplKSB7XG4gICAgcmV0dXJuICdib3R0b20nO1xuICB9XG4gIGlmIChpbmRleCAlIGJvYXJkU2l6ZSA9PT0gMCkge1xuICAgIHJldHVybiAnbGVmdCc7XG4gIH1cbiAgaWYgKGluZGV4ICUgYm9hcmRTaXplID09PSBib2FyZFNpemUgLSAxKSB7XG4gICAgcmV0dXJuICdyaWdodCc7XG4gIH1cblxuICByZXR1cm4gJ2NlbnRlcic7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjSGVhbHRoTGV2ZWwoaGVhbHRoKSB7XG4gIGlmIChoZWFsdGggPCAxNSkge1xuICAgIHJldHVybiAnY3JpdGljYWwnO1xuICB9XG5cbiAgaWYgKGhlYWx0aCA8IDUwKSB7XG4gICAgcmV0dXJuICdub3JtYWwnO1xuICB9XG5cbiAgcmV0dXJuICdoaWdoJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvdW50UG9zc2libGVJbmRleGVzKFxuICBjdXJyZW50SW5kZXgsXG4gIG1vdmVEaXN0YW5jZSxcbiAgYm9hcmRTaXplID0gOCxcbikge1xuICBjb25zdCBwb3NzaWJsZUluZGV4ZXMgPSBbXTtcbiAgZnVuY3Rpb24gY291bnRSb3codmFyaWFibGUpIHtcbiAgICByZXR1cm4gTWF0aC5jZWlsKCh2YXJpYWJsZSArIDEpIC8gYm9hcmRTaXplKTtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAxOyBpIDw9IG1vdmVEaXN0YW5jZTsgaSsrKSB7XG4gICAgY29uc3QgdXAgPSBjdXJyZW50SW5kZXggLSBib2FyZFNpemUgKiBpO1xuICAgIGNvbnN0IGRvd24gPSBjdXJyZW50SW5kZXggKyBib2FyZFNpemUgKiBpO1xuICAgIGNvbnN0IGxlZnQgPSBjdXJyZW50SW5kZXggLSAxICogaTtcbiAgICBjb25zdCByaWdodCA9IGN1cnJlbnRJbmRleCArIDEgKiBpO1xuICAgIGNvbnN0IHVwUmlnaHREaWFnID0gY3VycmVudEluZGV4IC0gKGJvYXJkU2l6ZSAtIDEpICogaTtcbiAgICBjb25zdCB1cExlZnREaWFnID0gY3VycmVudEluZGV4IC0gKGJvYXJkU2l6ZSArIDEpICogaTtcbiAgICBjb25zdCBkb3duUmlnaHREaWFnID0gY3VycmVudEluZGV4ICsgKGJvYXJkU2l6ZSArIDEpICogaTtcbiAgICBjb25zdCBkb3duTGVmdERpYWcgPSBjdXJyZW50SW5kZXggKyAoYm9hcmRTaXplIC0gMSkgKiBpO1xuXG4gICAgY29uc3QgY3VycmVudEluZGV4Um93ID0gY291bnRSb3coY3VycmVudEluZGV4KTtcblxuICAgIGlmICh1cCA+PSAwKSB7XG4gICAgICBwb3NzaWJsZUluZGV4ZXMucHVzaCh1cCk7XG4gICAgfVxuICAgIGlmIChkb3duIDw9IGJvYXJkU2l6ZSAqKiAyIC0gMSkge1xuICAgICAgcG9zc2libGVJbmRleGVzLnB1c2goZG93bik7XG4gICAgfVxuICAgIGlmIChjdXJyZW50SW5kZXhSb3cgPT09IGNvdW50Um93KGxlZnQpKSB7XG4gICAgICBwb3NzaWJsZUluZGV4ZXMucHVzaChsZWZ0KTtcbiAgICB9XG4gICAgaWYgKGN1cnJlbnRJbmRleFJvdyA9PT0gY291bnRSb3cocmlnaHQpKSB7XG4gICAgICBwb3NzaWJsZUluZGV4ZXMucHVzaChyaWdodCk7XG4gICAgfVxuICAgIGlmICh1cFJpZ2h0RGlhZyA+IDAgJiYgY3VycmVudEluZGV4Um93IC0gaSA9PT0gY291bnRSb3codXBSaWdodERpYWcpKSB7XG4gICAgICBwb3NzaWJsZUluZGV4ZXMucHVzaCh1cFJpZ2h0RGlhZyk7XG4gICAgfVxuICAgIGlmICh1cExlZnREaWFnID49IDAgJiYgY3VycmVudEluZGV4Um93IC0gaSA9PT0gY291bnRSb3codXBMZWZ0RGlhZykpIHtcbiAgICAgIHBvc3NpYmxlSW5kZXhlcy5wdXNoKHVwTGVmdERpYWcpO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICBkb3duUmlnaHREaWFnIDw9IGJvYXJkU2l6ZSAqKiAyIC0gMVxuICAgICAgJiYgY3VycmVudEluZGV4Um93ICsgaSA9PT0gY291bnRSb3coZG93blJpZ2h0RGlhZylcbiAgICApIHtcbiAgICAgIHBvc3NpYmxlSW5kZXhlcy5wdXNoKGRvd25SaWdodERpYWcpO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICBkb3duTGVmdERpYWcgPCBib2FyZFNpemUgKiogMiAtIDFcbiAgICAgICYmIGN1cnJlbnRJbmRleFJvdyArIGkgPT09IGNvdW50Um93KGRvd25MZWZ0RGlhZylcbiAgICApIHtcbiAgICAgIHBvc3NpYmxlSW5kZXhlcy5wdXNoKGRvd25MZWZ0RGlhZyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBwb3NzaWJsZUluZGV4ZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb3NzaWJsZU1vdmUoY3VycmVudEluZGV4LCBmdXR1cmVJbmRleCwgbW92ZURpc3RhbmNlKSB7XG4gIGNvbnN0IGNvdW50ZWRQb3NzaWJsZUluZGV4ZXMgPSBjb3VudFBvc3NpYmxlSW5kZXhlcyhcbiAgICBjdXJyZW50SW5kZXgsXG4gICAgbW92ZURpc3RhbmNlLFxuICApO1xuXG4gIHJldHVybiBjb3VudGVkUG9zc2libGVJbmRleGVzLmluY2x1ZGVzKGZ1dHVyZUluZGV4KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldFRpbWVyKHRpbWUpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICByZXNvbHZlKHRydWUpO1xuICAgIH0sIHRpbWUpO1xuICB9KTtcbn1cbiIsImNvbnN0IGNvbG91ciA9IHsgZ3JlZW46ICdncmVlbicsIHJlZDogJ3JlZCcsIHllbGxvdzogJ3llbGxvdycgfTtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3VyO1xuIiwiaW1wb3J0IHsgY2FsY0hlYWx0aExldmVsLCBjYWxjVGlsZVR5cGUgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBjb2xvdXIgZnJvbSAnLi9jb25zdGFudHMvY29sb3VyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZVBsYXkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmJvYXJkU2l6ZSA9IDg7XG4gICAgdGhpcy5jb250YWluZXIgPSBudWxsO1xuICAgIHRoaXMuYm9hcmRFbCA9IG51bGw7XG4gICAgdGhpcy5jZWxscyA9IFtdO1xuICAgIHRoaXMuY2VsbENsaWNrTGlzdGVuZXJzID0gW107XG4gICAgdGhpcy5jZWxsRW50ZXJMaXN0ZW5lcnMgPSBbXTtcbiAgICB0aGlzLmNlbGxMZWF2ZUxpc3RlbmVycyA9IFtdO1xuICAgIHRoaXMubmV3R2FtZUxpc3RlbmVycyA9IFtdO1xuICAgIHRoaXMuc2F2ZUdhbWVMaXN0ZW5lcnMgPSBbXTtcbiAgICB0aGlzLmxvYWRHYW1lTGlzdGVuZXJzID0gW107XG4gIH1cblxuICBiaW5kVG9ET00oY29udGFpbmVyKSB7XG4gICAgaWYgKCEoY29udGFpbmVyIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvbnRhaW5lciBpcyBub3QgSFRNTEVsZW1lbnQnKTtcbiAgICB9XG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gIH1cblxuICAvKipcbiAgICogRHJhd3MgYm9hcmRFbCB3aXRoIHNwZWNpZmljIHRoZW1lXG4gICAqXG4gICAqIEBwYXJhbSB0aGVtZVxuICAgKi9cbiAgZHJhd1VpKHRoZW1lKSB7XG4gICAgdGhpcy5jaGVja0JpbmRpbmcoKTtcblxuICAgIHRoaXMuY29udGFpbmVyLmlubmVySFRNTCA9IGBcbiAgICAgIDxkaXYgY2xhc3M9XCJjb250cm9sc1wiPlxuICAgICAgICA8YnV0dG9uIGRhdGEtaWQ9XCJhY3Rpb24tcmVzdGFydFwiIGNsYXNzPVwiYnRuXCI+TmV3IEdhbWU8L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvbiBkYXRhLWlkPVwiYWN0aW9uLXNhdmVcIiBjbGFzcz1cImJ0blwiPlNhdmUgR2FtZTwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIGRhdGEtaWQ9XCJhY3Rpb24tbG9hZFwiIGNsYXNzPVwiYnRuXCI+TG9hZCBHYW1lPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJnYW1lLWluZm9cIj5cbiAgICAgICAgPHNwYW4gZGF0YS1pZD1cImN1cnJlbnQtbGV2ZWxcIj5DdXJyZW50IGxldmVsOiAxPC9zcGFuPlxuICAgICAgICA8c3BhbiBkYXRhLWlkPVwiY3VycmVudC1zY29yZVwiPkN1cnJlbnQgU2NvcmU6IDA8L3NwYW4+XG4gICAgICAgIDxzcGFuIGRhdGEtaWQ9XCJiZXN0LXNjb3JlXCI+QmVzdCBTY29yZTogMDwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImJvYXJkLWNvbnRhaW5lclwiPlxuICAgICAgICA8ZGl2IGRhdGEtaWQ9XCJib2FyZFwiIGNsYXNzPVwiYm9hcmRcIj48L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIGA7XG5cbiAgICB0aGlzLm5ld0dhbWVFbCA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWlkPWFjdGlvbi1yZXN0YXJ0XScpO1xuICAgIHRoaXMuc2F2ZUdhbWVFbCA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWlkPWFjdGlvbi1zYXZlXScpO1xuICAgIHRoaXMubG9hZEdhbWVFbCA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWlkPWFjdGlvbi1sb2FkXScpO1xuXG4gICAgdGhpcy5jdXJyZW50TGV2ZWwgPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1pZD1jdXJyZW50LWxldmVsXScpO1xuICAgIHRoaXMuY3VycmVudFNjb3JlID0gdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcignW2RhdGEtaWQ9Y3VycmVudC1zY29yZV0nKTtcbiAgICB0aGlzLmJlc3RTY29yZSA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWlkPWJlc3Qtc2NvcmVdJyk7XG5cbiAgICB0aGlzLm5ld0dhbWVFbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4gdGhpcy5vbk5ld0dhbWVDbGljayhldmVudCkpO1xuICAgIHRoaXMuc2F2ZUdhbWVFbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4gdGhpcy5vblNhdmVHYW1lQ2xpY2soZXZlbnQpKTtcbiAgICB0aGlzLmxvYWRHYW1lRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHRoaXMub25Mb2FkR2FtZUNsaWNrKGV2ZW50KSk7XG5cbiAgICB0aGlzLmJvYXJkRWwgPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1pZD1ib2FyZF0nKTtcblxuICAgIHRoaXMuYm9hcmRFbC5jbGFzc0xpc3QuYWRkKHRoZW1lKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYm9hcmRTaXplICoqIDI7IGkgKz0gMSkge1xuICAgICAgY29uc3QgY2VsbEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBjZWxsRWwuY2xhc3NMaXN0LmFkZChcbiAgICAgICAgJ2NlbGwnLFxuICAgICAgICAnbWFwLXRpbGUnLFxuICAgICAgICBgbWFwLXRpbGUtJHtjYWxjVGlsZVR5cGUoaSwgdGhpcy5ib2FyZFNpemUpfWAsXG4gICAgICApO1xuICAgICAgY2VsbEVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCAoZXZlbnQpID0+IHRoaXMub25DZWxsRW50ZXIoZXZlbnQpKTtcbiAgICAgIGNlbGxFbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgKGV2ZW50KSA9PiB0aGlzLm9uQ2VsbExlYXZlKGV2ZW50KSk7XG4gICAgICBjZWxsRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHRoaXMub25DZWxsQ2xpY2soZXZlbnQpKTtcbiAgICAgIHRoaXMuYm9hcmRFbC5hcHBlbmRDaGlsZChjZWxsRWwpO1xuICAgIH1cblxuICAgIHRoaXMuY2VsbHMgPSBBcnJheS5mcm9tKHRoaXMuYm9hcmRFbC5jaGlsZHJlbik7XG4gIH1cblxuICAvKipcbiAgICogRHJhd3MgcG9zaXRpb25zICh3aXRoIGNoYXJzKSBvbiBib2FyZEVsXG4gICAqXG4gICAqIEBwYXJhbSBwb3NpdGlvbnMgYXJyYXkgb2YgUG9zaXRpb25lZENoYXJhY3RlciBvYmplY3RzXG4gICAqL1xuICByZWRyYXdQb3NpdGlvbnMocG9zaXRpb25zKSB7XG4gICAgZm9yIChjb25zdCBjZWxsIG9mIHRoaXMuY2VsbHMpIHtcbiAgICAgIGNlbGwuaW5uZXJIVE1MID0gJyc7XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBwb3NpdGlvbiBvZiBwb3NpdGlvbnMpIHtcbiAgICAgIGNvbnN0IGNlbGxFbCA9IHRoaXMuYm9hcmRFbC5jaGlsZHJlbltwb3NpdGlvbi5wb3NpdGlvbl07XG4gICAgICBjb25zdCBjaGFyRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGNoYXJFbC5jbGFzc0xpc3QuYWRkKCdjaGFyYWN0ZXInLCBwb3NpdGlvbi5jaGFyYWN0ZXIudHlwZSk7XG5cbiAgICAgIGNvbnN0IGhlYWx0aEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBoZWFsdGhFbC5jbGFzc0xpc3QuYWRkKCdoZWFsdGgtbGV2ZWwnKTtcblxuICAgICAgY29uc3QgaGVhbHRoSW5kaWNhdG9yRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGhlYWx0aEluZGljYXRvckVsLmNsYXNzTGlzdC5hZGQoXG4gICAgICAgICdoZWFsdGgtbGV2ZWwtaW5kaWNhdG9yJyxcbiAgICAgICAgYGhlYWx0aC1sZXZlbC1pbmRpY2F0b3ItJHtjYWxjSGVhbHRoTGV2ZWwocG9zaXRpb24uY2hhcmFjdGVyLmhlYWx0aCl9YCxcbiAgICAgICk7XG4gICAgICBoZWFsdGhJbmRpY2F0b3JFbC5zdHlsZS53aWR0aCA9IGAke3Bvc2l0aW9uLmNoYXJhY3Rlci5oZWFsdGh9JWA7XG4gICAgICBoZWFsdGhFbC5hcHBlbmRDaGlsZChoZWFsdGhJbmRpY2F0b3JFbCk7XG5cbiAgICAgIGNoYXJFbC5hcHBlbmRDaGlsZChoZWFsdGhFbCk7XG4gICAgICBjZWxsRWwuYXBwZW5kQ2hpbGQoY2hhckVsKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWRkIGxpc3RlbmVyIHRvIG1vdXNlIGVudGVyIGZvciBjZWxsXG4gICAqXG4gICAqIEBwYXJhbSBjYWxsYmFja1xuICAgKi9cbiAgYWRkQ2VsbEVudGVyTGlzdGVuZXIoY2FsbGJhY2spIHtcbiAgICB0aGlzLmNlbGxFbnRlckxpc3RlbmVycy5wdXNoKGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgbGlzdGVuZXIgdG8gbW91c2UgbGVhdmUgZm9yIGNlbGxcbiAgICpcbiAgICogQHBhcmFtIGNhbGxiYWNrXG4gICAqL1xuICBhZGRDZWxsTGVhdmVMaXN0ZW5lcihjYWxsYmFjaykge1xuICAgIHRoaXMuY2VsbExlYXZlTGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBsaXN0ZW5lciB0byBtb3VzZSBjbGljayBmb3IgY2VsbFxuICAgKlxuICAgKiBAcGFyYW0gY2FsbGJhY2tcbiAgICovXG4gIGFkZENlbGxDbGlja0xpc3RlbmVyKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5jZWxsQ2xpY2tMaXN0ZW5lcnMucHVzaChjYWxsYmFjayk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGxpc3RlbmVyIHRvIFwiTmV3IEdhbWVcIiBidXR0b24gY2xpY2tcbiAgICpcbiAgICogQHBhcmFtIGNhbGxiYWNrXG4gICAqL1xuICBhZGROZXdHYW1lTGlzdGVuZXIoY2FsbGJhY2spIHtcbiAgICB0aGlzLm5ld0dhbWVMaXN0ZW5lcnMucHVzaChjYWxsYmFjayk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGxpc3RlbmVyIHRvIFwiU2F2ZSBHYW1lXCIgYnV0dG9uIGNsaWNrXG4gICAqXG4gICAqIEBwYXJhbSBjYWxsYmFja1xuICAgKi9cbiAgYWRkU2F2ZUdhbWVMaXN0ZW5lcihjYWxsYmFjaykge1xuICAgIHRoaXMuc2F2ZUdhbWVMaXN0ZW5lcnMucHVzaChjYWxsYmFjayk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGxpc3RlbmVyIHRvIFwiTG9hZCBHYW1lXCIgYnV0dG9uIGNsaWNrXG4gICAqXG4gICAqIEBwYXJhbSBjYWxsYmFja1xuICAgKi9cbiAgYWRkTG9hZEdhbWVMaXN0ZW5lcihjYWxsYmFjaykge1xuICAgIHRoaXMubG9hZEdhbWVMaXN0ZW5lcnMucHVzaChjYWxsYmFjayk7XG4gIH1cblxuICBvbkNlbGxFbnRlcihldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmNlbGxzLmluZGV4T2YoZXZlbnQuY3VycmVudFRhcmdldCk7XG4gICAgdGhpcy5jZWxsRW50ZXJMaXN0ZW5lcnMuZm9yRWFjaCgobykgPT4gby5jYWxsKG51bGwsIGluZGV4KSk7XG4gIH1cblxuICBvbkNlbGxMZWF2ZShldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmNlbGxzLmluZGV4T2YoZXZlbnQuY3VycmVudFRhcmdldCk7XG4gICAgdGhpcy5jZWxsTGVhdmVMaXN0ZW5lcnMuZm9yRWFjaCgobykgPT4gby5jYWxsKG51bGwsIGluZGV4KSk7XG4gIH1cblxuICBvbkNlbGxDbGljayhldmVudCkge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5jZWxscy5pbmRleE9mKGV2ZW50LmN1cnJlbnRUYXJnZXQpO1xuICAgIHRoaXMuY2VsbENsaWNrTGlzdGVuZXJzLmZvckVhY2goKG8pID0+IG8uY2FsbChudWxsLCBpbmRleCkpO1xuICB9XG5cbiAgb25OZXdHYW1lQ2xpY2soZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMubmV3R2FtZUxpc3RlbmVycy5mb3JFYWNoKChvKSA9PiBvLmNhbGwobnVsbCkpO1xuICB9XG5cbiAgb25TYXZlR2FtZUNsaWNrKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLnNhdmVHYW1lTGlzdGVuZXJzLmZvckVhY2goKG8pID0+IG8uY2FsbChudWxsKSk7XG4gIH1cblxuICBvbkxvYWRHYW1lQ2xpY2soZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMubG9hZEdhbWVMaXN0ZW5lcnMuZm9yRWFjaCgobykgPT4gby5jYWxsKG51bGwpKTtcbiAgfVxuXG4gIHN0YXRpYyBzaG93RXJyb3IobWVzc2FnZSkge1xuICAgIGFsZXJ0KG1lc3NhZ2UpO1xuICB9XG5cbiAgc3RhdGljIHNob3dNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICBhbGVydChtZXNzYWdlKTtcbiAgfVxuXG4gIHNlbGVjdENlbGwoaW5kZXgsIGNvbG9yID0gY29sb3VyLnllbGxvdykge1xuICAgIHRoaXMuZGVzZWxlY3RDZWxsKGluZGV4KTtcbiAgICB0aGlzLmNlbGxzW2luZGV4XS5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcsIGBzZWxlY3RlZC0ke2NvbG9yfWApO1xuICB9XG5cbiAgZGVzZWxlY3RDZWxsKGluZGV4KSB7XG4gICAgY29uc3QgY2VsbCA9IHRoaXMuY2VsbHNbaW5kZXhdO1xuICAgIGNlbGwuY2xhc3NMaXN0LnJlbW92ZShcbiAgICAgIC4uLkFycmF5LmZyb20oY2VsbC5jbGFzc0xpc3QpLmZpbHRlcigobykgPT4gby5zdGFydHNXaXRoKCdzZWxlY3RlZCcpKSxcbiAgICApO1xuICAgIGNlbGwuY2xhc3NMaXN0LnJlbW92ZShcbiAgICAgIC4uLkFycmF5LmZyb20oY2VsbC5jbGFzc0xpc3QpLmZpbHRlcigobykgPT4gby5zdGFydHNXaXRoKCdzZWxlY3RlZCcpKSxcbiAgICApO1xuICB9XG5cbiAgc2hvd0NlbGxUb29sdGlwKG1lc3NhZ2UsIGluZGV4KSB7XG4gICAgdGhpcy5jZWxsc1tpbmRleF0udGl0bGUgPSBtZXNzYWdlO1xuICB9XG5cbiAgaGlkZUNlbGxUb29sdGlwKGluZGV4KSB7XG4gICAgdGhpcy5jZWxsc1tpbmRleF0udGl0bGUgPSAnJztcbiAgfVxuXG4gIHNob3dEYW1hZ2UoaW5kZXgsIGRhbWFnZSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgY29uc3QgY2VsbCA9IHRoaXMuY2VsbHNbaW5kZXhdO1xuICAgICAgY29uc3QgZGFtYWdlRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICBkYW1hZ2VFbC50ZXh0Q29udGVudCA9IGRhbWFnZTtcbiAgICAgIGRhbWFnZUVsLmNsYXNzTGlzdC5hZGQoJ2RhbWFnZScpO1xuICAgICAgY2VsbC5hcHBlbmRDaGlsZChkYW1hZ2VFbCk7XG5cbiAgICAgIGRhbWFnZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ2FuaW1hdGlvbmVuZCcsICgpID0+IHtcbiAgICAgICAgY2VsbC5yZW1vdmVDaGlsZChkYW1hZ2VFbCk7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgc2V0Q3Vyc29yKGN1cnNvcikge1xuICAgIHRoaXMuYm9hcmRFbC5zdHlsZS5jdXJzb3IgPSBjdXJzb3I7XG4gIH1cblxuICBjaGVja0JpbmRpbmcoKSB7XG4gICAgaWYgKHRoaXMuY29udGFpbmVyID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dhbWVQbGF5IG5vdCBiaW5kIHRvIERPTScpO1xuICAgIH1cbiAgfVxuXG4gIHNldEN1cnJlbnRMZXZlbChsZXZlbCkge1xuICAgIHRoaXMuY3VycmVudExldmVsLnRleHRDb250ZW50ID0gYEN1cnJlbnQgTGV2ZWw6ICR7bGV2ZWx9YDtcbiAgfVxuXG4gIHNldEN1cnJlbnRTY29yZShwb2ludHMpIHtcbiAgICB0aGlzLmN1cnJlbnRTY29yZS50ZXh0Q29udGVudCA9IGBDdXJyZW50IFNjb3JlOiAke3BvaW50c31gO1xuICB9XG5cbiAgc2V0QmVzdFNjb3JlKGhpZ2hlc3RQb2ludHMpIHtcbiAgICB0aGlzLmJlc3RTY29yZS50ZXh0Q29udGVudCA9IGBCZXN0IFNjb3JlOiAke2hpZ2hlc3RQb2ludHN9YDtcbiAgfVxufVxuIiwiY29uc3QgdGhlbWVzID0ge1xuICBwcmFpcmllOiAncHJhaXJpZScsXG4gIGRlc2VydDogJ2Rlc2VydCcsXG4gIGFyY3RpYzogJ2FyY3RpYycsXG4gIG1vdW50YWluOiAnbW91bnRhaW4nLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgdGhlbWVzO1xuIiwiY29uc3QgdGVhbXMgPSB7IHBsYXllcjogJ2h1bWFuJywgZW5lbXk6ICdjb21wdXRlcicgfTtcblxuZXhwb3J0IGRlZmF1bHQgdGVhbXM7XG4iLCJjb25zdCBjdXJzb3JzID0ge1xuICBhdXRvOiAnYXV0bycsXG4gIHBvaW50ZXI6ICdwb2ludGVyJyxcbiAgY3Jvc3NoYWlyOiAnY3Jvc3NoYWlyJyxcbiAgbm90YWxsb3dlZDogJ25vdC1hbGxvd2VkJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGN1cnNvcnM7XG4iLCJjb25zdCBlcnJvcnMgPSB7XG4gIG5vdFlvdXJzOiAnSXQgaXMgbm90IHlvdXIgY2hhcmFjdGVyLiBDaG9vc2UgeW91cnMnLFxuICBub0NoYXJhY3RlcjogJ1RoZXJlIGlzIG5vIGNoYXJhY3RlciBoZXJlLiBDaG9vc2UgYW55IGNlbGwgd2l0aCBhIGNoYXJhY3RlcicsXG4gIHRvb0ZhcjogJ0l0IGlzIHRvbyBmYXIgdG8gYXR0YWNrIHRoaXMgY2hhcmFjdGVyJyxcbiAgbm90QWxsb3dlZDogJ0l0IGlzIG5vdCBhbGxvd2VkIHRvIG1vdmUgdGhlcmUnLFxuICBub3RZb3VyVHVybjogJ0l0IGlzIG5vdCB5b3VyIHR1cm4geWV0JyxcbiAgbG9zdDogJ1lvdSBsb3N0LiBCZXR0ZXIgbHVjayBuZXh0IHRpbWUnLFxuICB3cm9uZzogJ1NvbWV0aGluZyB3ZW50IHdyb25nJyxcbiAgZGVhZDogJ1lvdSBjYW5ub3QgbGV2ZWwgdXAgYSBkZWFkIGNoYXJhY3RlcicsXG4gIG5vdEluc3RhbmNlOiAnY2hhcmFjdGVyIG11c3QgYmUgaW5zdGFuY2Ugb2YgQ2hhcmFjdGVyIG9yIGl0cyBjaGlsZHJlbicsXG4gIG5vdE51bWJlcjogJ3Bvc2l0aW9uIG11c3QgYmUgYSBudW1iZXInLFxuICBpbnZhbGlkOiAnSW52YWxpZCBzdGF0ZScsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBlcnJvcnM7XG4iLCJjb25zdCBtZXNzYWdlcyA9IHtcbiAgY29uZ3JhdHM6ICdDb25ncmF0cyEgVGhpcyB3YXMgdGhlIGxhc3QgbGV2ZWwnLFxuICBzYXZlZDogJ1NhdmVkJyxcbiAgbG9hZGVkOiAnTG9hZGVkJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1lc3NhZ2VzO1xuIiwiaW1wb3J0IGVycm9ycyBmcm9tICcuL2NvbnN0YW50cy9lcnJvcnMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaGFyYWN0ZXIge1xuICBjb25zdHJ1Y3RvcihsZXZlbCwgdHlwZSA9ICdnZW5lcmljJykge1xuICAgIHRoaXMubGV2ZWwgPSBsZXZlbDtcbiAgICB0aGlzLmF0dGFjayA9IDA7XG4gICAgdGhpcy5kZWZlbmNlID0gMDtcbiAgICB0aGlzLmhlYWx0aCA9IDUwO1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgaWYgKG5ldy50YXJnZXQubmFtZSA9PT0gJ0NoYXJhY3RlcicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJJdCdzIG5vdCBhbGxvd2VkIHRvIGNyZWF0ZSBuZXcgaW5zdGFuY2VzIG9mIENoYXJhY3RlcnMgdXNpbmcgJ25ldyBDaGFyYWN0ZXInLiBQbGVhc2UgdXNlIGNsYXNzZXMgdGhhdCBleHRlbmQgY2xhc3MgQ2hhcmFjdGVyIGluc3RlYWQgKEJvd21hbiwgRGFlbW9uLCBldGMuKVwiLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBsZXZlbFVwKCkge1xuICAgIGlmICh0aGlzLmhlYWx0aCA+IDApIHtcbiAgICAgIHRoaXMubGV2ZWwgKz0gMTtcbiAgICAgIHRoaXMuYXR0YWNrID0gTWF0aC5tYXgoXG4gICAgICAgIHRoaXMuYXR0YWNrLFxuICAgICAgICBNYXRoLnJvdW5kKHRoaXMuYXR0YWNrICogKDAuOCArIHRoaXMuaGVhbHRoIC8gMTAwKSksXG4gICAgICApO1xuICAgICAgdGhpcy5kZWZlbmNlID0gTWF0aC5tYXgoXG4gICAgICAgIHRoaXMuZGVmZW5jZSxcbiAgICAgICAgTWF0aC5yb3VuZCh0aGlzLmRlZmVuY2UgKiAoMC44ICsgdGhpcy5oZWFsdGggLyAxMDApKSxcbiAgICAgICk7XG4gICAgICB0aGlzLmhlYWx0aCA8IDIwID8gKHRoaXMuaGVhbHRoICs9IDgwKSA6ICh0aGlzLmhlYWx0aCA9IDEwMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcnMuZGVhZCk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgQ2hhcmFjdGVyIGZyb20gJy4vQ2hhcmFjdGVyJztcbmltcG9ydCBlcnJvcnMgZnJvbSAnLi9jb25zdGFudHMvZXJyb3JzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9zaXRpb25lZENoYXJhY3RlciB7XG4gIGNvbnN0cnVjdG9yKGNoYXJhY3RlciwgcG9zaXRpb24pIHtcbiAgICBpZiAoIShjaGFyYWN0ZXIgaW5zdGFuY2VvZiBDaGFyYWN0ZXIpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JzLm5vdEluc3RhbmNlKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHBvc2l0aW9uICE9PSAnbnVtYmVyJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9ycy5ub3ROdW1iZXIpO1xuICAgIH1cblxuICAgIHRoaXMuY2hhcmFjdGVyID0gY2hhcmFjdGVyO1xuICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgfVxufVxuIiwiaW1wb3J0IFBvc2l0aW9uZWRDaGFyYWN0ZXIgZnJvbSAnLi9Qb3NpdGlvbmVkQ2hhcmFjdGVyJztcbmltcG9ydCB0ZWFtcyBmcm9tICcuL2NvbnN0YW50cy90ZWFtcyc7XG5cbi8qKlxuICogR2VuZXJhdGVzIHJhbmRvbSBjaGFyYWN0ZXJzXG4gKlxuICogQHBhcmFtIGFsbG93ZWRUeXBlcyBpdGVyYWJsZSBvZiBjbGFzc2VzXG4gKiBAcGFyYW0gbWF4TGV2ZWwgbWF4IGNoYXJhY3RlciBsZXZlbFxuICogQHJldHVybnMgQ2hhcmFjdGVyIHR5cGUgY2hpbGRyZW4gKGV4LiBNYWdpY2lhbiwgQm93bWFuLCBldGMpXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uKiBjaGFyYWN0ZXJHZW5lcmF0b3IoYWxsb3dlZFR5cGVzLCBtYXhMZXZlbCkge1xuICBjb25zdCB0eXBlID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYWxsb3dlZFR5cGVzLmxlbmd0aCk7XG4gIGNvbnN0IGxldmVsID0gTWF0aC5mbG9vcigxICsgTWF0aC5yYW5kb20oKSAqIG1heExldmVsKTtcbiAgeWllbGQgbmV3IGFsbG93ZWRUeXBlc1t0eXBlXShsZXZlbCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVRlYW0oYWxsb3dlZFR5cGVzLCBtYXhMZXZlbCwgY2hhcmFjdGVyQ291bnQpIHtcbiAgY29uc3QgdGVhbSA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2hhcmFjdGVyQ291bnQ7IGkrKykge1xuICAgIHRlYW0ucHVzaChjaGFyYWN0ZXJHZW5lcmF0b3IoYWxsb3dlZFR5cGVzLCBtYXhMZXZlbCkubmV4dCgpLnZhbHVlKTtcbiAgfVxuXG4gIHJldHVybiB0ZWFtO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVQb3NpdGlvbih0ZWFtLCBzaWRlLCBib2FyZFNpemUgPSA4KSB7XG4gIGNvbnN0IGFsbENlbGxzID0gWy4uLkFycmF5KGJvYXJkU2l6ZSAqKiAyKS5rZXlzKCldO1xuICBsZXQgcG9zc2libGVDZWxscyA9IG51bGw7XG5cbiAgaWYgKHNpZGUgPT09IHRlYW1zLnBsYXllcikge1xuICAgIHBvc3NpYmxlQ2VsbHMgPSBhbGxDZWxscy5maWx0ZXIoXG4gICAgICAoY2VsbCkgPT4gY2VsbCAlIGJvYXJkU2l6ZSA9PT0gMCB8fCBjZWxsICUgYm9hcmRTaXplID09PSAxLFxuICAgICk7XG4gIH0gZWxzZSBpZiAoc2lkZSA9PT0gdGVhbXMuZW5lbXkpIHtcbiAgICBwb3NzaWJsZUNlbGxzID0gYWxsQ2VsbHMuZmlsdGVyKFxuICAgICAgKGNlbGwpID0+IGNlbGwgJSBib2FyZFNpemUgPT09IDYgfHwgY2VsbCAlIGJvYXJkU2l6ZSA9PT0gNyxcbiAgICApO1xuICB9XG5cbiAgY29uc3QgcG9zaXRpb25lZENoYXJhY3RlcnMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRlYW0ubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBpbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHBvc3NpYmxlQ2VsbHMubGVuZ3RoKTtcbiAgICBjb25zdCBwb3NpdGlvbiA9IHBvc3NpYmxlQ2VsbHNbaW5kZXhdO1xuXG4gICAgcG9zc2libGVDZWxscy5zcGxpY2UoaW5kZXgsIDEpO1xuXG4gICAgcG9zaXRpb25lZENoYXJhY3RlcnMucHVzaChuZXcgUG9zaXRpb25lZENoYXJhY3Rlcih0ZWFtW2ldLCBwb3NpdGlvbikpO1xuICB9XG5cbiAgcmV0dXJuIHBvc2l0aW9uZWRDaGFyYWN0ZXJzO1xufVxuIiwiaW1wb3J0IENoYXJhY3RlciBmcm9tICcuLi9DaGFyYWN0ZXInO1xuaW1wb3J0IHRlYW1zIGZyb20gJy4uL2NvbnN0YW50cy90ZWFtcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJvd21hbiBleHRlbmRzIENoYXJhY3RlciB7XG4gIGNvbnN0cnVjdG9yKGxldmVsKSB7XG4gICAgc3VwZXIobGV2ZWwsIG5ldy50YXJnZXQubmFtZSk7XG4gICAgLy8gdGhpcy50eXBlID0gJ2Jvd21hbic7XG4gICAgdGhpcy5hdHRhY2sgPSAyNTtcbiAgICB0aGlzLmRlZmVuY2UgPSAyNTtcbiAgICB0aGlzLmF0dGFja0Rpc3RhbmNlID0gMjtcbiAgICB0aGlzLm1vdmVEaXN0YW5jZSA9IDI7XG4gICAgdGhpcy50ZWFtID0gdGVhbXMucGxheWVyO1xuICB9XG59XG4iLCJpbXBvcnQgQ2hhcmFjdGVyIGZyb20gJy4uL0NoYXJhY3Rlcic7XG5pbXBvcnQgdGVhbXMgZnJvbSAnLi4vY29uc3RhbnRzL3RlYW1zJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGFlbW9uIGV4dGVuZHMgQ2hhcmFjdGVyIHtcbiAgY29uc3RydWN0b3IobGV2ZWwpIHtcbiAgICBzdXBlcihsZXZlbCwgbmV3LnRhcmdldC5uYW1lKTtcbiAgICAvLyB0aGlzLnR5cGUgPSAnZGFlbW9uJztcbiAgICB0aGlzLmF0dGFjayA9IDEwO1xuICAgIHRoaXMuZGVmZW5jZSA9IDQwO1xuICAgIHRoaXMuYXR0YWNrRGlzdGFuY2UgPSA0O1xuICAgIHRoaXMubW92ZURpc3RhbmNlID0gMTtcbiAgICB0aGlzLnRlYW0gPSB0ZWFtcy5lbmVteTtcbiAgfVxufVxuIiwiaW1wb3J0IENoYXJhY3RlciBmcm9tICcuLi9DaGFyYWN0ZXInO1xuaW1wb3J0IHRlYW1zIGZyb20gJy4uL2NvbnN0YW50cy90ZWFtcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hZ2ljaWFuIGV4dGVuZHMgQ2hhcmFjdGVyIHtcbiAgY29uc3RydWN0b3IobGV2ZWwpIHtcbiAgICBzdXBlcihsZXZlbCwgbmV3LnRhcmdldC5uYW1lKTtcbiAgICAvLyB0aGlzLnR5cGUgPSAnbWFnaWNpYW4nO1xuICAgIHRoaXMuYXR0YWNrID0gMTA7XG4gICAgdGhpcy5kZWZlbmNlID0gNDA7XG4gICAgdGhpcy5hdHRhY2tEaXN0YW5jZSA9IDQ7XG4gICAgdGhpcy5tb3ZlRGlzdGFuY2UgPSAxO1xuICAgIHRoaXMudGVhbSA9IHRlYW1zLnBsYXllcjtcbiAgfVxufVxuIiwiaW1wb3J0IENoYXJhY3RlciBmcm9tICcuLi9DaGFyYWN0ZXInO1xuaW1wb3J0IHRlYW1zIGZyb20gJy4uL2NvbnN0YW50cy90ZWFtcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN3b3Jkc21hbiBleHRlbmRzIENoYXJhY3RlciB7XG4gIGNvbnN0cnVjdG9yKGxldmVsKSB7XG4gICAgc3VwZXIobGV2ZWwsIG5ldy50YXJnZXQubmFtZSk7XG4gICAgLy8gdGhpcy50eXBlID0gJ3N3b3Jkc21hbic7XG4gICAgdGhpcy5hdHRhY2sgPSA0MDtcbiAgICB0aGlzLmRlZmVuY2UgPSAxMDtcbiAgICB0aGlzLmF0dGFja0Rpc3RhbmNlID0gMTtcbiAgICB0aGlzLm1vdmVEaXN0YW5jZSA9IDQ7XG4gICAgdGhpcy50ZWFtID0gdGVhbXMucGxheWVyO1xuICB9XG59XG4iLCJpbXBvcnQgQ2hhcmFjdGVyIGZyb20gJy4uL0NoYXJhY3Rlcic7XG5pbXBvcnQgdGVhbXMgZnJvbSAnLi4vY29uc3RhbnRzL3RlYW1zJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVW5kZWFkIGV4dGVuZHMgQ2hhcmFjdGVyIHtcbiAgY29uc3RydWN0b3IobGV2ZWwpIHtcbiAgICBzdXBlcihsZXZlbCwgbmV3LnRhcmdldC5uYW1lKTtcbiAgICAvLyB0aGlzLnR5cGUgPSAndW5kZWFkJztcbiAgICB0aGlzLmF0dGFjayA9IDQwO1xuICAgIHRoaXMuZGVmZW5jZSA9IDEwO1xuICAgIHRoaXMuYXR0YWNrRGlzdGFuY2UgPSAxO1xuICAgIHRoaXMubW92ZURpc3RhbmNlID0gNDtcbiAgICB0aGlzLnRlYW0gPSB0ZWFtcy5lbmVteTtcbiAgfVxufVxuIiwiaW1wb3J0IENoYXJhY3RlciBmcm9tICcuLi9DaGFyYWN0ZXInO1xuaW1wb3J0IHRlYW1zIGZyb20gJy4uL2NvbnN0YW50cy90ZWFtcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZhbXBpcmUgZXh0ZW5kcyBDaGFyYWN0ZXIge1xuICBjb25zdHJ1Y3RvcihsZXZlbCkge1xuICAgIHN1cGVyKGxldmVsLCBuZXcudGFyZ2V0Lm5hbWUpO1xuICAgIC8vIHRoaXMudHlwZSA9ICd2YW1waXJlJztcbiAgICB0aGlzLmF0dGFjayA9IDI1O1xuICAgIHRoaXMuZGVmZW5jZSA9IDI1O1xuICAgIHRoaXMuYXR0YWNrRGlzdGFuY2UgPSAyO1xuICAgIHRoaXMubW92ZURpc3RhbmNlID0gMjtcbiAgICB0aGlzLnRlYW0gPSB0ZWFtcy5lbmVteTtcbiAgfVxufVxuIiwiaW1wb3J0IEJvd21hbiBmcm9tICcuL2NoYXJhY3RlcnMvQm93bWFuJztcbmltcG9ydCBEYWVtb24gZnJvbSAnLi9jaGFyYWN0ZXJzL0RhZW1vbic7XG5pbXBvcnQgTWFnaWNpYW4gZnJvbSAnLi9jaGFyYWN0ZXJzL01hZ2ljaWFuJztcbmltcG9ydCBTd29yZHNtYW4gZnJvbSAnLi9jaGFyYWN0ZXJzL1N3b3Jkc21hbic7XG5pbXBvcnQgVW5kZWFkIGZyb20gJy4vY2hhcmFjdGVycy9VbmRlYWQnO1xuaW1wb3J0IFZhbXBpcmUgZnJvbSAnLi9jaGFyYWN0ZXJzL1ZhbXBpcmUnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZWFtIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy50ZWFtQ29tcCA9IFtEYWVtb24sIFVuZGVhZCwgVmFtcGlyZV07XG4gICAgdGhpcy50ZWFtSHVtYW5Jbml0ID0gW0Jvd21hbiwgU3dvcmRzbWFuXTtcbiAgICB0aGlzLnRlYW1IdW1hbiA9IFtCb3dtYW4sIE1hZ2ljaWFuLCBTd29yZHNtYW5dO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lU3RhdGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnBsYXllcnNUdXJuID0gdHJ1ZTtcbiAgICB0aGlzLmxldmVsID0gMTtcbiAgICB0aGlzLnBvaW50cyA9IDA7XG4gICAgdGhpcy5oaWdoZXN0UG9pbnRzID0gMDtcblxuICAgIHRoaXMucG9zaXRpb25lZCA9IFtdO1xuICB9XG5cbiAgc3RhdGljIGZyb20ob2JqZWN0KSB7XG4gICAgaWYgKHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBvYmplY3QsXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuIiwiaW1wb3J0IHRoZW1lcyBmcm9tICcuL2NvbnN0YW50cy90aGVtZXMnO1xuaW1wb3J0IHRlYW1zIGZyb20gJy4vY29uc3RhbnRzL3RlYW1zJztcbmltcG9ydCBjdXJzb3JzIGZyb20gJy4vY29uc3RhbnRzL2N1cnNvcnMnO1xuaW1wb3J0IGNvbG91ciBmcm9tICcuL2NvbnN0YW50cy9jb2xvdXInO1xuaW1wb3J0IGVycm9ycyBmcm9tICcuL2NvbnN0YW50cy9lcnJvcnMnO1xuaW1wb3J0IG1lc3NhZ2VzIGZyb20gJy4vY29uc3RhbnRzL21lc3NhZ2VzJztcbmltcG9ydCB7IHBvc3NpYmxlTW92ZSwgY291bnRQb3NzaWJsZUluZGV4ZXMsIHNldFRpbWVyIH0gZnJvbSAnLi91dGlscyc7XG5cbmltcG9ydCB7XG4gIGdlbmVyYXRlVGVhbSxcbiAgZ2VuZXJhdGVQb3NpdGlvbixcbiAgY2hhcmFjdGVyR2VuZXJhdG9yLFxufSBmcm9tICcuL2dlbmVyYXRvcnMnO1xuXG5pbXBvcnQgVGVhbSBmcm9tICcuL1RlYW0nO1xuaW1wb3J0IEdhbWVQbGF5IGZyb20gJy4vR2FtZVBsYXknO1xuaW1wb3J0IEdhbWVTdGF0ZSBmcm9tICcuL0dhbWVTdGF0ZSc7XG5cbmltcG9ydCBCb3dtYW4gZnJvbSAnLi9jaGFyYWN0ZXJzL0Jvd21hbic7XG5pbXBvcnQgRGFlbW9uIGZyb20gJy4vY2hhcmFjdGVycy9EYWVtb24nO1xuaW1wb3J0IE1hZ2ljaWFuIGZyb20gJy4vY2hhcmFjdGVycy9NYWdpY2lhbic7XG5pbXBvcnQgU3dvcmRzbWFuIGZyb20gJy4vY2hhcmFjdGVycy9Td29yZHNtYW4nO1xuaW1wb3J0IFVuZGVhZCBmcm9tICcuL2NoYXJhY3RlcnMvVW5kZWFkJztcbmltcG9ydCBWYW1waXJlIGZyb20gJy4vY2hhcmFjdGVycy9WYW1waXJlJztcbmltcG9ydCBQb3NpdGlvbmVkQ2hhcmFjdGVyIGZyb20gJy4vUG9zaXRpb25lZENoYXJhY3Rlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWVDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoZ2FtZVBsYXksIHN0YXRlU2VydmljZSkge1xuICAgIHRoaXMuZ2FtZVBsYXkgPSBnYW1lUGxheTtcbiAgICB0aGlzLnN0YXRlU2VydmljZSA9IHN0YXRlU2VydmljZTtcbiAgICB0aGlzLmdhbWVTdGF0ZSA9IG5ldyBHYW1lU3RhdGUoKTtcbiAgICB0aGlzLnNlbGVjdGVkQ2hhcmFjdGVyID0gZmFsc2U7XG4gICAgdGhpcy5pbmRleE9mU2VsZWN0ZWRDaGFyYWN0ZXIgPSBudWxsO1xuICAgIHRoaXMucHJldmlvdXNseVNlbGVjdGVkID0gbnVsbDtcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy5wcmVwYXJlQm9hcmQoKTtcbiAgICB0aGlzLmRyYXdDaGFyYWN0ZXJzKCk7XG4gIH1cblxuICBwcmVwYXJlQm9hcmQoKSB7XG4gICAgdGhpcy5nYW1lUGxheS5kcmF3VWkoT2JqZWN0LnZhbHVlcyh0aGVtZXMpW3RoaXMuZ2FtZVN0YXRlLmxldmVsIC0gMV0pO1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXJzKCk7XG4gICAgdGhpcy5hZGRMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLnNob3dTdGF0cygpO1xuICB9XG5cbiAgZHJhd0NoYXJhY3RlcnMoKSB7XG4gICAgdGhpcy50ZWFtSHVtYW4gPSBnZW5lcmF0ZVRlYW0obmV3IFRlYW0oKS50ZWFtSHVtYW5Jbml0LCAxLCAyKTtcbiAgICB0aGlzLnRlYW1Db21wID0gZ2VuZXJhdGVUZWFtKG5ldyBUZWFtKCkudGVhbUNvbXAsIDEsIDIpO1xuICAgIHRoaXMucG9zVGVhbUh1bWFuID0gZ2VuZXJhdGVQb3NpdGlvbih0aGlzLnRlYW1IdW1hbiwgdGVhbXMucGxheWVyKTtcbiAgICB0aGlzLnBvc1RlYW1Db21wID0gZ2VuZXJhdGVQb3NpdGlvbih0aGlzLnRlYW1Db21wLCB0ZWFtcy5lbmVteSk7XG5cbiAgICB0aGlzLmdhbWVTdGF0ZS5wb3NpdGlvbmVkID0gWy4uLnRoaXMucG9zVGVhbUh1bWFuLCAuLi50aGlzLnBvc1RlYW1Db21wXTtcblxuICAgIHRoaXMuZ2FtZVBsYXkucmVkcmF3UG9zaXRpb25zKHRoaXMuZ2FtZVN0YXRlLnBvc2l0aW9uZWQpO1xuICB9XG5cbiAgb25DZWxsRW50ZXIoaW5kZXgpIHtcbiAgICBjb25zdCBjaGFyYWN0ZXJIZXJlID0gdGhpcy5maW5kQ2hhcmFjdGVySGVyZShpbmRleCk7XG5cbiAgICB0aGlzLmdhbWVQbGF5LnNldEN1cnNvcihjdXJzb3JzLmF1dG8pO1xuXG4gICAgaWYgKGNoYXJhY3RlckhlcmUpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgbGV2ZWwsIGF0dGFjaywgZGVmZW5jZSwgaGVhbHRoLFxuICAgICAgfSA9IGNoYXJhY3RlckhlcmUuY2hhcmFjdGVyO1xuXG4gICAgICB0aGlzLmdhbWVQbGF5LnNob3dDZWxsVG9vbHRpcChcbiAgICAgICAgYPCfjpYke2xldmVsfSDimpQke2F0dGFja30g8J+boSR7ZGVmZW5jZX0g4p2kJHtoZWFsdGh9YCxcbiAgICAgICAgaW5kZXgsXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmluZGV4T2ZTZWxlY3RlZENoYXJhY3RlciAmJiB0aGlzLnNlbGVjdGVkQ2hhcmFjdGVyKSB7XG4gICAgICBjb25zdCBudW1PZlN0ZXBzVG9Nb3ZlID0gdGhpcy5maW5kTnVtYmVyT2ZTdGVwc1RvTW92ZSgpO1xuICAgICAgY29uc3QgbnVtT2ZTdGVwc1RvQXR0YWNrID0gdGhpcy5maW5kTnVtYmVyT2ZTdGVwc1RvQXR0YWNrKCk7XG5cbiAgICAgIGlmIChudW1PZlN0ZXBzVG9Nb3ZlIHx8IG51bU9mU3RlcHNUb0F0dGFjaykge1xuICAgICAgICBjb25zdCBhbGxvd2VkTW92ZSA9IHBvc3NpYmxlTW92ZShcbiAgICAgICAgICB0aGlzLmluZGV4T2ZTZWxlY3RlZENoYXJhY3RlcixcbiAgICAgICAgICBpbmRleCxcbiAgICAgICAgICBudW1PZlN0ZXBzVG9Nb3ZlLFxuICAgICAgICApO1xuICAgICAgICBjb25zdCBhbGxvd2VkQXR0YWNrID0gcG9zc2libGVNb3ZlKFxuICAgICAgICAgIHRoaXMuaW5kZXhPZlNlbGVjdGVkQ2hhcmFjdGVyLFxuICAgICAgICAgIGluZGV4LFxuICAgICAgICAgIG51bU9mU3RlcHNUb0F0dGFjayxcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRDaGFyYWN0ZXIpIHtcbiAgICAgICAgICBpZiAoYWxsb3dlZE1vdmUgJiYgIXRoaXMuZmluZENoYXJhY3RlckhlcmUoaW5kZXgpKSB7XG4gICAgICAgICAgICB0aGlzLmdhbWVQbGF5LnNlbGVjdENlbGwoaW5kZXgsIGNvbG91ci5ncmVlbik7XG4gICAgICAgICAgICB0aGlzLmdhbWVQbGF5LnNldEN1cnNvcihjdXJzb3JzLnBvaW50ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWFsbG93ZWRNb3ZlKSB7XG4gICAgICAgICAgICB0aGlzLmdhbWVQbGF5LnNldEN1cnNvcihjdXJzb3JzLm5vdGFsbG93ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2hhcmFjdGVySGVyZT8uY2hhcmFjdGVyLnRlYW0gPT09IHRlYW1zLmVuZW15ICYmIGFsbG93ZWRBdHRhY2spIHtcbiAgICAgICAgICAgIHRoaXMuZ2FtZVBsYXkuc2VsZWN0Q2VsbChpbmRleCwgY29sb3VyLnJlZCk7XG4gICAgICAgICAgICB0aGlzLmdhbWVQbGF5LnNldEN1cnNvcihjdXJzb3JzLmNyb3NzaGFpcik7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaGFyYWN0ZXJIZXJlPy5jaGFyYWN0ZXIudGVhbSA9PT0gdGVhbXMucGxheWVyKSB7XG4gICAgICAgICAgICB0aGlzLmdhbWVQbGF5LnNldEN1cnNvcihjdXJzb3JzLnBvaW50ZXIpO1xuICAgICAgICAgICAgdGhpcy5nYW1lUGxheS5zZWxlY3RDZWxsKGluZGV4LCAnJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgb25DZWxsTGVhdmUoaW5kZXgpIHtcbiAgICB0aGlzLmdhbWVQbGF5LmhpZGVDZWxsVG9vbHRpcChpbmRleCk7XG4gICAgaWYgKGluZGV4ICE9PSB0aGlzLmluZGV4T2ZTZWxlY3RlZENoYXJhY3Rlcikge1xuICAgICAgdGhpcy5nYW1lUGxheS5kZXNlbGVjdENlbGwoaW5kZXgpO1xuICAgICAgdGhpcy5nYW1lUGxheS5zZXRDdXJzb3IoY3Vyc29ycy5wb2ludGVyKTtcbiAgICB9XG4gIH1cblxuICBvbkNlbGxDbGljayhpbmRleCkge1xuICAgIGlmICh0aGlzLmdhbWVTdGF0ZS5wbGF5ZXJzVHVybikge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLnBvc1RlYW1IdW1hbi5sZW5ndGggPiAwXG4gICAgICAgICYmIHRoaXMuZ2FtZVN0YXRlLmxldmVsIDw9IDRcbiAgICAgICAgJiYgdGhpcy5wb3NUZWFtQ29tcC5sZW5ndGggIT09IDBcbiAgICAgICkge1xuICAgICAgICBjb25zdCBjaGFyYWN0ZXJIZXJlID0gdGhpcy5maW5kQ2hhcmFjdGVySGVyZShpbmRleCk7XG4gICAgICAgIGlmIChjaGFyYWN0ZXJIZXJlKSB7XG4gICAgICAgICAgY29uc3QgeyB0ZWFtIH0gPSBjaGFyYWN0ZXJIZXJlLmNoYXJhY3RlcjtcbiAgICAgICAgICBpZiAodGVhbSA9PT0gdGVhbXMuZW5lbXkgJiYgIXRoaXMuc2VsZWN0ZWRDaGFyYWN0ZXIpIHtcbiAgICAgICAgICAgIEdhbWVQbGF5LnNob3dFcnJvcihlcnJvcnMubm90WW91cnMpO1xuICAgICAgICAgICAgdGhpcy5nYW1lUGxheS5kZXNlbGVjdENlbGwodGhpcy5pbmRleE9mU2VsZWN0ZWRDaGFyYWN0ZXIgfHwgaW5kZXgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnByZXZpb3VzbHlTZWxlY3RlZCA9IHRoaXMuc2VsZWN0ZWRDaGFyYWN0ZXI7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkQ2hhcmFjdGVyID0gY2hhcmFjdGVySGVyZTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZVBsYXkuZGVzZWxlY3RDZWxsKHRoaXMuaW5kZXhPZlNlbGVjdGVkQ2hhcmFjdGVyIHx8IGluZGV4KTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZVBsYXkuc2VsZWN0Q2VsbChpbmRleCk7XG4gICAgICAgICAgICB0aGlzLmluZGV4T2ZTZWxlY3RlZENoYXJhY3RlciA9IGluZGV4O1xuICAgICAgICAgICAgdGhpcy5nYW1lUGxheS5zZXRDdXJzb3IoY3Vyc29ycy5wb2ludGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuc2VsZWN0ZWRDaGFyYWN0ZXIpIHtcbiAgICAgICAgICBHYW1lUGxheS5zaG93RXJyb3IoZXJyb3JzLm5vQ2hhcmFjdGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnByZXZpb3VzbHlTZWxlY3RlZCAmJiBjaGFyYWN0ZXJIZXJlKSB7XG4gICAgICAgICAgY29uc3QgbnVtT2ZTdGVwcyA9IHRoaXMucHJldmlvdXNseVNlbGVjdGVkLmNoYXJhY3Rlci5hdHRhY2tEaXN0YW5jZTtcblxuICAgICAgICAgIGNvbnN0IGFsbG93ZWRBdHRhY2sgPSBwb3NzaWJsZU1vdmUoXG4gICAgICAgICAgICB0aGlzLnByZXZpb3VzbHlTZWxlY3RlZC5wb3NpdGlvbixcbiAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgbnVtT2ZTdGVwcyxcbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnN0IHsgdGVhbSB9ID0gY2hhcmFjdGVySGVyZS5jaGFyYWN0ZXI7XG4gICAgICAgICAgaWYgKHRlYW0gPT09IHRlYW1zLnBsYXllcikge1xuICAgICAgICAgICAgdGhpcy5nYW1lUGxheS5kZXNlbGVjdENlbGwodGhpcy5pbmRleE9mU2VsZWN0ZWRDaGFyYWN0ZXIpO1xuICAgICAgICAgICAgdGhpcy5nYW1lUGxheS5zZWxlY3RDZWxsKGluZGV4KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGFsbG93ZWRBdHRhY2spIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbXBldGl0aW9uID0gY2hhcmFjdGVySGVyZTtcblxuICAgICAgICAgICAgY29uc3QgZGFtYWdlVmFsdWUgPSBNYXRoLm1heChcbiAgICAgICAgICAgICAgdGhpcy5wcmV2aW91c2x5U2VsZWN0ZWQuY2hhcmFjdGVyLmF0dGFja1xuICAgICAgICAgICAgICAgIC0gY29tcGV0aXRpb24uY2hhcmFjdGVyLmRlZmVuY2UsXG4gICAgICAgICAgICAgIHRoaXMucHJldmlvdXNseVNlbGVjdGVkLmNoYXJhY3Rlci5hdHRhY2sgKiAwLjEsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY29uc3QgZGFtYWdlID0gdGhpcy5nYW1lUGxheS5zaG93RGFtYWdlKGluZGV4LCBkYW1hZ2VWYWx1ZSk7XG5cbiAgICAgICAgICAgIGRhbWFnZS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgY29tcGV0aXRpb24uY2hhcmFjdGVyLmhlYWx0aCAtPSBkYW1hZ2VWYWx1ZTtcblxuICAgICAgICAgICAgICBjb25zdCByZW1vdmVkID0gdGhpcy5wb3NUZWFtQ29tcC5pbmRleE9mKGNvbXBldGl0aW9uKTtcbiAgICAgICAgICAgICAgaWYgKGNvbXBldGl0aW9uLmNoYXJhY3Rlci5oZWFsdGggPD0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMucG9zVGVhbUNvbXAuc3BsaWNlKHJlbW92ZWQsIDEpO1xuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLnBvc2l0aW9uZWQgPSBbXG4gICAgICAgICAgICAgICAgICAuLi50aGlzLnBvc1RlYW1IdW1hbixcbiAgICAgICAgICAgICAgICAgIC4uLnRoaXMucG9zVGVhbUNvbXAsXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wb3NUZWFtQ29tcC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLnBsYXllcnNUdXJuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIHRoaXMubGV2ZWxVcCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHRoaXMucmVtb3ZlU2VsZWN0ZWQoKTtcbiAgICAgICAgICAgICAgdGhpcy5nYW1lUGxheS5yZWRyYXdQb3NpdGlvbnModGhpcy5nYW1lU3RhdGUucG9zaXRpb25lZCk7XG4gICAgICAgICAgICAgIHRoaXMuY29tcHV0ZXJzTW92ZSgpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRDaGFyYWN0ZXIgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5pbmRleE9mU2VsZWN0ZWRDaGFyYWN0ZXIgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5nYW1lU3RhdGUucGxheWVyc1R1cm4gPSBmYWxzZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgR2FtZVBsYXkuc2hvd0Vycm9yKGVycm9ycy50b29GYXIpO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZENoYXJhY3RlciA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnByZXZpb3VzbHlTZWxlY3RlZCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZVNlbGVjdGVkKCk7XG4gICAgICAgICAgICB0aGlzLmNvbXB1dGVyc01vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWNoYXJhY3RlckhlcmUgJiYgdGhpcy5zZWxlY3RlZENoYXJhY3Rlcikge1xuICAgICAgICAgIGNvbnN0IG51bU9mU3RlcHMgPSB0aGlzLmZpbmROdW1iZXJPZlN0ZXBzVG9Nb3ZlKCk7XG4gICAgICAgICAgY29uc3QgYWxsb3dlZE1vdmUgPSBwb3NzaWJsZU1vdmUoXG4gICAgICAgICAgICB0aGlzLmluZGV4T2ZTZWxlY3RlZENoYXJhY3RlcixcbiAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgbnVtT2ZTdGVwcyxcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmIChhbGxvd2VkTW92ZSkge1xuICAgICAgICAgICAgdGhpcy5wb3NUZWFtSHVtYW4gPSBbLi4udGhpcy5wb3NUZWFtSHVtYW5dLmZpbHRlcihcbiAgICAgICAgICAgICAgKGNoYXJhY3RlcikgPT4gY2hhcmFjdGVyLnBvc2l0aW9uICE9PSB0aGlzLmluZGV4T2ZTZWxlY3RlZENoYXJhY3RlcixcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkQ2hhcmFjdGVyLnBvc2l0aW9uID0gaW5kZXg7XG4gICAgICAgICAgICB0aGlzLnBvc1RlYW1IdW1hbi5wdXNoKHRoaXMuc2VsZWN0ZWRDaGFyYWN0ZXIpO1xuICAgICAgICAgICAgdGhpcy5nYW1lU3RhdGUucG9zaXRpb25lZCA9IFtcbiAgICAgICAgICAgICAgLi4udGhpcy5wb3NUZWFtSHVtYW4sXG4gICAgICAgICAgICAgIC4uLnRoaXMucG9zVGVhbUNvbXAsXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZENoYXJhY3RlciA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmluZGV4T2ZTZWxlY3RlZENoYXJhY3RlciA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmdhbWVQbGF5LnJlZHJhd1Bvc2l0aW9ucyh0aGlzLmdhbWVTdGF0ZS5wb3NpdGlvbmVkKTtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlU2VsZWN0ZWQoKTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLnBsYXllcnNUdXJuID0gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIEdhbWVQbGF5LnNob3dFcnJvcihlcnJvcnMubm90QWxsb3dlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuY29tcHV0ZXJzTW92ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIEdhbWVQbGF5LnNob3dFcnJvcihlcnJvcnMubm90WW91clR1cm4pO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGNvbXB1dGVyc01vdmUoKSB7XG4gICAgaWYgKCF0aGlzLmdhbWVTdGF0ZS5wbGF5ZXJzVHVybikge1xuICAgICAgYXdhaXQgc2V0VGltZXIoMzAwKTtcbiAgICAgIGNvbnN0IGluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5wb3NUZWFtQ29tcC5sZW5ndGgpO1xuICAgICAgY29uc3QgcGxheWluZ0NoYXJhY3RlciA9IHRoaXMucG9zVGVhbUNvbXBbaW5kZXhdO1xuICAgICAgY29uc3QgcGxheWluZ0NoYXJhY3RlckluZGV4ID0gcGxheWluZ0NoYXJhY3Rlci5wb3NpdGlvbjtcbiAgICAgIGNvbnN0IG51bU9mU3RlcHNUb01vdmUgPSBwbGF5aW5nQ2hhcmFjdGVyLmNoYXJhY3Rlci5tb3ZlRGlzdGFuY2U7XG4gICAgICBjb25zdCBudW1PZlN0ZXBzVG9BdHRhY2sgPSBwbGF5aW5nQ2hhcmFjdGVyLmNoYXJhY3Rlci5hdHRhY2tEaXN0YW5jZTtcbiAgICAgIGNvbnN0IGh1bWFuc1Bvc2l0aW9ucyA9IHRoaXMucG9zVGVhbUh1bWFuLm1hcChcbiAgICAgICAgKGVsZW1lbnQpID0+IGVsZW1lbnQucG9zaXRpb24sXG4gICAgICApO1xuICAgICAgY29uc3QgY29tcHNQb3NpdGlvbnMgPSB0aGlzLnBvc1RlYW1Db21wLm1hcChcbiAgICAgICAgKGVsZW1lbnQpID0+IGVsZW1lbnQucG9zaXRpb24sXG4gICAgICApO1xuICAgICAgY29uc3QgcG9zc2libGVNb3ZlcyA9IGNvdW50UG9zc2libGVJbmRleGVzKFxuICAgICAgICBwbGF5aW5nQ2hhcmFjdGVySW5kZXgsXG4gICAgICAgIG51bU9mU3RlcHNUb01vdmUsXG4gICAgICApXG4gICAgICAgIC5maWx0ZXIoKG1vdmUpID0+IGNvbXBzUG9zaXRpb25zLmluZGV4T2YobW92ZSkgPT09IC0xKVxuICAgICAgICAuZmlsdGVyKChtb3ZlKSA9PiBodW1hbnNQb3NpdGlvbnMuaW5kZXhPZihtb3ZlKSA9PT0gLTEpO1xuXG4gICAgICBjb25zdCBwb3NzaWJsZUF0dGFja3MgPSBjb3VudFBvc3NpYmxlSW5kZXhlcyhcbiAgICAgICAgcGxheWluZ0NoYXJhY3RlckluZGV4LFxuICAgICAgICBudW1PZlN0ZXBzVG9BdHRhY2ssXG4gICAgICApO1xuXG4gICAgICBjb25zdCBwb3NzaWJsZUF0dGFjayA9IHBvc3NpYmxlQXR0YWNrcy5maWx0ZXIoXG4gICAgICAgIChtb3ZlKSA9PiBodW1hbnNQb3NpdGlvbnMuaW5kZXhPZihtb3ZlKSA+IC0xLFxuICAgICAgKTtcbiAgICAgIGxldCB0b0F0dGFjayA9IG51bGw7XG4gICAgICBpZiAocG9zc2libGVBdHRhY2subGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHRvQXR0YWNrID0gcG9zc2libGVBdHRhY2tbMF07XG4gICAgICB9IGVsc2UgaWYgKHBvc3NpYmxlQXR0YWNrLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdG9BdHRhY2sgPSBwb3NzaWJsZUF0dGFja1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwb3NzaWJsZUF0dGFjay5sZW5ndGgpXTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0b0F0dGFjaykge1xuICAgICAgICB0aGlzLnBvc1RlYW1Db21wID0gWy4uLnRoaXMucG9zVGVhbUNvbXBdLmZpbHRlcihcbiAgICAgICAgICAoY2hhcmFjdGVyKSA9PiBjaGFyYWN0ZXIucG9zaXRpb24gIT09IHBsYXlpbmdDaGFyYWN0ZXJJbmRleCxcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmdhbWVQbGF5LnNlbGVjdENlbGwocGxheWluZ0NoYXJhY3Rlci5wb3NpdGlvbik7XG4gICAgICAgIGF3YWl0IHNldFRpbWVyKDMwMCk7XG4gICAgICAgIHRoaXMuZ2FtZVBsYXkuZGVzZWxlY3RDZWxsKHBsYXlpbmdDaGFyYWN0ZXIucG9zaXRpb24pO1xuXG4gICAgICAgIHBsYXlpbmdDaGFyYWN0ZXIucG9zaXRpb24gPSBwb3NzaWJsZU1vdmVzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHBvc3NpYmxlTW92ZXMubGVuZ3RoKV07XG5cbiAgICAgICAgdGhpcy5nYW1lUGxheS5zZWxlY3RDZWxsKHBsYXlpbmdDaGFyYWN0ZXIucG9zaXRpb24sIGNvbG91ci5ncmVlbik7XG4gICAgICAgIGF3YWl0IHNldFRpbWVyKDMwMCk7XG4gICAgICAgIHRoaXMuZ2FtZVBsYXkuZGVzZWxlY3RDZWxsKHBsYXlpbmdDaGFyYWN0ZXIucG9zaXRpb24pO1xuXG4gICAgICAgIHRoaXMucG9zVGVhbUNvbXAucHVzaChwbGF5aW5nQ2hhcmFjdGVyKTtcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUucG9zaXRpb25lZCA9IFsuLi50aGlzLnBvc1RlYW1IdW1hbiwgLi4udGhpcy5wb3NUZWFtQ29tcF07XG5cbiAgICAgICAgdGhpcy5nYW1lUGxheS5yZWRyYXdQb3NpdGlvbnModGhpcy5nYW1lU3RhdGUucG9zaXRpb25lZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBlbmVteSA9IHRoaXMuZmluZENoYXJhY3RlckhlcmUodG9BdHRhY2spO1xuXG4gICAgICAgIGNvbnN0IGRhbWFnZVZhbHVlID0gTWF0aC5tYXgoXG4gICAgICAgICAgcGxheWluZ0NoYXJhY3Rlci5jaGFyYWN0ZXIuYXR0YWNrIC0gZW5lbXkuY2hhcmFjdGVyLmRlZmVuY2UsXG4gICAgICAgICAgcGxheWluZ0NoYXJhY3Rlci5jaGFyYWN0ZXIuYXR0YWNrICogMC4xLFxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuZ2FtZVBsYXkuc2VsZWN0Q2VsbChwbGF5aW5nQ2hhcmFjdGVyLnBvc2l0aW9uKTtcbiAgICAgICAgYXdhaXQgc2V0VGltZXIoMzAwKTtcbiAgICAgICAgdGhpcy5nYW1lUGxheS5zZWxlY3RDZWxsKHRvQXR0YWNrLCBjb2xvdXIucmVkKTtcblxuICAgICAgICBjb25zdCBkYW1hZ2UgPSB0aGlzLmdhbWVQbGF5LnNob3dEYW1hZ2UodG9BdHRhY2ssIGRhbWFnZVZhbHVlKTtcblxuICAgICAgICB0aGlzLmdhbWVQbGF5LmRlc2VsZWN0Q2VsbChwbGF5aW5nQ2hhcmFjdGVyLnBvc2l0aW9uKTtcblxuICAgICAgICBkYW1hZ2UudGhlbigoKSA9PiB7XG4gICAgICAgICAgZW5lbXkuY2hhcmFjdGVyLmhlYWx0aCAtPSBkYW1hZ2VWYWx1ZTtcbiAgICAgICAgICBjb25zdCByZW1vdmVkID0gdGhpcy5wb3NUZWFtSHVtYW4uaW5kZXhPZihlbmVteSk7XG4gICAgICAgICAgaWYgKGVuZW15LmNoYXJhY3Rlci5oZWFsdGggPD0gMCkge1xuICAgICAgICAgICAgdGhpcy5wb3NUZWFtSHVtYW4uc3BsaWNlKHJlbW92ZWQsIDEpO1xuICAgICAgICAgICAgdGhpcy5nYW1lU3RhdGUucG9zaXRpb25lZCA9IFtcbiAgICAgICAgICAgICAgLi4udGhpcy5wb3NUZWFtSHVtYW4sXG4gICAgICAgICAgICAgIC4uLnRoaXMucG9zVGVhbUNvbXAsXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaWYgKHRoaXMucG9zVGVhbUh1bWFuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICBHYW1lUGxheS5zaG93TWVzc2FnZShlcnJvcnMubG9zdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5nYW1lUGxheS5yZWRyYXdQb3NpdGlvbnModGhpcy5nYW1lU3RhdGUucG9zaXRpb25lZCk7XG5cbiAgICAgICAgICB0aGlzLmdhbWVQbGF5LmRlc2VsZWN0Q2VsbCh0b0F0dGFjayk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdGhpcy5nYW1lU3RhdGUucGxheWVyc1R1cm4gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmdhbWVTdGF0ZS5wbGF5ZXJzVHVybiA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgbGV2ZWxVcCgpIHtcbiAgICBpZiAodGhpcy5nYW1lU3RhdGUubGV2ZWwgPD0gNCkge1xuICAgICAgdGhpcy5nYW1lU3RhdGUucG9pbnRzICs9IHRoaXMucG9zVGVhbUh1bWFuXG4gICAgICAgIC5tYXAoKGVsZW1lbnQpID0+IGVsZW1lbnQuY2hhcmFjdGVyLmhlYWx0aClcbiAgICAgICAgLnJlZHVjZSgoc3VtLCBudW1iZXIpID0+IHN1bSArIG51bWJlcik7XG5cbiAgICAgIGlmICh0aGlzLmdhbWVTdGF0ZS5oaWdoZXN0UG9pbnRzIDwgdGhpcy5nYW1lU3RhdGUucG9pbnRzKSB7XG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmhpZ2hlc3RQb2ludHMgPSB0aGlzLmdhbWVTdGF0ZS5wb2ludHM7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2hvd1N0YXRzKCk7XG5cbiAgICAgIGlmICh0aGlzLmdhbWVTdGF0ZS5sZXZlbCA8IDQpIHtcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUubGV2ZWwgKz0gMTtcbiAgICAgICAgdGhpcy5wcmVwYXJlQm9hcmQoKTtcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUucG9zaXRpb25lZC5mb3JFYWNoKChjaGFyYWN0ZXIpID0+IGNoYXJhY3Rlci5jaGFyYWN0ZXIubGV2ZWxVcCgpKTtcblxuICAgICAgICB0aGlzLnRlYW1IdW1hbiA9IHRoaXMucG9zVGVhbUh1bWFuLm1hcCgoZWxlbWVudCkgPT4gZWxlbWVudC5jaGFyYWN0ZXIpO1xuICAgICAgICB0aGlzLnRlYW1IdW1hbi5wdXNoKFxuICAgICAgICAgIGNoYXJhY3RlckdlbmVyYXRvcihcbiAgICAgICAgICAgIG5ldyBUZWFtKCkudGVhbUh1bWFuLFxuICAgICAgICAgICAgdGhpcy5nYW1lU3RhdGUubGV2ZWwgLSAxLFxuICAgICAgICAgICkubmV4dCgpLnZhbHVlLFxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMucG9zVGVhbUh1bWFuID0gZ2VuZXJhdGVQb3NpdGlvbih0aGlzLnRlYW1IdW1hbiwgdGVhbXMucGxheWVyKTtcblxuICAgICAgICB0aGlzLnRlYW1Db21wID0gZ2VuZXJhdGVUZWFtKFxuICAgICAgICAgIG5ldyBUZWFtKCkudGVhbUNvbXAsXG4gICAgICAgICAgdGhpcy5nYW1lU3RhdGUubGV2ZWwsXG4gICAgICAgICAgdGhpcy5wb3NUZWFtSHVtYW4ubGVuZ3RoLFxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMucG9zVGVhbUNvbXAgPSBnZW5lcmF0ZVBvc2l0aW9uKHRoaXMudGVhbUNvbXAsIHRlYW1zLmVuZW15KTtcblxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5wb3NpdGlvbmVkID0gWy4uLnRoaXMucG9zVGVhbUh1bWFuLCAuLi50aGlzLnBvc1RlYW1Db21wXTtcblxuICAgICAgICB0aGlzLmdhbWVQbGF5LnJlZHJhd1Bvc2l0aW9ucyh0aGlzLmdhbWVTdGF0ZS5wb3NpdGlvbmVkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIEdhbWVQbGF5LnNob3dNZXNzYWdlKG1lc3NhZ2VzLmNvbmdyYXRzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBvbk5ld0dhbWVDbGljaygpIHtcbiAgICB0aGlzLmRlc2VsZWN0KCk7XG4gICAgdGhpcy5nYW1lU3RhdGUucGxheWVyc1R1cm4gPSB0cnVlO1xuICAgIHRoaXMuZ2FtZVN0YXRlLmxldmVsID0gMTtcbiAgICB0aGlzLmdhbWVTdGF0ZS5wb2ludHMgPSAwO1xuXG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICBvblNhdmVHYW1lQ2xpY2soKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuc3RhdGVTZXJ2aWNlLnNhdmUodGhpcy5nYW1lU3RhdGUpO1xuICAgICAgR2FtZVBsYXkuc2hvd01lc3NhZ2UobWVzc2FnZXMuc2F2ZWQpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgR2FtZVBsYXkuc2hvd0Vycm9yKGVycm9ycy53cm9uZyk7XG4gICAgfVxuICB9XG5cbiAgb25Mb2FkR2FtZSgpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbG9hZFN0YXRlID0gdGhpcy5zdGF0ZVNlcnZpY2UubG9hZCgpO1xuICAgICAgLy8gY29uc3QgdHlwZXMgPSB7XG4gICAgICAvLyAgIHN3b3Jkc21hbjogU3dvcmRzbWFuLFxuICAgICAgLy8gICBib3dtYW46IEJvd21hbixcbiAgICAgIC8vICAgbWFnaWNpYW46IE1hZ2ljaWFuLFxuICAgICAgLy8gICBkYWVtb246IERhZW1vbixcbiAgICAgIC8vICAgdW5kZWFkOiBVbmRlYWQsXG4gICAgICAvLyAgIHZhbXBpcmU6IFZhbXBpcmUsXG4gICAgICAvLyB9O1xuXG4gICAgICBjb25zdCB0eXBlcyA9IHtcbiAgICAgICAgU3dvcmRzbWFuLFxuICAgICAgICBCb3dtYW4sXG4gICAgICAgIE1hZ2ljaWFuLFxuICAgICAgICBEYWVtb24sXG4gICAgICAgIFVuZGVhZCxcbiAgICAgICAgVmFtcGlyZSxcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuZGVzZWxlY3QoKTtcblxuICAgICAgdGhpcy5nYW1lU3RhdGUubGV2ZWwgPSBsb2FkU3RhdGUubGV2ZWw7XG4gICAgICB0aGlzLmdhbWVTdGF0ZS5wb2ludHMgPSBsb2FkU3RhdGUucG9pbnRzO1xuICAgICAgdGhpcy5nYW1lU3RhdGUuaGlnaGVzdFBvaW50cyA9IGxvYWRTdGF0ZS5oaWdoZXN0UG9pbnRzO1xuICAgICAgdGhpcy5nYW1lU3RhdGUucGxheWVyc1R1cm4gPSBsb2FkU3RhdGUucGxheWVyc1R1cm47XG4gICAgICB0aGlzLnByZXBhcmVCb2FyZCgpO1xuXG4gICAgICB0aGlzLmdhbWVTdGF0ZS5wb3NpdGlvbmVkID0gbG9hZFN0YXRlLnBvc2l0aW9uZWQubWFwKChpdGVtKSA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBhdHRhY2ssXG4gICAgICAgICAgYXR0YWNrRGlzdGFuY2UsXG4gICAgICAgICAgZGVmZW5jZSxcbiAgICAgICAgICBoZWFsdGgsXG4gICAgICAgICAgbGV2ZWwsXG4gICAgICAgICAgbW92ZURpc3RhbmNlLFxuICAgICAgICAgIHRlYW0sXG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgfSA9IGl0ZW0uY2hhcmFjdGVyO1xuXG4gICAgICAgIC8vIGNvbnN0IFR5cGUgPSB0eXBlO1xuICAgICAgICAvLyBjb25zdCBjaGFyYWN0ZXIgPSBuZXcgVHlwZShsZXZlbCk7XG5cbiAgICAgICAgY29uc3QgY2hhcmFjdGVyID0gbmV3IHR5cGVzW3R5cGVdKGxldmVsKTtcblxuICAgICAgICBjaGFyYWN0ZXIuYXR0YWNrID0gYXR0YWNrO1xuICAgICAgICBjaGFyYWN0ZXIuYXR0YWNrRGlzdGFuY2UgPSBhdHRhY2tEaXN0YW5jZTtcbiAgICAgICAgY2hhcmFjdGVyLmRlZmVuY2UgPSBkZWZlbmNlO1xuICAgICAgICBjaGFyYWN0ZXIuaGVhbHRoID0gaGVhbHRoO1xuICAgICAgICBjaGFyYWN0ZXIubW92ZURpc3RhbmNlID0gbW92ZURpc3RhbmNlO1xuICAgICAgICBjaGFyYWN0ZXIudGVhbSA9IHRlYW07XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQb3NpdGlvbmVkQ2hhcmFjdGVyKGNoYXJhY3RlciwgaXRlbS5wb3NpdGlvbik7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5wb3NUZWFtSHVtYW4gPSB0aGlzLmdhbWVTdGF0ZS5wb3NpdGlvbmVkLmZpbHRlcihcbiAgICAgICAgKGNoYXJhY3RlcikgPT4gY2hhcmFjdGVyLmNoYXJhY3Rlci50ZWFtID09PSB0ZWFtcy5wbGF5ZXIsXG4gICAgICApO1xuICAgICAgdGhpcy5wb3NUZWFtQ29tcCA9IHRoaXMuZ2FtZVN0YXRlLnBvc2l0aW9uZWQuZmlsdGVyKFxuICAgICAgICAoY2hhcmFjdGVyKSA9PiBjaGFyYWN0ZXIuY2hhcmFjdGVyLnRlYW0gPT09IHRlYW1zLmVuZW15LFxuICAgICAgKTtcblxuICAgICAgR2FtZVBsYXkuc2hvd01lc3NhZ2UobWVzc2FnZXMubG9hZGVkKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgR2FtZVBsYXkuc2hvd0Vycm9yKGVycm9ycy53cm9uZyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5nYW1lUGxheS5yZWRyYXdQb3NpdGlvbnModGhpcy5nYW1lU3RhdGUucG9zaXRpb25lZCk7XG4gIH1cblxuICBhZGRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5nYW1lUGxheS5hZGRDZWxsRW50ZXJMaXN0ZW5lcih0aGlzLm9uQ2VsbEVudGVyLmJpbmQodGhpcykpO1xuICAgIHRoaXMuZ2FtZVBsYXkuYWRkQ2VsbExlYXZlTGlzdGVuZXIodGhpcy5vbkNlbGxMZWF2ZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmdhbWVQbGF5LmFkZENlbGxDbGlja0xpc3RlbmVyKHRoaXMub25DZWxsQ2xpY2suYmluZCh0aGlzKSk7XG5cbiAgICB0aGlzLmdhbWVQbGF5LmFkZE5ld0dhbWVMaXN0ZW5lcih0aGlzLm9uTmV3R2FtZUNsaWNrLmJpbmQodGhpcykpO1xuICAgIHRoaXMuZ2FtZVBsYXkuYWRkU2F2ZUdhbWVMaXN0ZW5lcih0aGlzLm9uU2F2ZUdhbWVDbGljay5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmdhbWVQbGF5LmFkZExvYWRHYW1lTGlzdGVuZXIodGhpcy5vbkxvYWRHYW1lLmJpbmQodGhpcykpO1xuICB9XG5cbiAgcmVtb3ZlTGlzdGVuZXJzKCkge1xuICAgIHRoaXMuZ2FtZVBsYXkuY2VsbENsaWNrTGlzdGVuZXJzID0gW107XG4gICAgdGhpcy5nYW1lUGxheS5jZWxsRW50ZXJMaXN0ZW5lcnMgPSBbXTtcbiAgICB0aGlzLmdhbWVQbGF5LmNlbGxMZWF2ZUxpc3RlbmVycyA9IFtdO1xuICAgIHRoaXMuZ2FtZVBsYXkubmV3R2FtZUxpc3RlbmVycyA9IFtdO1xuICAgIHRoaXMuZ2FtZVBsYXkuc2F2ZUdhbWVMaXN0ZW5lcnMgPSBbXTtcbiAgICB0aGlzLmdhbWVQbGF5LmxvYWRHYW1lTGlzdGVuZXJzID0gW107XG4gIH1cblxuICBkZXNlbGVjdCgpIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVycygpO1xuICAgIHRoaXMuc2VsZWN0ZWRDaGFyYWN0ZXIgPSBmYWxzZTtcbiAgICB0aGlzLmluZGV4T2ZTZWxlY3RlZENoYXJhY3RlciA9IG51bGw7XG4gICAgdGhpcy5wcmV2aW91c2x5U2VsZWN0ZWQgPSBudWxsO1xuICB9XG5cbiAgc2hvd1N0YXRzKCkge1xuICAgIHRoaXMuZ2FtZVBsYXkuc2V0Q3VycmVudExldmVsKHRoaXMuZ2FtZVN0YXRlLmxldmVsKTtcbiAgICB0aGlzLmdhbWVQbGF5LnNldEN1cnJlbnRTY29yZSh0aGlzLmdhbWVTdGF0ZS5wb2ludHMpO1xuICAgIHRoaXMuZ2FtZVBsYXkuc2V0QmVzdFNjb3JlKHRoaXMuZ2FtZVN0YXRlLmhpZ2hlc3RQb2ludHMpO1xuICB9XG5cbiAgcmVtb3ZlU2VsZWN0ZWQoKSB7XG4gICAgdGhpcy5nYW1lUGxheS5jZWxscy5mb3JFYWNoKChjZWxsKSA9PiBjZWxsLmNsYXNzTGlzdC5yZW1vdmUoXG4gICAgICBgc2VsZWN0ZWQtJHtjb2xvdXIueWVsbG93fWAsXG4gICAgICBgc2VsZWN0ZWQtJHtjb2xvdXIuZ3JlZW59YCxcbiAgICAgIGBzZWxlY3RlZC0ke2NvbG91ci5yZWR9YCxcbiAgICApKTtcbiAgfVxuXG4gIGZpbmRDaGFyYWN0ZXJIZXJlKGluZGV4KSB7XG4gICAgcmV0dXJuIHRoaXMuZ2FtZVN0YXRlLnBvc2l0aW9uZWQuZmluZChcbiAgICAgIChjaGFyYWN0ZXIpID0+IGNoYXJhY3Rlci5wb3NpdGlvbiA9PT0gaW5kZXgsXG4gICAgKTtcbiAgfVxuXG4gIGZpbmROdW1iZXJPZlN0ZXBzVG9Nb3ZlKCkge1xuICAgIHJldHVybiB0aGlzLnNlbGVjdGVkQ2hhcmFjdGVyLmNoYXJhY3Rlci5tb3ZlRGlzdGFuY2U7XG4gIH1cblxuICBmaW5kTnVtYmVyT2ZTdGVwc1RvQXR0YWNrKCkge1xuICAgIHJldHVybiB0aGlzLnNlbGVjdGVkQ2hhcmFjdGVyLmNoYXJhY3Rlci5hdHRhY2tEaXN0YW5jZTtcbiAgfVxufVxuIiwiaW1wb3J0IGVycm9ycyBmcm9tICcuL2NvbnN0YW50cy9lcnJvcnMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lU3RhdGVTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3Ioc3RvcmFnZSkge1xuICAgIHRoaXMuc3RvcmFnZSA9IHN0b3JhZ2U7XG4gIH1cblxuICBzYXZlKHN0YXRlKSB7XG4gICAgdGhpcy5zdG9yYWdlLnNldEl0ZW0oJ3N0YXRlJywgSlNPTi5zdHJpbmdpZnkoc3RhdGUpKTtcbiAgfVxuXG4gIGxvYWQoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKHRoaXMuc3RvcmFnZS5nZXRJdGVtKCdzdGF0ZScpKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9ycy5pbnZhbGlkKTtcbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogRW50cnkgcG9pbnQgb2YgYXBwOiBkb24ndCBjaGFuZ2UgdGhpc1xuICovXG5pbXBvcnQgR2FtZVBsYXkgZnJvbSAnLi9HYW1lUGxheSc7XG5pbXBvcnQgR2FtZUNvbnRyb2xsZXIgZnJvbSAnLi9HYW1lQ29udHJvbGxlcic7XG5pbXBvcnQgR2FtZVN0YXRlU2VydmljZSBmcm9tICcuL0dhbWVTdGF0ZVNlcnZpY2UnO1xuXG5jb25zdCBnYW1lUGxheSA9IG5ldyBHYW1lUGxheSgpO1xuZ2FtZVBsYXkuYmluZFRvRE9NKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNnYW1lLWNvbnRhaW5lcicpKTtcblxuY29uc3Qgc3RhdGVTZXJ2aWNlID0gbmV3IEdhbWVTdGF0ZVNlcnZpY2UobG9jYWxTdG9yYWdlKTtcblxuY29uc3QgZ2FtZUN0cmwgPSBuZXcgR2FtZUNvbnRyb2xsZXIoZ2FtZVBsYXksIHN0YXRlU2VydmljZSk7XG5nYW1lQ3RybC5pbml0KCk7XG5cbi8vIGRvbid0IHdyaXRlIHlvdXIgY29kZSBoZXJlXG4iXSwibmFtZXMiOlsiZ2xvYmFsIiwiaXNDYWxsYWJsZSIsInRyeVRvU3RyaW5nIiwiVHlwZUVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyIsImFyZ3VtZW50IiwiaXNDb25zdHJ1Y3RvciIsIlN0cmluZyIsIndlbGxLbm93blN5bWJvbCIsImNyZWF0ZSIsImRlZmluZVByb3BlcnR5TW9kdWxlIiwiVU5TQ09QQUJMRVMiLCJBcnJheVByb3RvdHlwZSIsIkFycmF5IiwicHJvdG90eXBlIiwidW5kZWZpbmVkIiwiZiIsImNvbmZpZ3VyYWJsZSIsInZhbHVlIiwia2V5IiwiaXNQcm90b3R5cGVPZiIsIml0IiwiUHJvdG90eXBlIiwiaXNPYmplY3QiLCIkZm9yRWFjaCIsIlNUUklDVF9NRVRIT0QiLCJhcnJheU1ldGhvZElzU3RyaWN0IiwiZm9yRWFjaCIsImNhbGxiYWNrZm4iLCJ0aGlzIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYmluZCIsImNhbGwiLCJ0b09iamVjdCIsImNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmciLCJpc0FycmF5SXRlcmF0b3JNZXRob2QiLCJsZW5ndGhPZkFycmF5TGlrZSIsImNyZWF0ZVByb3BlcnR5IiwiZ2V0SXRlcmF0b3IiLCJnZXRJdGVyYXRvck1ldGhvZCIsImFycmF5TGlrZSIsIk8iLCJJU19DT05TVFJVQ1RPUiIsImFyZ3VtZW50c0xlbmd0aCIsIm1hcGZuIiwibWFwcGluZyIsInJlc3VsdCIsInN0ZXAiLCJpdGVyYXRvciIsIm5leHQiLCJpdGVyYXRvck1ldGhvZCIsImluZGV4IiwiZG9uZSIsInRvSW5kZXhlZE9iamVjdCIsInRvQWJzb2x1dGVJbmRleCIsImNyZWF0ZU1ldGhvZCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJlbCIsImZyb21JbmRleCIsImluY2x1ZGVzIiwiaW5kZXhPZiIsInVuY3VycnlUaGlzIiwiSW5kZXhlZE9iamVjdCIsImFycmF5U3BlY2llc0NyZWF0ZSIsInB1c2giLCJUWVBFIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIklTX0ZJTFRFUl9SRUpFQ1QiLCJOT19IT0xFUyIsInRoYXQiLCJzcGVjaWZpY0NyZWF0ZSIsInNlbGYiLCJib3VuZEZ1bmN0aW9uIiwidGFyZ2V0IiwibWFwIiwiZmlsdGVyIiwic29tZSIsImV2ZXJ5IiwiZmluZCIsImZpbmRJbmRleCIsImZpbHRlclJlamVjdCIsImZhaWxzIiwiVjhfVkVSU0lPTiIsIlNQRUNJRVMiLCJNRVRIT0RfTkFNRSIsImFycmF5IiwiY29uc3RydWN0b3IiLCJmb28iLCJCb29sZWFuIiwibWV0aG9kIiwibWF4IiwiTWF0aCIsInN0YXJ0IiwiZW5kIiwiayIsImZpbiIsIm4iLCJzbGljZSIsImlzQXJyYXkiLCJvcmlnaW5hbEFycmF5IiwiQyIsImFycmF5U3BlY2llc0NvbnN0cnVjdG9yIiwiYW5PYmplY3QiLCJpdGVyYXRvckNsb3NlIiwiZm4iLCJFTlRSSUVTIiwiZXJyb3IiLCJJVEVSQVRPUiIsIlNBRkVfQ0xPU0lORyIsImNhbGxlZCIsIml0ZXJhdG9yV2l0aFJldHVybiIsImZyb20iLCJleGVjIiwiU0tJUF9DTE9TSU5HIiwiSVRFUkFUSU9OX1NVUFBPUlQiLCJvYmplY3QiLCJ0b1N0cmluZyIsInN0cmluZ1NsaWNlIiwiVE9fU1RSSU5HX1RBR19TVVBQT1JUIiwiY2xhc3NvZlJhdyIsIlRPX1NUUklOR19UQUciLCJPYmplY3QiLCJDT1JSRUNUX0FSR1VNRU5UUyIsInRhZyIsInRyeUdldCIsImNhbGxlZSIsImhhc093biIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUiLCJzb3VyY2UiLCJleGNlcHRpb25zIiwia2V5cyIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiaSIsIk1BVENIIiwicmVnZXhwIiwiZXJyb3IxIiwiZXJyb3IyIiwiRiIsImdldFByb3RvdHlwZU9mIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IiLCJzZXRUb1N0cmluZ1RhZyIsIkl0ZXJhdG9ycyIsInJldHVyblRoaXMiLCJJdGVyYXRvckNvbnN0cnVjdG9yIiwiTkFNRSIsIkVOVU1FUkFCTEVfTkVYVCIsIkRFU0NSSVBUT1JTIiwiYml0bWFwIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwidG9Qcm9wZXJ0eUtleSIsInByb3BlcnR5S2V5IiwiJCIsIklTX1BVUkUiLCJGdW5jdGlvbk5hbWUiLCJjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yIiwic2V0UHJvdG90eXBlT2YiLCJjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkiLCJyZWRlZmluZSIsIkl0ZXJhdG9yc0NvcmUiLCJQUk9QRVJfRlVOQ1RJT05fTkFNRSIsIlBST1BFUiIsIkNPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FIiwiQ09ORklHVVJBQkxFIiwiQlVHR1lfU0FGQVJJX0lURVJBVE9SUyIsIktFWVMiLCJWQUxVRVMiLCJJdGVyYWJsZSIsIkRFRkFVTFQiLCJJU19TRVQiLCJGT1JDRUQiLCJDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUiLCJtZXRob2RzIiwiS0VZIiwiZ2V0SXRlcmF0aW9uTWV0aG9kIiwiS0lORCIsImRlZmF1bHRJdGVyYXRvciIsIkl0ZXJhYmxlUHJvdG90eXBlIiwiSU5DT1JSRUNUX1ZBTFVFU19OQU1FIiwibmF0aXZlSXRlcmF0b3IiLCJhbnlOYXRpdmVJdGVyYXRvciIsImVudHJpZXMiLCJuYW1lIiwidmFsdWVzIiwicHJvdG8iLCJmb3JjZWQiLCJwYXRoIiwid3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSIsIlN5bWJvbCIsImdldCIsImRvY3VtZW50IiwiRVhJU1RTIiwiY3JlYXRlRWxlbWVudCIsIkNTU1J1bGVMaXN0IiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsIkNTU1ZhbHVlTGlzdCIsIkNsaWVudFJlY3RMaXN0IiwiRE9NUmVjdExpc3QiLCJET01TdHJpbmdMaXN0IiwiRE9NVG9rZW5MaXN0IiwiRGF0YVRyYW5zZmVySXRlbUxpc3QiLCJGaWxlTGlzdCIsIkhUTUxBbGxDb2xsZWN0aW9uIiwiSFRNTENvbGxlY3Rpb24iLCJIVE1MRm9ybUVsZW1lbnQiLCJIVE1MU2VsZWN0RWxlbWVudCIsIk1lZGlhTGlzdCIsIk1pbWVUeXBlQXJyYXkiLCJOYW1lZE5vZGVNYXAiLCJOb2RlTGlzdCIsIlBhaW50UmVxdWVzdExpc3QiLCJQbHVnaW4iLCJQbHVnaW5BcnJheSIsIlNWR0xlbmd0aExpc3QiLCJTVkdOdW1iZXJMaXN0IiwiU1ZHUGF0aFNlZ0xpc3QiLCJTVkdQb2ludExpc3QiLCJTVkdTdHJpbmdMaXN0IiwiU1ZHVHJhbnNmb3JtTGlzdCIsIlNvdXJjZUJ1ZmZlckxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIlRleHRUcmFja0N1ZUxpc3QiLCJUZXh0VHJhY2tMaXN0IiwiVG91Y2hMaXN0IiwiY2xhc3NMaXN0IiwiZG9jdW1lbnRDcmVhdGVFbGVtZW50IiwiRE9NVG9rZW5MaXN0UHJvdG90eXBlIiwid2luZG93IiwidXNlckFnZW50IiwidGVzdCIsIlBlYmJsZSIsImNsYXNzb2YiLCJwcm9jZXNzIiwiZ2V0QnVpbHRJbiIsIm1hdGNoIiwidmVyc2lvbiIsIkRlbm8iLCJ2ZXJzaW9ucyIsInY4Iiwic3BsaXQiLCJzZXRHbG9iYWwiLCJjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzIiwiaXNGb3JjZWQiLCJvcHRpb25zIiwidGFyZ2V0UHJvcGVydHkiLCJzb3VyY2VQcm9wZXJ0eSIsImRlc2NyaXB0b3IiLCJUQVJHRVQiLCJHTE9CQUwiLCJTVEFUSUMiLCJzdGF0Iiwibm9UYXJnZXRHZXQiLCJzaGFtIiwiTkFUSVZFX0JJTkQiLCJGdW5jdGlvblByb3RvdHlwZSIsIkZ1bmN0aW9uIiwiYXBwbHkiLCJSZWZsZWN0IiwiYUNhbGxhYmxlIiwiaGFzT3duUHJvcGVydHkiLCJhcnJheVNsaWNlIiwiY29uY2F0Iiwiam9pbiIsImZhY3RvcmllcyIsImNvbnN0cnVjdCIsImFyZ3NMZW5ndGgiLCJhcmdzIiwibGlzdCIsInBhcnRBcmdzIiwiZ2V0RGVzY3JpcHRvciIsImFGdW5jdGlvbiIsIm5hbWVzcGFjZSIsImdldE1ldGhvZCIsInVzaW5nSXRlcmF0b3IiLCJWIiwiUCIsImZ1bmMiLCJjaGVjayIsImdsb2JhbFRoaXMiLCJnIiwiYSIsImIiLCJjb25zb2xlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzdG9yZSIsImZ1bmN0aW9uVG9TdHJpbmciLCJpbnNwZWN0U291cmNlIiwic2V0IiwiaGFzIiwiTkFUSVZFX1dFQUtfTUFQIiwic2hhcmVkIiwic2hhcmVkS2V5IiwiaGlkZGVuS2V5cyIsIk9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEIiwiV2Vha01hcCIsInN0YXRlIiwid21nZXQiLCJ3bWhhcyIsIndtc2V0IiwibWV0YWRhdGEiLCJmYWNhZGUiLCJTVEFURSIsImVuZm9yY2UiLCJnZXR0ZXJGb3IiLCJ0eXBlIiwibm9vcCIsImVtcHR5IiwiY29uc3RydWN0b3JSZWdFeHAiLCJJTkNPUlJFQ1RfVE9fU1RSSU5HIiwiaXNDb25zdHJ1Y3Rvck1vZGVybiIsImlzQ29uc3RydWN0b3JMZWdhY3kiLCJyZXBsYWNlbWVudCIsImZlYXR1cmUiLCJkZXRlY3Rpb24iLCJkYXRhIiwibm9ybWFsaXplIiwiUE9MWUZJTEwiLCJOQVRJVkUiLCJzdHJpbmciLCJyZXBsYWNlIiwidG9Mb3dlckNhc2UiLCJpc1JlZ0V4cCIsIlVTRV9TWU1CT0xfQVNfVUlEIiwiJFN5bWJvbCIsIlJlc3VsdCIsInN0b3BwZWQiLCJSZXN1bHRQcm90b3R5cGUiLCJpdGVyYWJsZSIsInVuYm91bmRGdW5jdGlvbiIsIml0ZXJGbiIsIkFTX0VOVFJJRVMiLCJJU19JVEVSQVRPUiIsIklOVEVSUlVQVEVEIiwic3RvcCIsImNvbmRpdGlvbiIsImNhbGxGbiIsImtpbmQiLCJpbm5lclJlc3VsdCIsImlubmVyRXJyb3IiLCJQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUiLCJhcnJheUl0ZXJhdG9yIiwidG9MZW5ndGgiLCJvYmoiLCJmbHVzaCIsImhlYWQiLCJsYXN0Iiwibm90aWZ5IiwidG9nZ2xlIiwibm9kZSIsInByb21pc2UiLCJ0aGVuIiwibWFjcm90YXNrIiwiSVNfSU9TIiwiSVNfSU9TX1BFQkJMRSIsIklTX1dFQk9TX1dFQktJVCIsIklTX05PREUiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsIlByb21pc2UiLCJxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IiLCJxdWV1ZU1pY3JvdGFzayIsInBhcmVudCIsImRvbWFpbiIsImV4aXQiLCJlbnRlciIsInJlc29sdmUiLCJuZXh0VGljayIsImNyZWF0ZVRleHROb2RlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJ0YXNrIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltYm9sIiwiUHJvbWlzZUNhcGFiaWxpdHkiLCJyZWplY3QiLCIkJHJlc29sdmUiLCIkJHJlamVjdCIsImFjdGl2ZVhEb2N1bWVudCIsImRlZmluZVByb3BlcnRpZXNNb2R1bGUiLCJlbnVtQnVnS2V5cyIsImh0bWwiLCJJRV9QUk9UTyIsIkVtcHR5Q29uc3RydWN0b3IiLCJzY3JpcHRUYWciLCJjb250ZW50IiwiTFQiLCJOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYIiwid3JpdGUiLCJjbG9zZSIsInRlbXAiLCJwYXJlbnRXaW5kb3ciLCJOdWxsUHJvdG9PYmplY3QiLCJBY3RpdmVYT2JqZWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwiUHJvcGVydGllcyIsIlY4X1BST1RPVFlQRV9ERUZJTkVfQlVHIiwib2JqZWN0S2V5cyIsImRlZmluZVByb3BlcnRpZXMiLCJwcm9wcyIsIklFOF9ET01fREVGSU5FIiwiJGRlZmluZVByb3BlcnR5IiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIkF0dHJpYnV0ZXMiLCJjdXJyZW50IiwicHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIndpbmRvd05hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldFdpbmRvd05hbWVzIiwiaW50ZXJuYWxPYmplY3RLZXlzIiwiQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSIiwiT2JqZWN0UHJvdG90eXBlIiwibmFtZXMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCJOQVNIT1JOX0JVRyIsImFQb3NzaWJsZVByb3RvdHlwZSIsInNldHRlciIsIkNPUlJFQ1RfU0VUVEVSIiwiX19wcm90b19fIiwiVE9fRU5UUklFUyIsImlucHV0IiwicHJlZiIsInZhbCIsInZhbHVlT2YiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlIiwibmV3UHJvbWlzZUNhcGFiaWxpdHkiLCJ4IiwicHJvbWlzZUNhcGFiaWxpdHkiLCJRdWV1ZSIsInRhaWwiLCJhZGQiLCJpdGVtIiwiZW50cnkiLCJJbnRlcm5hbFN0YXRlTW9kdWxlIiwiZ2V0SW50ZXJuYWxTdGF0ZSIsImVuZm9yY2VJbnRlcm5hbFN0YXRlIiwiVEVNUExBVEUiLCJ1bnNhZmUiLCJzaW1wbGUiLCJyZTEiLCJyZTIiLCJyZWdleHBGbGFncyIsInN0aWNreUhlbHBlcnMiLCJVTlNVUFBPUlRFRF9ET1RfQUxMIiwiVU5TVVBQT1JURURfTkNHIiwibmF0aXZlUmVwbGFjZSIsIm5hdGl2ZUV4ZWMiLCJSZWdFeHAiLCJwYXRjaGVkRXhlYyIsImNoYXJBdCIsIlVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyIsImxhc3RJbmRleCIsIlVOU1VQUE9SVEVEX1kiLCJCUk9LRU5fQ0FSRVQiLCJOUENHX0lOQ0xVREVEIiwicmVDb3B5IiwiZ3JvdXAiLCJyZSIsInN0ciIsInJhdyIsImdyb3VwcyIsInN0aWNreSIsImZsYWdzIiwiY2hhcnNBZGRlZCIsInN0ckNvcHkiLCJtdWx0aWxpbmUiLCJpZ25vcmVDYXNlIiwiZG90QWxsIiwidW5pY29kZSIsIiRSZWdFeHAiLCJNSVNTRURfU1RJQ0tZIiwiQ09OU1RSVUNUT1JfTkFNRSIsIkNvbnN0cnVjdG9yIiwiVEFHIiwidWlkIiwiU0hBUkVEIiwibW9kZSIsImNvcHlyaWdodCIsImxpY2Vuc2UiLCJhQ29uc3RydWN0b3IiLCJkZWZhdWx0Q29uc3RydWN0b3IiLCJTIiwidG9JbnRlZ2VyT3JJbmZpbml0eSIsInJlcXVpcmVPYmplY3RDb2VyY2libGUiLCJjaGFyQ29kZUF0IiwiQ09OVkVSVF9UT19TVFJJTkciLCJwb3MiLCJmaXJzdCIsInNlY29uZCIsInBvc2l0aW9uIiwic2l6ZSIsImNvZGVBdCIsImxvY2F0aW9uIiwiZGVmZXIiLCJjaGFubmVsIiwicG9ydCIsInZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoIiwic2V0SW1tZWRpYXRlIiwiY2xlYXIiLCJjbGVhckltbWVkaWF0ZSIsIkRpc3BhdGNoIiwiTWVzc2FnZUNoYW5uZWwiLCJjb3VudGVyIiwicXVldWUiLCJydW4iLCJpZCIsInJ1bm5lciIsImxpc3RlbmVyIiwiZXZlbnQiLCJwb3N0IiwicG9zdE1lc3NhZ2UiLCJwcm90b2NvbCIsImhvc3QiLCJoYW5kbGVyIiwibm93IiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbXBvcnRTY3JpcHRzIiwicmVtb3ZlQ2hpbGQiLCJzZXRUaW1lb3V0IiwibWluIiwiaW50ZWdlciIsImNlaWwiLCJmbG9vciIsIm51bWJlciIsImlzU3ltYm9sIiwib3JkaW5hcnlUb1ByaW1pdGl2ZSIsIlRPX1BSSU1JVElWRSIsImV4b3RpY1RvUHJpbSIsInRvUHJpbWl0aXZlIiwicG9zdGZpeCIsInJhbmRvbSIsIk5BVElWRV9TWU1CT0wiLCJwYXNzZWQiLCJyZXF1aXJlZCIsIldlbGxLbm93blN5bWJvbHNTdG9yZSIsInN5bWJvbEZvciIsImNyZWF0ZVdlbGxLbm93blN5bWJvbCIsIndpdGhvdXRTZXR0ZXIiLCJkZXNjcmlwdGlvbiIsImFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQiLCJJU19DT05DQVRfU1BSRUFEQUJMRSIsIk1BWF9TQUZFX0lOVEVHRVIiLCJNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQiLCJJU19DT05DQVRfU1BSRUFEQUJMRV9TVVBQT1JUIiwiU1BFQ0lFU19TVVBQT1JUIiwiaXNDb25jYXRTcHJlYWRhYmxlIiwic3ByZWFkYWJsZSIsImFyZyIsImxlbiIsIkUiLCJBIiwiJGZpbHRlciIsIiRmaW5kIiwiYWRkVG9VbnNjb3BhYmxlcyIsIkZJTkQiLCJTS0lQU19IT0xFUyIsImNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiIsIiRpbmNsdWRlcyIsImRlZmluZUl0ZXJhdG9yIiwiQVJSQVlfSVRFUkFUT1IiLCJzZXRJbnRlcm5hbFN0YXRlIiwiaXRlcmF0ZWQiLCJBcmd1bWVudHMiLCIkbWFwIiwidW4kU2xpY2UiLCJIQVNfU1BFQ0lFU19TVVBQT1JUIiwiTUFYSU1VTV9BTExPV0VEX0xFTkdUSF9FWENFRURFRCIsInNwbGljZSIsImRlbGV0ZUNvdW50IiwiaW5zZXJ0Q291bnQiLCJhY3R1YWxEZWxldGVDb3VudCIsInRvIiwiYWN0dWFsU3RhcnQiLCJGVU5DVElPTl9OQU1FX0VYSVNUUyIsIm5hbWVSRSIsInJlZ0V4cEV4ZWMiLCJuYXRpdmVHZXRQcm90b3R5cGVPZiIsIiR2YWx1ZXMiLCJJbnRlcm5hbCIsIk93blByb21pc2VDYXBhYmlsaXR5IiwiUHJvbWlzZVdyYXBwZXIiLCJuYXRpdmVUaGVuIiwiTmF0aXZlUHJvbWlzZSIsInJlZGVmaW5lQWxsIiwic2V0U3BlY2llcyIsImFuSW5zdGFuY2UiLCJpdGVyYXRlIiwic3BlY2llc0NvbnN0cnVjdG9yIiwibWljcm90YXNrIiwicHJvbWlzZVJlc29sdmUiLCJob3N0UmVwb3J0RXJyb3JzIiwibmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUiLCJwZXJmb3JtIiwiSVNfQlJPV1NFUiIsIlBST01JU0UiLCJnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSIsIk5hdGl2ZVByb21pc2VQcm90b3R5cGUiLCJQcm9taXNlQ29uc3RydWN0b3IiLCJQcm9taXNlUHJvdG90eXBlIiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiRElTUEFUQ0hfRVZFTlQiLCJjcmVhdGVFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJOQVRJVkVfUkVKRUNUSU9OX0VWRU5UIiwiUHJvbWlzZVJlamVjdGlvbkV2ZW50IiwiVU5IQU5ETEVEX1JFSkVDVElPTiIsIlNVQkNMQVNTSU5HIiwiUFJPTUlTRV9DT05TVFJVQ1RPUl9TT1VSQ0UiLCJHTE9CQUxfQ09SRV9KU19QUk9NSVNFIiwiRmFrZVByb21pc2UiLCJJTkNPUlJFQ1RfSVRFUkFUSU9OIiwiYWxsIiwiaXNUaGVuYWJsZSIsImNhbGxSZWFjdGlvbiIsInJlYWN0aW9uIiwiZXhpdGVkIiwib2siLCJmYWlsIiwicmVqZWN0aW9uIiwib25IYW5kbGVVbmhhbmRsZWQiLCJpc1JlamVjdCIsIm5vdGlmaWVkIiwicmVhY3Rpb25zIiwib25VbmhhbmRsZWQiLCJyZWFzb24iLCJpbml0RXZlbnQiLCJpc1VuaGFuZGxlZCIsImVtaXQiLCJ1bndyYXAiLCJpbnRlcm5hbFJlamVjdCIsImludGVybmFsUmVzb2x2ZSIsIndyYXBwZXIiLCJleGVjdXRvciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsIndyYXAiLCJyIiwiY2FwYWJpbGl0eSIsIiRwcm9taXNlUmVzb2x2ZSIsInJlbWFpbmluZyIsImFscmVhZHlDYWxsZWQiLCJyYWNlIiwibmF0aXZlQ29uc3RydWN0IiwiTkVXX1RBUkdFVF9CVUciLCJBUkdTX0JVRyIsIlRhcmdldCIsIm5ld1RhcmdldCIsIiRhcmdzIiwiaW5zdGFuY2UiLCJub3RBUmVnRXhwIiwiY29ycmVjdElzUmVnRXhwTG9naWMiLCJzdHJpbmdJbmRleE9mIiwic2VhcmNoU3RyaW5nIiwiU1RSSU5HX0lURVJBVE9SIiwicG9pbnQiLCJ1biRTdGFydHNXaXRoIiwic3RhcnRzV2l0aCIsIkNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDIiwic2VhcmNoIiwiTmF0aXZlU3ltYm9sIiwiU3ltYm9sUHJvdG90eXBlIiwiRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlIiwiU3ltYm9sV3JhcHBlciIsInN5bWJvbFRvU3RyaW5nIiwic3ltYm9sVmFsdWVPZiIsImRlc2MiLCJkZWZpbmVXZWxsS25vd25TeW1ib2wiLCIkdG9TdHJpbmciLCJuYXRpdmVPYmplY3RDcmVhdGUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwiLCJISURERU4iLCJTWU1CT0wiLCJRT2JqZWN0IiwiJHN0cmluZ2lmeSIsIm5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIm5hdGl2ZURlZmluZVByb3BlcnR5IiwibmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyIsIm5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlIiwiQWxsU3ltYm9scyIsIk9iamVjdFByb3RvdHlwZVN5bWJvbHMiLCJTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5IiwiU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSIsIlVTRV9TRVRURVIiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjcmlwdG9yIiwiT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwicHJvcGVydGllcyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJJU19PQkpFQ1RfUFJPVE9UWVBFIiwia2V5Rm9yIiwic3ltIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwic3RyaW5naWZ5IiwicmVwbGFjZXIiLCJzcGFjZSIsIiRyZXBsYWNlciIsImhpbnQiLCJET01JdGVyYWJsZXMiLCJoYW5kbGVQcm90b3R5cGUiLCJDb2xsZWN0aW9uUHJvdG90eXBlIiwiQ09MTEVDVElPTl9OQU1FIiwiQXJyYXlJdGVyYXRvck1ldGhvZHMiLCJBcnJheVZhbHVlcyIsInJ1bnRpbWUiLCJPcCIsIml0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsInRvU3RyaW5nVGFnIiwiZGVmaW5lIiwiZXJyIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiY29udGV4dCIsIkNvbnRleHQiLCJfaW52b2tlIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIkdlblN0YXRlRXhlY3V0aW5nIiwiRXJyb3IiLCJHZW5TdGF0ZUNvbXBsZXRlZCIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsIkNvbnRpbnVlU2VudGluZWwiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsInJlY29yZCIsInRyeUNhdGNoIiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIm1ha2VJbnZva2VNZXRob2QiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiZ2V0UHJvdG8iLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsIlByb21pc2VJbXBsIiwiaW52b2tlIiwiX19hd2FpdCIsInVud3JhcHBlZCIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiaW5mbyIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpc05hTiIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJtYXJrIiwiYXdyYXAiLCJhc3luYyIsIml0ZXIiLCJyZXZlcnNlIiwicG9wIiwic2tpcFRlbXBSZXNldCIsInByZXYiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImUiLCJjb3VudFBvc3NpYmxlSW5kZXhlcyIsImN1cnJlbnRJbmRleCIsIm1vdmVEaXN0YW5jZSIsImJvYXJkU2l6ZSIsInBvc3NpYmxlSW5kZXhlcyIsImNvdW50Um93IiwidmFyaWFibGUiLCJ1cCIsImRvd24iLCJsZWZ0IiwicmlnaHQiLCJ1cFJpZ2h0RGlhZyIsInVwTGVmdERpYWciLCJkb3duUmlnaHREaWFnIiwiZG93bkxlZnREaWFnIiwiY3VycmVudEluZGV4Um93IiwicG9zc2libGVNb3ZlIiwiZnV0dXJlSW5kZXgiLCJzZXRUaW1lciIsInRpbWUiLCJHYW1lUGxheSIsImNvbnRhaW5lciIsImJvYXJkRWwiLCJjZWxscyIsImNlbGxDbGlja0xpc3RlbmVycyIsImNlbGxFbnRlckxpc3RlbmVycyIsImNlbGxMZWF2ZUxpc3RlbmVycyIsIm5ld0dhbWVMaXN0ZW5lcnMiLCJzYXZlR2FtZUxpc3RlbmVycyIsImxvYWRHYW1lTGlzdGVuZXJzIiwiSFRNTEVsZW1lbnQiLCJ0aGVtZSIsInNxdWFyZSIsImNoZWNrQmluZGluZyIsImlubmVySFRNTCIsIm5ld0dhbWVFbCIsInF1ZXJ5U2VsZWN0b3IiLCJzYXZlR2FtZUVsIiwibG9hZEdhbWVFbCIsImN1cnJlbnRMZXZlbCIsImN1cnJlbnRTY29yZSIsImJlc3RTY29yZSIsIm9uTmV3R2FtZUNsaWNrIiwib25TYXZlR2FtZUNsaWNrIiwib25Mb2FkR2FtZUNsaWNrIiwiY2VsbEVsIiwib25DZWxsRW50ZXIiLCJvbkNlbGxMZWF2ZSIsIm9uQ2VsbENsaWNrIiwiY2hpbGRyZW4iLCJwb3NpdGlvbnMiLCJoZWFsdGgiLCJjaGFyRWwiLCJjaGFyYWN0ZXIiLCJoZWFsdGhFbCIsImhlYWx0aEluZGljYXRvckVsIiwid2lkdGgiLCJjYWxsYmFjayIsInByZXZlbnREZWZhdWx0IiwiY3VycmVudFRhcmdldCIsIm8iLCJjb2xvciIsImNvbG91ciIsImRlc2VsZWN0Q2VsbCIsImNlbGwiLCJyZW1vdmUiLCJtZXNzYWdlIiwidGl0bGUiLCJkYW1hZ2UiLCJkYW1hZ2VFbCIsInRleHRDb250ZW50IiwiY3Vyc29yIiwibGV2ZWwiLCJwb2ludHMiLCJoaWdoZXN0UG9pbnRzIiwiYWxlcnQiLCJwcmFpcmllIiwiZGVzZXJ0IiwiYXJjdGljIiwibW91bnRhaW4iLCJDaGFyYWN0ZXIiLCJhdHRhY2siLCJkZWZlbmNlIiwiZXJyb3JzIiwicm91bmQiLCJQb3NpdGlvbmVkQ2hhcmFjdGVyIiwiY2hhcmFjdGVyR2VuZXJhdG9yIiwiYWxsb3dlZFR5cGVzIiwibWF4TGV2ZWwiLCJnZW5lcmF0ZVRlYW0iLCJjaGFyYWN0ZXJDb3VudCIsInRlYW0iLCJnZW5lcmF0ZVBvc2l0aW9uIiwic2lkZSIsImFsbENlbGxzIiwicG9zc2libGVDZWxscyIsInRlYW1zIiwicG9zaXRpb25lZENoYXJhY3RlcnMiLCJCb3dtYW4iLCJhdHRhY2tEaXN0YW5jZSIsIkRhZW1vbiIsIk1hZ2ljaWFuIiwiU3dvcmRzbWFuIiwiVW5kZWFkIiwiVmFtcGlyZSIsIlRlYW0iLCJ0ZWFtQ29tcCIsInRlYW1IdW1hbkluaXQiLCJ0ZWFtSHVtYW4iLCJHYW1lU3RhdGUiLCJwbGF5ZXJzVHVybiIsInBvc2l0aW9uZWQiLCJHYW1lQ29udHJvbGxlciIsImdhbWVQbGF5Iiwic3RhdGVTZXJ2aWNlIiwiZ2FtZVN0YXRlIiwic2VsZWN0ZWRDaGFyYWN0ZXIiLCJpbmRleE9mU2VsZWN0ZWRDaGFyYWN0ZXIiLCJwcmV2aW91c2x5U2VsZWN0ZWQiLCJwcmVwYXJlQm9hcmQiLCJkcmF3Q2hhcmFjdGVycyIsImRyYXdVaSIsInRoZW1lcyIsInJlbW92ZUxpc3RlbmVycyIsImFkZExpc3RlbmVycyIsInNob3dTdGF0cyIsInBvc1RlYW1IdW1hbiIsInBvc1RlYW1Db21wIiwicmVkcmF3UG9zaXRpb25zIiwiY2hhcmFjdGVySGVyZSIsImZpbmRDaGFyYWN0ZXJIZXJlIiwic2V0Q3Vyc29yIiwiY3Vyc29ycyIsInNob3dDZWxsVG9vbHRpcCIsIm51bU9mU3RlcHNUb01vdmUiLCJmaW5kTnVtYmVyT2ZTdGVwc1RvTW92ZSIsIm51bU9mU3RlcHNUb0F0dGFjayIsImZpbmROdW1iZXJPZlN0ZXBzVG9BdHRhY2siLCJhbGxvd2VkTW92ZSIsImFsbG93ZWRBdHRhY2siLCJzZWxlY3RDZWxsIiwiaGlkZUNlbGxUb29sdGlwIiwic2hvd0Vycm9yIiwibnVtT2ZTdGVwcyIsImNvbXBldGl0aW9uIiwiZGFtYWdlVmFsdWUiLCJzaG93RGFtYWdlIiwicmVtb3ZlZCIsImxldmVsVXAiLCJyZW1vdmVTZWxlY3RlZCIsImNvbXB1dGVyc01vdmUiLCJwbGF5aW5nQ2hhcmFjdGVyIiwicGxheWluZ0NoYXJhY3RlckluZGV4IiwiaHVtYW5zUG9zaXRpb25zIiwiZWxlbWVudCIsImNvbXBzUG9zaXRpb25zIiwicG9zc2libGVNb3ZlcyIsIm1vdmUiLCJwb3NzaWJsZUF0dGFja3MiLCJwb3NzaWJsZUF0dGFjayIsInRvQXR0YWNrIiwiZW5lbXkiLCJzaG93TWVzc2FnZSIsInJlZHVjZSIsInN1bSIsIm1lc3NhZ2VzIiwiZGVzZWxlY3QiLCJpbml0Iiwic2F2ZSIsImxvYWRTdGF0ZSIsImxvYWQiLCJ0eXBlcyIsImFkZENlbGxFbnRlckxpc3RlbmVyIiwiYWRkQ2VsbExlYXZlTGlzdGVuZXIiLCJhZGRDZWxsQ2xpY2tMaXN0ZW5lciIsImFkZE5ld0dhbWVMaXN0ZW5lciIsImFkZFNhdmVHYW1lTGlzdGVuZXIiLCJhZGRMb2FkR2FtZUxpc3RlbmVyIiwib25Mb2FkR2FtZSIsInNldEN1cnJlbnRMZXZlbCIsInNldEN1cnJlbnRTY29yZSIsInNldEJlc3RTY29yZSIsIkdhbWVTdGF0ZVNlcnZpY2UiLCJzdG9yYWdlIiwic2V0SXRlbSIsIkpTT04iLCJwYXJzZSIsImdldEl0ZW0iLCJiaW5kVG9ET00iLCJsb2NhbFN0b3JhZ2UiXSwic291cmNlUm9vdCI6IiJ9